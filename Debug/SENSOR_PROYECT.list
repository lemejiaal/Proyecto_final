
SENSOR_PROYECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007468  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002594  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b8c  08009b8c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08009b8c  08009b8c  00019b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b94  08009b94  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b94  08009b94  00019b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b98  08009b98  00019b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08009b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  20000098  08009c34  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  08009c34  0002082c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001401e  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027ea  00000000  00000000  00034129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  00036918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eaa  00000000  00000000  00037bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b80  00000000  00000000  00038a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ee0  00000000  00000000  000605e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5e70  00000000  00000000  000774c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055ac  00000000  00000000  0016d334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001728e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075e0 	.word	0x080075e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	080075e0 	.word	0x080075e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <KeyPad_Read>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint32_t Confirmar_lectura = 0;
static uint32_t DETECTAR_CLICK = 0;
static uint32_t DETECTAR_CLICK2 = 0;
char KeyPad_Read(void) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

	static uint8_t Char;
	static uint32_t cont = 0;
	static uint32_t lastTick = 0;
	if (HAL_GetTick() - lastTick > 700) {
 8000d4c:	f001 fe10 	bl	8002970 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	4baa      	ldr	r3, [pc, #680]	; (8000ffc <KeyPad_Read+0x2b4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000d5c:	f240 8204 	bls.w	8001168 <KeyPad_Read+0x420>
		HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f002 f905 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f002 f8fe 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F3_GPIO_Port, F3_Pin, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d82:	489f      	ldr	r0, [pc, #636]	; (8001000 <KeyPad_Read+0x2b8>)
 8000d84:	f002 f8f8 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F4_GPIO_Port, F4_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8e:	489c      	ldr	r0, [pc, #624]	; (8001000 <KeyPad_Read+0x2b8>)
 8000d90:	f002 f8f2 	bl	8002f78 <HAL_GPIO_WritePin>

		if (!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))) {
 8000d94:	2104      	movs	r1, #4
 8000d96:	489a      	ldr	r0, [pc, #616]	; (8001000 <KeyPad_Read+0x2b8>)
 8000d98:	f002 f8d6 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10a      	bne.n	8000db8 <KeyPad_Read+0x70>
			if (!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000da2:	2104      	movs	r1, #4
 8000da4:	4896      	ldr	r0, [pc, #600]	; (8001000 <KeyPad_Read+0x2b8>)
 8000da6:	f002 f8cf 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8000daa:	4b96      	ldr	r3, [pc, #600]	; (8001004 <KeyPad_Read+0x2bc>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
			Char = '1';
 8000db0:	4b95      	ldr	r3, [pc, #596]	; (8001008 <KeyPad_Read+0x2c0>)
 8000db2:	2231      	movs	r2, #49	; 0x31
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	e004      	b.n	8000dc2 <KeyPad_Read+0x7a>
		} else {
			cont = cont + 1;
 8000db8:	4b94      	ldr	r3, [pc, #592]	; (800100c <KeyPad_Read+0x2c4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	4a93      	ldr	r2, [pc, #588]	; (800100c <KeyPad_Read+0x2c4>)
 8000dc0:	6013      	str	r3, [r2, #0]
		}

		if (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))) {
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	488e      	ldr	r0, [pc, #568]	; (8001000 <KeyPad_Read+0x2b8>)
 8000dc6:	f002 f8bf 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10a      	bne.n	8000de6 <KeyPad_Read+0x9e>
			if (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	488b      	ldr	r0, [pc, #556]	; (8001000 <KeyPad_Read+0x2b8>)
 8000dd4:	f002 f8b8 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8000dd8:	4b8a      	ldr	r3, [pc, #552]	; (8001004 <KeyPad_Read+0x2bc>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
			Char = '2';
 8000dde:	4b8a      	ldr	r3, [pc, #552]	; (8001008 <KeyPad_Read+0x2c0>)
 8000de0:	2232      	movs	r2, #50	; 0x32
 8000de2:	701a      	strb	r2, [r3, #0]
 8000de4:	e004      	b.n	8000df0 <KeyPad_Read+0xa8>
		} else {
			cont = cont + 1;
 8000de6:	4b89      	ldr	r3, [pc, #548]	; (800100c <KeyPad_Read+0x2c4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a87      	ldr	r2, [pc, #540]	; (800100c <KeyPad_Read+0x2c4>)
 8000dee:	6013      	str	r3, [r2, #0]
		}

		if (!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))) {
 8000df0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df4:	4882      	ldr	r0, [pc, #520]	; (8001000 <KeyPad_Read+0x2b8>)
 8000df6:	f002 f8a7 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10b      	bne.n	8000e18 <KeyPad_Read+0xd0>
			if (!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8000e00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e04:	487e      	ldr	r0, [pc, #504]	; (8001000 <KeyPad_Read+0x2b8>)
 8000e06:	f002 f89f 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8000e0a:	4b7e      	ldr	r3, [pc, #504]	; (8001004 <KeyPad_Read+0x2bc>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
			Char = '3';
 8000e10:	4b7d      	ldr	r3, [pc, #500]	; (8001008 <KeyPad_Read+0x2c0>)
 8000e12:	2233      	movs	r2, #51	; 0x33
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e004      	b.n	8000e22 <KeyPad_Read+0xda>
		} else {
			cont = cont + 1;
 8000e18:	4b7c      	ldr	r3, [pc, #496]	; (800100c <KeyPad_Read+0x2c4>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	4a7b      	ldr	r2, [pc, #492]	; (800100c <KeyPad_Read+0x2c4>)
 8000e20:	6013      	str	r3, [r2, #0]
		}

		if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))) {
 8000e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e26:	4876      	ldr	r0, [pc, #472]	; (8001000 <KeyPad_Read+0x2b8>)
 8000e28:	f002 f88e 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10b      	bne.n	8000e4a <KeyPad_Read+0x102>
			if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 8000e32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e36:	4872      	ldr	r0, [pc, #456]	; (8001000 <KeyPad_Read+0x2b8>)
 8000e38:	f002 f886 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8000e3c:	4b71      	ldr	r3, [pc, #452]	; (8001004 <KeyPad_Read+0x2bc>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	601a      	str	r2, [r3, #0]
			Char = 'A';
 8000e42:	4b71      	ldr	r3, [pc, #452]	; (8001008 <KeyPad_Read+0x2c0>)
 8000e44:	2241      	movs	r2, #65	; 0x41
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	e004      	b.n	8000e54 <KeyPad_Read+0x10c>
		} else {
			cont = cont + 1;
 8000e4a:	4b70      	ldr	r3, [pc, #448]	; (800100c <KeyPad_Read+0x2c4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a6e      	ldr	r2, [pc, #440]	; (800100c <KeyPad_Read+0x2c4>)
 8000e52:	6013      	str	r3, [r2, #0]
		}

		//--------------------------------------------------------------
		HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f002 f88b 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f002 f884 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F3_GPIO_Port, F3_Pin, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e76:	4862      	ldr	r0, [pc, #392]	; (8001000 <KeyPad_Read+0x2b8>)
 8000e78:	f002 f87e 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F4_GPIO_Port, F4_Pin, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e82:	485f      	ldr	r0, [pc, #380]	; (8001000 <KeyPad_Read+0x2b8>)
 8000e84:	f002 f878 	bl	8002f78 <HAL_GPIO_WritePin>

		if (!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))) {
 8000e88:	2104      	movs	r1, #4
 8000e8a:	485d      	ldr	r0, [pc, #372]	; (8001000 <KeyPad_Read+0x2b8>)
 8000e8c:	f002 f85c 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10a      	bne.n	8000eac <KeyPad_Read+0x164>
			if (!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000e96:	2104      	movs	r1, #4
 8000e98:	4859      	ldr	r0, [pc, #356]	; (8001000 <KeyPad_Read+0x2b8>)
 8000e9a:	f002 f855 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8000e9e:	4b59      	ldr	r3, [pc, #356]	; (8001004 <KeyPad_Read+0x2bc>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
			Char = '4';
 8000ea4:	4b58      	ldr	r3, [pc, #352]	; (8001008 <KeyPad_Read+0x2c0>)
 8000ea6:	2234      	movs	r2, #52	; 0x34
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e004      	b.n	8000eb6 <KeyPad_Read+0x16e>
		} else {
			cont = cont + 1;
 8000eac:	4b57      	ldr	r3, [pc, #348]	; (800100c <KeyPad_Read+0x2c4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a56      	ldr	r2, [pc, #344]	; (800100c <KeyPad_Read+0x2c4>)
 8000eb4:	6013      	str	r3, [r2, #0]
		}

		if (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))) {
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4851      	ldr	r0, [pc, #324]	; (8001000 <KeyPad_Read+0x2b8>)
 8000eba:	f002 f845 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10a      	bne.n	8000eda <KeyPad_Read+0x192>
			if (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	484e      	ldr	r0, [pc, #312]	; (8001000 <KeyPad_Read+0x2b8>)
 8000ec8:	f002 f83e 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8000ecc:	4b4d      	ldr	r3, [pc, #308]	; (8001004 <KeyPad_Read+0x2bc>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]
			Char = '5';
 8000ed2:	4b4d      	ldr	r3, [pc, #308]	; (8001008 <KeyPad_Read+0x2c0>)
 8000ed4:	2235      	movs	r2, #53	; 0x35
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e004      	b.n	8000ee4 <KeyPad_Read+0x19c>
		} else {
			cont = cont + 1;
 8000eda:	4b4c      	ldr	r3, [pc, #304]	; (800100c <KeyPad_Read+0x2c4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a4a      	ldr	r2, [pc, #296]	; (800100c <KeyPad_Read+0x2c4>)
 8000ee2:	6013      	str	r3, [r2, #0]
		}

		if (!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))) {
 8000ee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee8:	4845      	ldr	r0, [pc, #276]	; (8001000 <KeyPad_Read+0x2b8>)
 8000eea:	f002 f82d 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d108      	bne.n	8000f06 <KeyPad_Read+0x1be>
			if (!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8000ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef8:	4841      	ldr	r0, [pc, #260]	; (8001000 <KeyPad_Read+0x2b8>)
 8000efa:	f002 f825 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Char = '6';
 8000efe:	4b42      	ldr	r3, [pc, #264]	; (8001008 <KeyPad_Read+0x2c0>)
 8000f00:	2236      	movs	r2, #54	; 0x36
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e004      	b.n	8000f10 <KeyPad_Read+0x1c8>
		} else {
			cont = cont + 1;
 8000f06:	4b41      	ldr	r3, [pc, #260]	; (800100c <KeyPad_Read+0x2c4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4a3f      	ldr	r2, [pc, #252]	; (800100c <KeyPad_Read+0x2c4>)
 8000f0e:	6013      	str	r3, [r2, #0]
		}

		if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))) {
 8000f10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f14:	483a      	ldr	r0, [pc, #232]	; (8001000 <KeyPad_Read+0x2b8>)
 8000f16:	f002 f817 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10b      	bne.n	8000f38 <KeyPad_Read+0x1f0>
			if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 8000f20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f24:	4836      	ldr	r0, [pc, #216]	; (8001000 <KeyPad_Read+0x2b8>)
 8000f26:	f002 f80f 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8000f2a:	4b36      	ldr	r3, [pc, #216]	; (8001004 <KeyPad_Read+0x2bc>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]
			Char = 'B';
 8000f30:	4b35      	ldr	r3, [pc, #212]	; (8001008 <KeyPad_Read+0x2c0>)
 8000f32:	2242      	movs	r2, #66	; 0x42
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	e004      	b.n	8000f42 <KeyPad_Read+0x1fa>
		} else {

			cont = cont + 1;
 8000f38:	4b34      	ldr	r3, [pc, #208]	; (800100c <KeyPad_Read+0x2c4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a33      	ldr	r2, [pc, #204]	; (800100c <KeyPad_Read+0x2c4>)
 8000f40:	6013      	str	r3, [r2, #0]
		}
		//--------------------------------------------------------------
		HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f002 f814 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f002 f80d 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F3_GPIO_Port, F3_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f64:	4826      	ldr	r0, [pc, #152]	; (8001000 <KeyPad_Read+0x2b8>)
 8000f66:	f002 f807 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F4_GPIO_Port, F4_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f70:	4823      	ldr	r0, [pc, #140]	; (8001000 <KeyPad_Read+0x2b8>)
 8000f72:	f002 f801 	bl	8002f78 <HAL_GPIO_WritePin>

		if (!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))) {
 8000f76:	2104      	movs	r1, #4
 8000f78:	4821      	ldr	r0, [pc, #132]	; (8001000 <KeyPad_Read+0x2b8>)
 8000f7a:	f001 ffe5 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10a      	bne.n	8000f9a <KeyPad_Read+0x252>
			if (!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8000f84:	2104      	movs	r1, #4
 8000f86:	481e      	ldr	r0, [pc, #120]	; (8001000 <KeyPad_Read+0x2b8>)
 8000f88:	f001 ffde 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <KeyPad_Read+0x2bc>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
			Char = '7';
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <KeyPad_Read+0x2c0>)
 8000f94:	2237      	movs	r2, #55	; 0x37
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e004      	b.n	8000fa4 <KeyPad_Read+0x25c>
		} else {
			cont = cont + 1;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <KeyPad_Read+0x2c4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	; (800100c <KeyPad_Read+0x2c4>)
 8000fa2:	6013      	str	r3, [r2, #0]
		}

		if (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))) {
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	4816      	ldr	r0, [pc, #88]	; (8001000 <KeyPad_Read+0x2b8>)
 8000fa8:	f001 ffce 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10a      	bne.n	8000fc8 <KeyPad_Read+0x280>
			if (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4812      	ldr	r0, [pc, #72]	; (8001000 <KeyPad_Read+0x2b8>)
 8000fb6:	f001 ffc7 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <KeyPad_Read+0x2bc>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
			Char = '8';
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <KeyPad_Read+0x2c0>)
 8000fc2:	2238      	movs	r2, #56	; 0x38
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	e004      	b.n	8000fd2 <KeyPad_Read+0x28a>
		} else {
			cont = cont + 1;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <KeyPad_Read+0x2c4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <KeyPad_Read+0x2c4>)
 8000fd0:	6013      	str	r3, [r2, #0]
		}

		if (!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))) {
 8000fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd6:	480a      	ldr	r0, [pc, #40]	; (8001000 <KeyPad_Read+0x2b8>)
 8000fd8:	f001 ffb6 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d116      	bne.n	8001010 <KeyPad_Read+0x2c8>
			if (!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <KeyPad_Read+0x2b8>)
 8000fe8:	f001 ffae 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <KeyPad_Read+0x2bc>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
			Char = '9';
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <KeyPad_Read+0x2c0>)
 8000ff4:	2239      	movs	r2, #57	; 0x39
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e00f      	b.n	800101a <KeyPad_Read+0x2d2>
 8000ffa:	bf00      	nop
 8000ffc:	200002a0 	.word	0x200002a0
 8001000:	48000400 	.word	0x48000400
 8001004:	20000294 	.word	0x20000294
 8001008:	200002a4 	.word	0x200002a4
 800100c:	200002a8 	.word	0x200002a8
		} else {
			cont = cont + 1;
 8001010:	4b57      	ldr	r3, [pc, #348]	; (8001170 <KeyPad_Read+0x428>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a56      	ldr	r2, [pc, #344]	; (8001170 <KeyPad_Read+0x428>)
 8001018:	6013      	str	r3, [r2, #0]
		}

		if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))) {
 800101a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101e:	4855      	ldr	r0, [pc, #340]	; (8001174 <KeyPad_Read+0x42c>)
 8001020:	f001 ff92 	bl	8002f48 <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10b      	bne.n	8001042 <KeyPad_Read+0x2fa>
			if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 800102a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800102e:	4851      	ldr	r0, [pc, #324]	; (8001174 <KeyPad_Read+0x42c>)
 8001030:	f001 ff8a 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8001034:	4b50      	ldr	r3, [pc, #320]	; (8001178 <KeyPad_Read+0x430>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]
			Char = 'C';
 800103a:	4b50      	ldr	r3, [pc, #320]	; (800117c <KeyPad_Read+0x434>)
 800103c:	2243      	movs	r2, #67	; 0x43
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e004      	b.n	800104c <KeyPad_Read+0x304>
		} else {

			cont = cont + 1;
 8001042:	4b4b      	ldr	r3, [pc, #300]	; (8001170 <KeyPad_Read+0x428>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	4a49      	ldr	r2, [pc, #292]	; (8001170 <KeyPad_Read+0x428>)
 800104a:	6013      	str	r3, [r2, #0]
		}

		//--------------------------------------------------------------
		HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f001 ff8f 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f001 ff88 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F3_GPIO_Port, F3_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106e:	4841      	ldr	r0, [pc, #260]	; (8001174 <KeyPad_Read+0x42c>)
 8001070:	f001 ff82 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F4_GPIO_Port, F4_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107a:	483e      	ldr	r0, [pc, #248]	; (8001174 <KeyPad_Read+0x42c>)
 800107c:	f001 ff7c 	bl	8002f78 <HAL_GPIO_WritePin>

		if (!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))) {
 8001080:	2104      	movs	r1, #4
 8001082:	483c      	ldr	r0, [pc, #240]	; (8001174 <KeyPad_Read+0x42c>)
 8001084:	f001 ff60 	bl	8002f48 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10a      	bne.n	80010a4 <KeyPad_Read+0x35c>
			if (!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 800108e:	2104      	movs	r1, #4
 8001090:	4838      	ldr	r0, [pc, #224]	; (8001174 <KeyPad_Read+0x42c>)
 8001092:	f001 ff59 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <KeyPad_Read+0x430>)
 8001098:	2201      	movs	r2, #1
 800109a:	601a      	str	r2, [r3, #0]
			Char = 'E';
 800109c:	4b37      	ldr	r3, [pc, #220]	; (800117c <KeyPad_Read+0x434>)
 800109e:	2245      	movs	r2, #69	; 0x45
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	e004      	b.n	80010ae <KeyPad_Read+0x366>
		} else {
			cont = cont + 1;
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <KeyPad_Read+0x428>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	4a31      	ldr	r2, [pc, #196]	; (8001170 <KeyPad_Read+0x428>)
 80010ac:	6013      	str	r3, [r2, #0]
		}

		if (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))) {
 80010ae:	2102      	movs	r1, #2
 80010b0:	4830      	ldr	r0, [pc, #192]	; (8001174 <KeyPad_Read+0x42c>)
 80010b2:	f001 ff49 	bl	8002f48 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10a      	bne.n	80010d2 <KeyPad_Read+0x38a>
			if (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 80010bc:	2102      	movs	r1, #2
 80010be:	482d      	ldr	r0, [pc, #180]	; (8001174 <KeyPad_Read+0x42c>)
 80010c0:	f001 ff42 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <KeyPad_Read+0x430>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
			Char = '0';
 80010ca:	4b2c      	ldr	r3, [pc, #176]	; (800117c <KeyPad_Read+0x434>)
 80010cc:	2230      	movs	r2, #48	; 0x30
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e004      	b.n	80010dc <KeyPad_Read+0x394>
		} else {
			cont = cont + 1;
 80010d2:	4b27      	ldr	r3, [pc, #156]	; (8001170 <KeyPad_Read+0x428>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4a25      	ldr	r2, [pc, #148]	; (8001170 <KeyPad_Read+0x428>)
 80010da:	6013      	str	r3, [r2, #0]
		}

		if (!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))) {
 80010dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e0:	4824      	ldr	r0, [pc, #144]	; (8001174 <KeyPad_Read+0x42c>)
 80010e2:	f001 ff31 	bl	8002f48 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10b      	bne.n	8001104 <KeyPad_Read+0x3bc>
			if (!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 80010ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f0:	4820      	ldr	r0, [pc, #128]	; (8001174 <KeyPad_Read+0x42c>)
 80010f2:	f001 ff29 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <KeyPad_Read+0x430>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
			Char = 'H';
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <KeyPad_Read+0x434>)
 80010fe:	2248      	movs	r2, #72	; 0x48
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	e004      	b.n	800110e <KeyPad_Read+0x3c6>
		} else {
			cont = cont + 1;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <KeyPad_Read+0x428>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <KeyPad_Read+0x428>)
 800110c:	6013      	str	r3, [r2, #0]
		}

		if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))) {
 800110e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001112:	4818      	ldr	r0, [pc, #96]	; (8001174 <KeyPad_Read+0x42c>)
 8001114:	f001 ff18 	bl	8002f48 <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10b      	bne.n	8001136 <KeyPad_Read+0x3ee>
			if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 800111e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001122:	4814      	ldr	r0, [pc, #80]	; (8001174 <KeyPad_Read+0x42c>)
 8001124:	f001 ff10 	bl	8002f48 <HAL_GPIO_ReadPin>
				;
			Confirmar_lectura = 1;
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <KeyPad_Read+0x430>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]
			Char = 'D';
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <KeyPad_Read+0x434>)
 8001130:	2244      	movs	r2, #68	; 0x44
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e004      	b.n	8001140 <KeyPad_Read+0x3f8>
		} else {
			cont = cont + 1;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <KeyPad_Read+0x428>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <KeyPad_Read+0x428>)
 800113e:	6013      	str	r3, [r2, #0]
		}
		if (cont == 16) {
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <KeyPad_Read+0x428>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b10      	cmp	r3, #16
 8001146:	d10c      	bne.n	8001162 <KeyPad_Read+0x41a>
			cont = 0;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <KeyPad_Read+0x428>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
			if (Confirmar_lectura == 1) {
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <KeyPad_Read+0x430>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d108      	bne.n	8001168 <KeyPad_Read+0x420>
				Confirmar_lectura = 0;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <KeyPad_Read+0x430>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
				return Char;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <KeyPad_Read+0x434>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	e003      	b.n	800116a <KeyPad_Read+0x422>
			}
		} else {
			cont = 0;
 8001162:	4b03      	ldr	r3, [pc, #12]	; (8001170 <KeyPad_Read+0x428>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
		}
	}

	return 'G';
 8001168:	2347      	movs	r3, #71	; 0x47
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200002a8 	.word	0x200002a8
 8001174:	48000400 	.word	0x48000400
 8001178:	20000294 	.word	0x20000294
 800117c:	200002a4 	.word	0x200002a4

08001180 <LECTURA_BTN>:
uint8_t ContraCifrada[5] = "====";
uint8_t Contra[5] = "0000";
static uint32_t Estados = 2;
void LECTURA_BTN(void)

{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

	static uint32_t VARIABLE_COMPROBAR_CLICK = 0; // VARIABLE PARA IMPLEMENTAR MAQUINA DE ESTADOS CON EL BOTON
	// LECTURA DEL PIN DEL BOTON LOGICA INVERSA
	uint32_t LECTURA_PUERTO_BOTON = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin); // LEEMOS TODO EL PUERTO C QUE ES EL DEL BOTON
 8001186:	2120      	movs	r1, #32
 8001188:	480e      	ldr	r0, [pc, #56]	; (80011c4 <LECTURA_BTN+0x44>)
 800118a:	f001 fedd 	bl	8002f48 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	607b      	str	r3, [r7, #4]

	// EVALUAMOS CONDICIONES
	if (LECTURA_PUERTO_BOTON != 0) {
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00a      	beq.n	80011ae <LECTURA_BTN+0x2e>

		// EVALUO SI YA HABIA SIDO PRESIONADO
		if (VARIABLE_COMPROBAR_CLICK == 1) {
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <LECTURA_BTN+0x48>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d10d      	bne.n	80011bc <LECTURA_BTN+0x3c>
			// SI FUE PRESIONADO PONGO LA VARIABLE DE ESTADO EN CERO PARA INDICAR QUE YA SE EJECUTO LA ACCION DESEADA
			VARIABLE_COMPROBAR_CLICK = 0;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <LECTURA_BTN+0x48>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
			DETECTAR_CLICK = 1; // REVISO EL TIEMPO ACTUAL PARA COMPARAR DESDE EL TIEMPO EN QUE SE PRESIONO
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <LECTURA_BTN+0x4c>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
		}
		//LL_GPIO_SetOutputPin(LED2_GPIO_PORT, LED2_PIN);

	}

}
 80011ac:	e006      	b.n	80011bc <LECTURA_BTN+0x3c>
		if (VARIABLE_COMPROBAR_CLICK == 0) {
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <LECTURA_BTN+0x48>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <LECTURA_BTN+0x3c>
			VARIABLE_COMPROBAR_CLICK = 1; // CAMBIO EL VALOR DE LA VARIABLE DE ESTADO A UNO PARA INDICAR QUE SE PRESIONO
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <LECTURA_BTN+0x48>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	48000800 	.word	0x48000800
 80011c8:	200002ac 	.word	0x200002ac
 80011cc:	20000298 	.word	0x20000298

080011d0 <LECTURA_BTN2>:
void LECTURA_BTN2(void)

{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

	static uint32_t VARIABLE_COMPROBAR_CLICK = 0; // VARIABLE PARA IMPLEMENTAR MAQUINA DE ESTADOS CON EL BOTON
	// LECTURA DEL PIN DEL BOTON LOGICA INVERSA
	uint32_t LECTURA_PUERTO_BOTON = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin); // LEEMOS TODO EL PUERTO C QUE ES EL DEL BOTON
 80011d6:	2110      	movs	r1, #16
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f001 feb4 	bl	8002f48 <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	607b      	str	r3, [r7, #4]

	// EVALUAMOS CONDICIONES
	if (LECTURA_PUERTO_BOTON != 0) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00a      	beq.n	8001200 <LECTURA_BTN2+0x30>

		// EVALUO SI YA HABIA SIDO PRESIONADO
		if (VARIABLE_COMPROBAR_CLICK == 1) {
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <LECTURA_BTN2+0x48>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d10d      	bne.n	800120e <LECTURA_BTN2+0x3e>
			// SI FUE PRESIONADO PONGO LA VARIABLE DE ESTADO EN CERO PARA INDICAR QUE YA SE EJECUTO LA ACCION DESEADA
			VARIABLE_COMPROBAR_CLICK = 0;
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <LECTURA_BTN2+0x48>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
			DETECTAR_CLICK2 = 1; // REVISO EL TIEMPO ACTUAL PARA COMPARAR DESDE EL TIEMPO EN QUE SE PRESIONO
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <LECTURA_BTN2+0x4c>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
		}
		//LL_GPIO_SetOutputPin(LED2_GPIO_PORT, LED2_PIN);

	}

}
 80011fe:	e006      	b.n	800120e <LECTURA_BTN2+0x3e>
		if (VARIABLE_COMPROBAR_CLICK == 0) {
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <LECTURA_BTN2+0x48>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <LECTURA_BTN2+0x3e>
			VARIABLE_COMPROBAR_CLICK = 1; // CAMBIO EL VALOR DE LA VARIABLE DE ESTADO A UNO PARA INDICAR QUE SE PRESIONO
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <LECTURA_BTN2+0x48>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200002b0 	.word	0x200002b0
 800121c:	2000029c 	.word	0x2000029c

08001220 <Write_D4_FSM>:
void Write_D4_FSM(uint32_t current_tick, uint32_t wait, uint8_t *Msg) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
	static uint32_t last_tick = 0;
	static uint32_t state = 0, next_state = 0;

	static uint8_t i = 0;

	if (current_tick - last_tick > wait) {
 800122c:	4b33      	ldr	r3, [pc, #204]	; (80012fc <Write_D4_FSM+0xdc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	429a      	cmp	r2, r3
 8001238:	d25c      	bcs.n	80012f4 <Write_D4_FSM+0xd4>
		if (state == 0) {
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <Write_D4_FSM+0xe0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d111      	bne.n	8001266 <Write_D4_FSM+0x46>
			Write_ASCII_D4((Msg[i] - 0x30), 4, seven_seg_digits_decode_abcdefg);
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <Write_D4_FSM+0xe4>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	3b30      	subs	r3, #48	; 0x30
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4a2d      	ldr	r2, [pc, #180]	; (8001308 <Write_D4_FSM+0xe8>)
 8001254:	2104      	movs	r1, #4
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f85a 	bl	8001310 <Write_ASCII_D4>
			next_state = state + 1;
 800125c:	4b28      	ldr	r3, [pc, #160]	; (8001300 <Write_D4_FSM+0xe0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a2a      	ldr	r2, [pc, #168]	; (800130c <Write_D4_FSM+0xec>)
 8001264:	6013      	str	r3, [r2, #0]
		}
		if (state == 1) {
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <Write_D4_FSM+0xe0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d111      	bne.n	8001292 <Write_D4_FSM+0x72>
			Write_ASCII_D4((Msg[i + 1] - 0x30), 3,
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <Write_D4_FSM+0xe4>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3b30      	subs	r3, #48	; 0x30
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4a22      	ldr	r2, [pc, #136]	; (8001308 <Write_D4_FSM+0xe8>)
 8001280:	2103      	movs	r1, #3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f844 	bl	8001310 <Write_ASCII_D4>
					seven_seg_digits_decode_abcdefg);
			next_state = state + 1;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <Write_D4_FSM+0xe0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <Write_D4_FSM+0xec>)
 8001290:	6013      	str	r3, [r2, #0]
		}
		if (state == 2) {
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <Write_D4_FSM+0xe0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d111      	bne.n	80012be <Write_D4_FSM+0x9e>
			Write_ASCII_D4(Msg[i + 2] - 0x30, 2,
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <Write_D4_FSM+0xe4>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	3302      	adds	r3, #2
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3b30      	subs	r3, #48	; 0x30
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <Write_D4_FSM+0xe8>)
 80012ac:	2102      	movs	r1, #2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f82e 	bl	8001310 <Write_ASCII_D4>
					seven_seg_digits_decode_abcdefg);
			next_state = state + 1;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <Write_D4_FSM+0xe0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <Write_D4_FSM+0xec>)
 80012bc:	6013      	str	r3, [r2, #0]
		}
		if (state == 3) {
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <Write_D4_FSM+0xe0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d10f      	bne.n	80012e6 <Write_D4_FSM+0xc6>
			Write_ASCII_D4(Msg[i + 3] - 0x30, 1,
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <Write_D4_FSM+0xe4>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	3303      	adds	r3, #3
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	3b30      	subs	r3, #48	; 0x30
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <Write_D4_FSM+0xe8>)
 80012d8:	2101      	movs	r1, #1
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f818 	bl	8001310 <Write_ASCII_D4>
					seven_seg_digits_decode_abcdefg);
			next_state = 0;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <Write_D4_FSM+0xec>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
		}
		state = next_state;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <Write_D4_FSM+0xec>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <Write_D4_FSM+0xe0>)
 80012ec:	6013      	str	r3, [r2, #0]
		last_tick = current_tick;
 80012ee:	4a03      	ldr	r2, [pc, #12]	; (80012fc <Write_D4_FSM+0xdc>)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6013      	str	r3, [r2, #0]
	}
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200002b4 	.word	0x200002b4
 8001300:	200002b8 	.word	0x200002b8
 8001304:	200002bc 	.word	0x200002bc
 8001308:	08009ac4 	.word	0x08009ac4
 800130c:	200002c0 	.word	0x200002c0

08001310 <Write_ASCII_D4>:

void Write_ASCII_D4(uint8_t letter, uint8_t Digit, const uint8_t *Data) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	603a      	str	r2, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	460b      	mov	r3, r1
 800131e:	71bb      	strb	r3, [r7, #6]
	//	static uint8_t letter = 0;

	//	if (  current_tick - last_tick > wait){

	//  LCLK (PB5) -
	HAL_GPIO_WritePin(LCLK_GPIO_Port, LCLK_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	2120      	movs	r1, #32
 8001324:	4840      	ldr	r0, [pc, #256]	; (8001428 <Write_ASCII_D4+0x118>)
 8001326:	f001 fe27 	bl	8002f78 <HAL_GPIO_WritePin>

	// SCLK (PA8) - 16 clock cycles
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f001 fe20 	bl	8002f78 <HAL_GPIO_WritePin>
	// Dot is set to turn it off
	HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f001 fe19 	bl	8002f78 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(SCLK_GPIO_Port, SCLK_Pin);
 8001346:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134e:	f001 fe2b 	bl	8002fa8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(SCLK_GPIO_Port, SCLK_Pin);
 8001352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f001 fe25 	bl	8002fa8 <HAL_GPIO_TogglePin>
	for (int i = 0; i < 7; i++) {
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	e024      	b.n	80013ae <Write_ASCII_D4+0x9e>
		// SDI (PA9) - set
		HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, ~(Data[letter] >> i) & (1));
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	4413      	add	r3, r2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	fa42 f303 	asr.w	r3, r2, r3
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	bf0c      	ite	eq
 800137c:	2301      	moveq	r3, #1
 800137e:	2300      	movne	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	461a      	mov	r2, r3
 8001384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138c:	f001 fdf4 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(SCLK_GPIO_Port, SCLK_Pin);
 8001390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001398:	f001 fe06 	bl	8002fa8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(SCLK_GPIO_Port, SCLK_Pin);
 800139c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f001 fe00 	bl	8002fa8 <HAL_GPIO_TogglePin>
	for (int i = 0; i < 7; i++) {
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b06      	cmp	r3, #6
 80013b2:	ddd7      	ble.n	8001364 <Write_ASCII_D4+0x54>
	}

	// All the displays are enable
	HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013be:	f001 fddb 	bl	8002f78 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	e022      	b.n	800140e <Write_ASCII_D4+0xfe>
		if (i == Digit + 3) {
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	3303      	adds	r3, #3
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d107      	bne.n	80013e2 <Write_ASCII_D4+0xd2>
			HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013dc:	f001 fdcc 	bl	8002f78 <HAL_GPIO_WritePin>
 80013e0:	e006      	b.n	80013f0 <Write_ASCII_D4+0xe0>
		} else {
			HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ec:	f001 fdc4 	bl	8002f78 <HAL_GPIO_WritePin>
		}
		HAL_GPIO_TogglePin(SCLK_GPIO_Port, SCLK_Pin);
 80013f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f001 fdd6 	bl	8002fa8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(SCLK_GPIO_Port, SCLK_Pin);
 80013fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001404:	f001 fdd0 	bl	8002fa8 <HAL_GPIO_TogglePin>
	for (int i = 0; i < 8; i++) {
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	3301      	adds	r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b07      	cmp	r3, #7
 8001412:	ddd9      	ble.n	80013c8 <Write_ASCII_D4+0xb8>
	};
	//  LCLK (PB5) -
	HAL_GPIO_WritePin(LCLK_GPIO_Port, LCLK_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	2120      	movs	r1, #32
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <Write_ASCII_D4+0x118>)
 800141a:	f001 fdad 	bl	8002f78 <HAL_GPIO_WritePin>
	//		letter++;
	//		if (letter > 74)
	//			letter = 0;
	//		last_tick = current_tick;
	//	}
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	48000400 	.word	0x48000400
 800142c:	00000000 	.word	0x00000000

08001430 <servo>:

void servo(uint8_t angul0)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]

uint16_t period = (1.0/90*angul0 + 0.5)*1000;
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f869 	bl	8000514 <__aeabi_i2d>
 8001442:	a333      	add	r3, pc, #204	; (adr r3, 8001510 <servo+0xe0>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f8ce 	bl	80005e8 <__aeabi_dmul>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <servo+0xd0>)
 800145a:	f7fe ff0f 	bl	800027c <__adddf3>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <servo+0xd4>)
 800146c:	f7ff f8bc 	bl	80005e8 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fac8 	bl	8000a0c <__aeabi_d2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	817b      	strh	r3, [r7, #10]

htim4.Init.Prescaler = 32;
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <servo+0xd8>)
 8001482:	2220      	movs	r2, #32
 8001484:	605a      	str	r2, [r3, #4]
HAL_TIM_Base_Init(&htim4);
 8001486:	4820      	ldr	r0, [pc, #128]	; (8001508 <servo+0xd8>)
 8001488:	f003 fce2 	bl	8004e50 <HAL_TIM_Base_Init>

for (int i = 0; i < 30; ++i) {
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	e02e      	b.n	80014f0 <servo+0xc0>

__HAL_TIM_SET_COUNTER(&htim4,0);
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <servo+0xd8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
HAL_TIM_Base_Start(&htim4);
 800149a:	481b      	ldr	r0, [pc, #108]	; (8001508 <servo+0xd8>)
 800149c:	f003 fd30 	bl	8004f00 <HAL_TIM_Base_Start>
HAL_GPIO_WritePin(SM_GPIO_Port, SM_Pin, GPIO_PIN_SET); // Pin Motor
 80014a0:	2201      	movs	r2, #1
 80014a2:	2104      	movs	r1, #4
 80014a4:	4819      	ldr	r0, [pc, #100]	; (800150c <servo+0xdc>)
 80014a6:	f001 fd67 	bl	8002f78 <HAL_GPIO_WritePin>

while(__HAL_TIM_GET_COUNTER(&htim4) < period);
 80014aa:	bf00      	nop
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <servo+0xd8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b2:	897b      	ldrh	r3, [r7, #10]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d3f9      	bcc.n	80014ac <servo+0x7c>
HAL_GPIO_WritePin(SM_GPIO_Port, SM_Pin, GPIO_PIN_RESET); // Pin Motor
 80014b8:	2200      	movs	r2, #0
 80014ba:	2104      	movs	r1, #4
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <servo+0xdc>)
 80014be:	f001 fd5b 	bl	8002f78 <HAL_GPIO_WritePin>

HAL_TIM_Base_Stop(&htim4);
 80014c2:	4811      	ldr	r0, [pc, #68]	; (8001508 <servo+0xd8>)
 80014c4:	f003 fd84 	bl	8004fd0 <HAL_TIM_Base_Stop>
__HAL_TIM_SET_COUNTER(&htim4,0);
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <servo+0xd8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
HAL_TIM_Base_Start(&htim4);
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <servo+0xd8>)
 80014d2:	f003 fd15 	bl	8004f00 <HAL_TIM_Base_Start>

while(__HAL_TIM_GET_COUNTER(&htim4) < 20000-period);
 80014d6:	bf00      	nop
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <servo+0xd8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014de:	897b      	ldrh	r3, [r7, #10]
 80014e0:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 80014e4:	3320      	adds	r3, #32
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3f6      	bcc.n	80014d8 <servo+0xa8>
for (int i = 0; i < 30; ++i) {
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3301      	adds	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b1d      	cmp	r3, #29
 80014f4:	ddcd      	ble.n	8001492 <servo+0x62>
}

}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	3fe00000 	.word	0x3fe00000
 8001504:	408f4000 	.word	0x408f4000
 8001508:	200001a0 	.word	0x200001a0
 800150c:	48000800 	.word	0x48000800
 8001510:	16c16c17 	.word	0x16c16c17
 8001514:	3f86c16c 	.word	0x3f86c16c

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b083      	sub	sp, #12
 800151c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151e:	f001 f9b7 	bl	8002890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001522:	f000 faad 	bl	8001a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001526:	f000 fc85 	bl	8001e34 <MX_GPIO_Init>
  MX_I2C1_Init();
 800152a:	f000 fafb 	bl	8001b24 <MX_I2C1_Init>
  MX_TIM1_Init();
 800152e:	f000 fb39 	bl	8001ba4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001532:	f000 fb8b 	bl	8001c4c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001536:	f000 fc4d 	bl	8001dd4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800153a:	f000 fbfd 	bl	8001d38 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	SSD1306_Clear();
 800153e:	f000 ff04 	bl	800234a <SSD1306_Clear>
	HAL_TIM_Base_Start(&htim1);
 8001542:	48a9      	ldr	r0, [pc, #676]	; (80017e8 <main+0x2d0>)
 8001544:	f003 fcdc 	bl	8004f00 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2140      	movs	r1, #64	; 0x40
 800154c:	48a7      	ldr	r0, [pc, #668]	; (80017ec <main+0x2d4>)
 800154e:	f001 fd13 	bl	8002f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	2140      	movs	r1, #64	; 0x40
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f001 fd0d 	bl	8002f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001566:	f001 fd07 	bl	8002f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB_GPIO_Port, MB_Pin, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2108      	movs	r1, #8
 800156e:	48a0      	ldr	r0, [pc, #640]	; (80017f0 <main+0x2d8>)
 8001570:	f001 fd02 	bl	8002f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157a:	489d      	ldr	r0, [pc, #628]	; (80017f0 <main+0x2d8>)
 800157c:	f001 fcfc 	bl	8002f78 <HAL_GPIO_WritePin>
	SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 8001580:	2301      	movs	r3, #1
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	4a9a      	ldr	r2, [pc, #616]	; (80017f4 <main+0x2dc>)
 800158c:	2100      	movs	r1, #0
 800158e:	2000      	movs	r0, #0
 8001590:	f000 fd11 	bl	8001fb6 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8001594:	f000 fd78 	bl	8002088 <SSD1306_UpdateScreen>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001598:	2104      	movs	r1, #4
 800159a:	4897      	ldr	r0, [pc, #604]	; (80017f8 <main+0x2e0>)
 800159c:	f003 fda0 	bl	80050e0 <HAL_TIM_PWM_Start>
	HAL_Delay(2000);
 80015a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015a4:	f001 f9f0 	bl	8002988 <HAL_Delay>
	SSD1306_Clear();
 80015a8:	f000 fecf 	bl	800234a <SSD1306_Clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(pin_ledport, pin_led, SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2102      	movs	r1, #2
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b4:	f001 fce0 	bl	8002f78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015be:	488c      	ldr	r0, [pc, #560]	; (80017f0 <main+0x2d8>)
 80015c0:	f001 fcda 	bl	8002f78 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80015c4:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <main+0x2d0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER (&htim1) < 10)
 80015cc:	bf00      	nop
 80015ce:	4b86      	ldr	r3, [pc, #536]	; (80017e8 <main+0x2d0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	2b09      	cmp	r3, #9
 80015d6:	d9fa      	bls.n	80015ce <main+0xb6>
			;  // wait for 10 us
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015de:	4884      	ldr	r0, [pc, #528]	; (80017f0 <main+0x2d8>)
 80015e0:	f001 fcca 	bl	8002f78 <HAL_GPIO_WritePin>

		pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80015e4:	f001 f9c4 	bl	8002970 <HAL_GetTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a84      	ldr	r2, [pc, #528]	; (80017fc <main+0x2e4>)
 80015ec:	6013      	str	r3, [r2, #0]
		// wait for the echo pin to go high
		while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))
 80015ee:	bf00      	nop
 80015f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f4:	487e      	ldr	r0, [pc, #504]	; (80017f0 <main+0x2d8>)
 80015f6:	f001 fca7 	bl	8002f48 <HAL_GPIO_ReadPin>
 80015fa:	4603      	mov	r3, r0
				&& pMillis + 10 > HAL_GetTick())
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d108      	bne.n	8001612 <main+0xfa>
 8001600:	4b7e      	ldr	r3, [pc, #504]	; (80017fc <main+0x2e4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f103 040a 	add.w	r4, r3, #10
 8001608:	f001 f9b2 	bl	8002970 <HAL_GetTick>
 800160c:	4603      	mov	r3, r0
 800160e:	429c      	cmp	r4, r3
 8001610:	d8ee      	bhi.n	80015f0 <main+0xd8>
			;
		Value1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001612:	4b75      	ldr	r3, [pc, #468]	; (80017e8 <main+0x2d0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	4a79      	ldr	r2, [pc, #484]	; (8001800 <main+0x2e8>)
 800161a:	6013      	str	r3, [r2, #0]

		pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800161c:	f001 f9a8 	bl	8002970 <HAL_GetTick>
 8001620:	4603      	mov	r3, r0
 8001622:	4a76      	ldr	r2, [pc, #472]	; (80017fc <main+0x2e4>)
 8001624:	6013      	str	r3, [r2, #0]
		// wait for the echo pin to go low
		while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))
 8001626:	bf00      	nop
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	4870      	ldr	r0, [pc, #448]	; (80017f0 <main+0x2d8>)
 800162e:	f001 fc8b 	bl	8002f48 <HAL_GPIO_ReadPin>
 8001632:	4603      	mov	r3, r0
				&& pMillis + 50 > HAL_GetTick())
 8001634:	2b00      	cmp	r3, #0
 8001636:	d008      	beq.n	800164a <main+0x132>
 8001638:	4b70      	ldr	r3, [pc, #448]	; (80017fc <main+0x2e4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001640:	f001 f996 	bl	8002970 <HAL_GetTick>
 8001644:	4603      	mov	r3, r0
 8001646:	429c      	cmp	r4, r3
 8001648:	d8ee      	bhi.n	8001628 <main+0x110>
			;
		Value2 = __HAL_TIM_GET_COUNTER(&htim1);
 800164a:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <main+0x2d0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	4a6c      	ldr	r2, [pc, #432]	; (8001804 <main+0x2ec>)
 8001652:	6013      	str	r3, [r2, #0]

		Distance = (Value2 - Value1) * 0.034 / 2;
 8001654:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <main+0x2ec>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b69      	ldr	r3, [pc, #420]	; (8001800 <main+0x2e8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff48 	bl	80004f4 <__aeabi_ui2d>
 8001664:	a35e      	add	r3, pc, #376	; (adr r3, 80017e0 <main+0x2c8>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7fe ffbd 	bl	80005e8 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800167e:	f7ff f8dd 	bl	800083c <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff f9bf 	bl	8000a0c <__aeabi_d2uiz>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b5d      	ldr	r3, [pc, #372]	; (8001808 <main+0x2f0>)
 8001694:	801a      	strh	r2, [r3, #0]

//		    float distanciaLleno = distanciaVacio - Distance;
//		    float cantidadLiquido = distanciaLleno * 100 / distancia100;
//		    int porcentaje = (int) (distanciaLleno * 100 / distanciaVacio);

		SSD1306_GotoXY(0, 0);
 8001696:	2100      	movs	r1, #0
 8001698:	2000      	movs	r0, #0
 800169a:	f000 fd9b 	bl	80021d4 <SSD1306_GotoXY>
		SSD1306_Puts("Dist: (Cm)", &Font_11x18, 1);
 800169e:	2201      	movs	r2, #1
 80016a0:	495a      	ldr	r1, [pc, #360]	; (800180c <main+0x2f4>)
 80016a2:	485b      	ldr	r0, [pc, #364]	; (8001810 <main+0x2f8>)
 80016a4:	f000 fe2c 	bl	8002300 <SSD1306_Puts>
		sprintf(strCopy, "%d    ", Distance);
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <main+0x2f0>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4959      	ldr	r1, [pc, #356]	; (8001814 <main+0x2fc>)
 80016b0:	4859      	ldr	r0, [pc, #356]	; (8001818 <main+0x300>)
 80016b2:	f005 fad7 	bl	8006c64 <siprintf>
		SSD1306_GotoXY(0, 30);
 80016b6:	211e      	movs	r1, #30
 80016b8:	2000      	movs	r0, #0
 80016ba:	f000 fd8b 	bl	80021d4 <SSD1306_GotoXY>
		SSD1306_Puts(strCopy, &Font_16x26, 1);
 80016be:	2201      	movs	r2, #1
 80016c0:	4956      	ldr	r1, [pc, #344]	; (800181c <main+0x304>)
 80016c2:	4855      	ldr	r0, [pc, #340]	; (8001818 <main+0x300>)
 80016c4:	f000 fe1c 	bl	8002300 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80016c8:	f000 fcde 	bl	8002088 <SSD1306_UpdateScreen>
		HAL_Delay(50);
 80016cc:	2032      	movs	r0, #50	; 0x32
 80016ce:	f001 f95b 	bl	8002988 <HAL_Delay>

		if (Distance > 10) {
 80016d2:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <main+0x2f0>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	2b0a      	cmp	r3, #10
 80016d8:	d902      	bls.n	80016e0 <main+0x1c8>
				DETECTAR_LIM = 1;
 80016da:	4b51      	ldr	r3, [pc, #324]	; (8001820 <main+0x308>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]
			}
		if (Distance  <4) {
 80016e0:	4b49      	ldr	r3, [pc, #292]	; (8001808 <main+0x2f0>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d802      	bhi.n	80016ee <main+0x1d6>
			DETECTAR_LIM = 0;
 80016e8:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <main+0x308>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
		}
		if (DETECTAR_LIM == 1) {
 80016ee:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <main+0x308>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d105      	bne.n	8001702 <main+0x1ea>

			HAL_GPIO_WritePin(MB_GPIO_Port, MB_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2108      	movs	r1, #8
 80016fa:	483d      	ldr	r0, [pc, #244]	; (80017f0 <main+0x2d8>)
 80016fc:	f001 fc3c 	bl	8002f78 <HAL_GPIO_WritePin>
 8001700:	e004      	b.n	800170c <main+0x1f4>

		} else {
			HAL_GPIO_WritePin(MB_GPIO_Port, MB_Pin, GPIO_PIN_SET);
 8001702:	2201      	movs	r2, #1
 8001704:	2108      	movs	r1, #8
 8001706:	483a      	ldr	r0, [pc, #232]	; (80017f0 <main+0x2d8>)
 8001708:	f001 fc36 	bl	8002f78 <HAL_GPIO_WritePin>
		}



//		LEYENDO LA CONTRASEÑA
		current_tick = HAL_GetTick();
 800170c:	f001 f930 	bl	8002970 <HAL_GetTick>
 8001710:	4603      	mov	r3, r0
 8001712:	4a44      	ldr	r2, [pc, #272]	; (8001824 <main+0x30c>)
 8001714:	6013      	str	r3, [r2, #0]

			if (current_tick - last_tick >= 250) {
 8001716:	4b43      	ldr	r3, [pc, #268]	; (8001824 <main+0x30c>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b43      	ldr	r3, [pc, #268]	; (8001828 <main+0x310>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2bf9      	cmp	r3, #249	; 0xf9
 8001722:	d908      	bls.n	8001736 <main+0x21e>
				last_tick = current_tick;
 8001724:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <main+0x30c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a3f      	ldr	r2, [pc, #252]	; (8001828 <main+0x310>)
 800172a:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800172c:	2120      	movs	r1, #32
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f001 fc39 	bl	8002fa8 <HAL_GPIO_TogglePin>
			}

			current_tick = HAL_GetTick();	//LEEMOS EL TIEMPOR ACTUAL
 8001736:	f001 f91b 	bl	8002970 <HAL_GetTick>
 800173a:	4603      	mov	r3, r0
 800173c:	4a39      	ldr	r2, [pc, #228]	; (8001824 <main+0x30c>)
 800173e:	6013      	str	r3, [r2, #0]

			if (Estados == 2) {
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <main+0x314>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b02      	cmp	r3, #2
 8001746:	f040 80b6 	bne.w	80018b6 <main+0x39e>
				// ESTADO DONDE LEEMOS LA CONTRASEÑA
				keychar = KeyPad_Read(); /// LEEMOS LA SECUENCIA DE LOS DATOS
 800174a:	f7ff fafd 	bl	8000d48 <KeyPad_Read>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <main+0x318>)
 8001754:	701a      	strb	r2, [r3, #0]
				if (keychar != 'G') {
 8001756:	4b36      	ldr	r3, [pc, #216]	; (8001830 <main+0x318>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b47      	cmp	r3, #71	; 0x47
 800175c:	f000 80a4 	beq.w	80018a8 <main+0x390>
					msg[i] = keychar;
 8001760:	4b34      	ldr	r3, [pc, #208]	; (8001834 <main+0x31c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b32      	ldr	r3, [pc, #200]	; (8001830 <main+0x318>)
 8001768:	7819      	ldrb	r1, [r3, #0]
 800176a:	4b33      	ldr	r3, [pc, #204]	; (8001838 <main+0x320>)
 800176c:	5499      	strb	r1, [r3, r2]
					i++;
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <main+0x31c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <main+0x31c>)
 8001778:	701a      	strb	r2, [r3, #0]
					Write_D4_FSM(current_tick, 1, msg);
 800177a:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <main+0x30c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a2e      	ldr	r2, [pc, #184]	; (8001838 <main+0x320>)
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fd4c 	bl	8001220 <Write_D4_FSM>
					if (i > 3) {
 8001788:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <main+0x31c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b03      	cmp	r3, #3
 800178e:	f240 808b 	bls.w	80018a8 <main+0x390>

						i = 0;
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <main+0x31c>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]

						if (!strncmp(msg, Contra, 4)) {
 8001798:	2204      	movs	r2, #4
 800179a:	4928      	ldr	r1, [pc, #160]	; (800183c <main+0x324>)
 800179c:	4826      	ldr	r0, [pc, #152]	; (8001838 <main+0x320>)
 800179e:	f005 fa89 	bl	8006cb4 <strncmp>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d14f      	bne.n	8001848 <main+0x330>
							HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2140      	movs	r1, #64	; 0x40
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f001 fbe2 	bl	8002f78 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f001 fbdc 	bl	8002f78 <HAL_GPIO_WritePin>
							tick = 0;
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <main+0x328>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
							intentos = 1; // REINICIAMOS EL TIEMPO DE ESPERA AL MINIMO.
 80017c6:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <main+0x32c>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
							Estados = 4; // VAMOS AL ESTADO DE ABIERTO, EN EL CUAL PROCEDEMOS A LEER EL BOTON 2 PARA CERRAR LA CAJA.
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <main+0x314>)
 80017ce:	2204      	movs	r2, #4
 80017d0:	601a      	str	r2, [r3, #0]
							servo(180);
 80017d2:	20b4      	movs	r0, #180	; 0xb4
 80017d4:	f7ff fe2c 	bl	8001430 <servo>
 80017d8:	e062      	b.n	80018a0 <main+0x388>
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	b020c49c 	.word	0xb020c49c
 80017e4:	3fa16872 	.word	0x3fa16872
 80017e8:	20000108 	.word	0x20000108
 80017ec:	48000400 	.word	0x48000400
 80017f0:	48000800 	.word	0x48000800
 80017f4:	080096c4 	.word	0x080096c4
 80017f8:	20000154 	.word	0x20000154
 80017fc:	20000270 	.word	0x20000270
 8001800:	20000274 	.word	0x20000274
 8001804:	20000278 	.word	0x20000278
 8001808:	2000027c 	.word	0x2000027c
 800180c:	20000000 	.word	0x20000000
 8001810:	080075f8 	.word	0x080075f8
 8001814:	08007604 	.word	0x08007604
 8001818:	20000284 	.word	0x20000284
 800181c:	20000008 	.word	0x20000008
 8001820:	20000280 	.word	0x20000280
 8001824:	200002c4 	.word	0x200002c4
 8001828:	200002c8 	.word	0x200002c8
 800182c:	20000030 	.word	0x20000030
 8001830:	200002cc 	.word	0x200002cc
 8001834:	200002cd 	.word	0x200002cd
 8001838:	20000010 	.word	0x20000010
 800183c:	20000028 	.word	0x20000028
 8001840:	200002ce 	.word	0x200002ce
 8001844:	20000034 	.word	0x20000034
						} else {
							tick++; // SUMA LOS INTENTOS ERRADOS
 8001848:	4b7b      	ldr	r3, [pc, #492]	; (8001a38 <main+0x520>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b79      	ldr	r3, [pc, #484]	; (8001a38 <main+0x520>)
 8001852:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185c:	f001 fb8c 	bl	8002f78 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8001860:	2201      	movs	r2, #1
 8001862:	2140      	movs	r1, #64	; 0x40
 8001864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001868:	f001 fb86 	bl	8002f78 <HAL_GPIO_WritePin>
							if (tick == 3) {
 800186c:	4b72      	ldr	r3, [pc, #456]	; (8001a38 <main+0x520>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d115      	bne.n	80018a0 <main+0x388>
								last_tick2 = last_tick;
 8001874:	4b71      	ldr	r3, [pc, #452]	; (8001a3c <main+0x524>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a71      	ldr	r2, [pc, #452]	; (8001a40 <main+0x528>)
 800187a:	6013      	str	r3, [r2, #0]
								tick = 0;
 800187c:	4b6e      	ldr	r3, [pc, #440]	; (8001a38 <main+0x520>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
								HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin,
 8001882:	2200      	movs	r2, #0
 8001884:	2140      	movs	r1, #64	; 0x40
 8001886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188a:	f001 fb75 	bl	8002f78 <HAL_GPIO_WritePin>
										GPIO_PIN_RESET);
								HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin,
 800188e:	2200      	movs	r2, #0
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001896:	f001 fb6f 	bl	8002f78 <HAL_GPIO_WritePin>
										GPIO_PIN_RESET);
								Estados = 3; // ESTADO DE BLOQUEADO
 800189a:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <main+0x52c>)
 800189c:	2203      	movs	r2, #3
 800189e:	601a      	str	r2, [r3, #0]

							}
						}
						strcpy(msg, msg3); //Lo que hay en apellido se copia a nombre;
 80018a0:	4969      	ldr	r1, [pc, #420]	; (8001a48 <main+0x530>)
 80018a2:	486a      	ldr	r0, [pc, #424]	; (8001a4c <main+0x534>)
 80018a4:	f005 fa44 	bl	8006d30 <strcpy>

					}

				}
				Write_D4_FSM(current_tick, 1, msg);
 80018a8:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <main+0x538>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a67      	ldr	r2, [pc, #412]	; (8001a4c <main+0x534>)
 80018ae:	2101      	movs	r1, #1
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fcb5 	bl	8001220 <Write_D4_FSM>

			}

			if (Estados == 1) {
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <main+0x52c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d13d      	bne.n	800193a <main+0x422>

				keychar = KeyPad_Read(); /// LEEMOS LA SECUENCIA DE LOS DATOS
 80018be:	f7ff fa43 	bl	8000d48 <KeyPad_Read>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <main+0x53c>)
 80018c8:	701a      	strb	r2, [r3, #0]
				if (keychar != 'G') {
 80018ca:	4b62      	ldr	r3, [pc, #392]	; (8001a54 <main+0x53c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b47      	cmp	r3, #71	; 0x47
 80018d0:	d02c      	beq.n	800192c <main+0x414>
					Contra[i] = keychar;
 80018d2:	4b61      	ldr	r3, [pc, #388]	; (8001a58 <main+0x540>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <main+0x53c>)
 80018da:	7819      	ldrb	r1, [r3, #0]
 80018dc:	4b5f      	ldr	r3, [pc, #380]	; (8001a5c <main+0x544>)
 80018de:	5499      	strb	r1, [r3, r2]
					ContraCifrada[i] = ']';
 80018e0:	4b5d      	ldr	r3, [pc, #372]	; (8001a58 <main+0x540>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b5e      	ldr	r3, [pc, #376]	; (8001a60 <main+0x548>)
 80018e8:	215d      	movs	r1, #93	; 0x5d
 80018ea:	5499      	strb	r1, [r3, r2]
					i++;
 80018ec:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <main+0x540>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <main+0x540>)
 80018f6:	701a      	strb	r2, [r3, #0]
					Write_D4_FSM(current_tick, 1, ContraCifrada);
 80018f8:	4b55      	ldr	r3, [pc, #340]	; (8001a50 <main+0x538>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a58      	ldr	r2, [pc, #352]	; (8001a60 <main+0x548>)
 80018fe:	2101      	movs	r1, #1
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fc8d 	bl	8001220 <Write_D4_FSM>
					if (i > 3) {
 8001906:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <main+0x540>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d90e      	bls.n	800192c <main+0x414>

						strcpy(ContraCifrada, msg3);
 800190e:	494e      	ldr	r1, [pc, #312]	; (8001a48 <main+0x530>)
 8001910:	4853      	ldr	r0, [pc, #332]	; (8001a60 <main+0x548>)
 8001912:	f005 fa0d 	bl	8006d30 <strcpy>
						i = 0;
 8001916:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <main+0x540>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
						Estados = 4; // LA PUERTA SIGUE ABIERTA
 800191c:	4b49      	ldr	r3, [pc, #292]	; (8001a44 <main+0x52c>)
 800191e:	2204      	movs	r2, #4
 8001920:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8001922:	2201      	movs	r2, #1
 8001924:	2140      	movs	r1, #64	; 0x40
 8001926:	484f      	ldr	r0, [pc, #316]	; (8001a64 <main+0x54c>)
 8001928:	f001 fb26 	bl	8002f78 <HAL_GPIO_WritePin>
					}

				}
				Write_D4_FSM(current_tick, 1, ContraCifrada);
 800192c:	4b48      	ldr	r3, [pc, #288]	; (8001a50 <main+0x538>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a4b      	ldr	r2, [pc, #300]	; (8001a60 <main+0x548>)
 8001932:	2101      	movs	r1, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fc73 	bl	8001220 <Write_D4_FSM>

			}
			// ESTADO PARA RETENER DEBIDO A INTENTOS FALLIDOS

			if (Estados == 3) {
 800193a:	4b42      	ldr	r3, [pc, #264]	; (8001a44 <main+0x52c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d12d      	bne.n	800199e <main+0x486>

				Write_D4_FSM(HAL_GetTick(), 1, "FAIL");
 8001942:	f001 f815 	bl	8002970 <HAL_GetTick>
 8001946:	4603      	mov	r3, r0
 8001948:	4a47      	ldr	r2, [pc, #284]	; (8001a68 <main+0x550>)
 800194a:	2101      	movs	r1, #1
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fc67 	bl	8001220 <Write_D4_FSM>

				if (HAL_GetTick() - last_tick2 == tiempo_espera * intentos) {
 8001952:	f001 f80d 	bl	8002970 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <main+0x528>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1ad2      	subs	r2, r2, r3
 800195e:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <main+0x554>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4943      	ldr	r1, [pc, #268]	; (8001a70 <main+0x558>)
 8001964:	6809      	ldr	r1, [r1, #0]
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	429a      	cmp	r2, r3
 800196c:	d117      	bne.n	800199e <main+0x486>

					if (intentos < 4) {
 800196e:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <main+0x558>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d804      	bhi.n	8001980 <main+0x468>
						intentos++; // EL TIEMPO MAXIMO DE ESPERA SERA DE 40 SEGUNDOS
 8001976:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <main+0x558>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	4a3c      	ldr	r2, [pc, #240]	; (8001a70 <main+0x558>)
 800197e:	6013      	str	r3, [r2, #0]
					}
					Estados = 2; // VOLVER AL ESTADO INICIAL
 8001980:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <main+0x52c>)
 8001982:	2202      	movs	r2, #2
 8001984:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8001986:	2201      	movs	r2, #1
 8001988:	2140      	movs	r1, #64	; 0x40
 800198a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198e:	f001 faf3 	bl	8002f78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8001992:	2201      	movs	r2, #1
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199a:	f001 faed 	bl	8002f78 <HAL_GPIO_WritePin>
				}
			}
			if (Estados == 4) {
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <main+0x52c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	f47f ae02 	bne.w	80015ac <main+0x94>

				Write_D4_FSM(HAL_GetTick(), 1, "OPEN");
 80019a8:	f000 ffe2 	bl	8002970 <HAL_GetTick>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a31      	ldr	r2, [pc, #196]	; (8001a74 <main+0x55c>)
 80019b0:	2101      	movs	r1, #1
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fc34 	bl	8001220 <Write_D4_FSM>
				LECTURA_BTN2(); // LEEMOS EL BOTON1. PARA SABER SI QUEREMOS CAMBIAR CONTRASEÑA
 80019b8:	f7ff fc0a 	bl	80011d0 <LECTURA_BTN2>
				if (DETECTAR_CLICK2 == 1) {
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <main+0x560>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d119      	bne.n	80019f8 <main+0x4e0>
					DETECTAR_CLICK2 = 0;
 80019c4:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <main+0x560>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
					Estados = 2; // CERRRAMOS LA PUERTA
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <main+0x52c>)
 80019cc:	2202      	movs	r2, #2
 80019ce:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d8:	f001 face 	bl	8002f78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 80019dc:	2201      	movs	r2, #1
 80019de:	2140      	movs	r1, #64	; 0x40
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e4:	f001 fac8 	bl	8002f78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	2140      	movs	r1, #64	; 0x40
 80019ec:	481d      	ldr	r0, [pc, #116]	; (8001a64 <main+0x54c>)
 80019ee:	f001 fac3 	bl	8002f78 <HAL_GPIO_WritePin>
					servo(0);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fd1c 	bl	8001430 <servo>
				}
				LECTURA_BTN(); // LEEMOS EL BOTON1. PARA SABER SI QUEREMOS CAMBIAR CONTRASEÑA
 80019f8:	f7ff fbc2 	bl	8001180 <LECTURA_BTN>
				if (DETECTAR_CLICK == 1) {
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <main+0x564>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	f47f add3 	bne.w	80015ac <main+0x94>
					DETECTAR_CLICK = 0;
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <main+0x564>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
					Estados = 1; // NOS VAMOS A CAMBIAR CONTRASEÑA UNA VEZ SI PUDO ABRIR LA COMPUERTA.
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <main+0x52c>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1a:	f001 faad 	bl	8002f78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2140      	movs	r1, #64	; 0x40
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a26:	f001 faa7 	bl	8002f78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2140      	movs	r1, #64	; 0x40
 8001a2e:	480d      	ldr	r0, [pc, #52]	; (8001a64 <main+0x54c>)
 8001a30:	f001 faa2 	bl	8002f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pin_ledport, pin_led, SET);
 8001a34:	e5ba      	b.n	80015ac <main+0x94>
 8001a36:	bf00      	nop
 8001a38:	200002ce 	.word	0x200002ce
 8001a3c:	200002c8 	.word	0x200002c8
 8001a40:	200002d0 	.word	0x200002d0
 8001a44:	20000030 	.word	0x20000030
 8001a48:	20000018 	.word	0x20000018
 8001a4c:	20000010 	.word	0x20000010
 8001a50:	200002c4 	.word	0x200002c4
 8001a54:	200002cc 	.word	0x200002cc
 8001a58:	200002cd 	.word	0x200002cd
 8001a5c:	20000028 	.word	0x20000028
 8001a60:	20000020 	.word	0x20000020
 8001a64:	48000400 	.word	0x48000400
 8001a68:	0800760c 	.word	0x0800760c
 8001a6c:	20000038 	.word	0x20000038
 8001a70:	20000034 	.word	0x20000034
 8001a74:	08007614 	.word	0x08007614
 8001a78:	2000029c 	.word	0x2000029c
 8001a7c:	20000298 	.word	0x20000298

08001a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b096      	sub	sp, #88	; 0x58
 8001a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	2244      	movs	r2, #68	; 0x44
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f005 f908 	bl	8006ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	463b      	mov	r3, r7
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001aa2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001aa6:	f001 fec1 	bl	800382c <HAL_PWREx_ControlVoltageScaling>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ab0:	f000 fa7c 	bl	8001fac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001abc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001abe:	2310      	movs	r3, #16
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001ace:	2309      	movs	r3, #9
 8001ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ada:	2302      	movs	r3, #2
 8001adc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 fef8 	bl	80038d8 <HAL_RCC_OscConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001aee:	f000 fa5d 	bl	8001fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af2:	230f      	movs	r3, #15
 8001af4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af6:	2303      	movs	r3, #3
 8001af8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	2104      	movs	r1, #4
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fac0 	bl	8004090 <HAL_RCC_ClockConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b16:	f000 fa49 	bl	8001fac <Error_Handler>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3758      	adds	r7, #88	; 0x58
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <MX_I2C1_Init+0x74>)
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <MX_I2C1_Init+0x78>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <MX_I2C1_Init+0x74>)
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <MX_I2C1_Init+0x7c>)
 8001b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_I2C1_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <MX_I2C1_Init+0x74>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <MX_I2C1_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <MX_I2C1_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <MX_I2C1_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_I2C1_Init+0x74>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_I2C1_Init+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b5e:	480e      	ldr	r0, [pc, #56]	; (8001b98 <MX_I2C1_Init+0x74>)
 8001b60:	f001 fa3c 	bl	8002fdc <HAL_I2C_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b6a:	f000 fa1f 	bl	8001fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4809      	ldr	r0, [pc, #36]	; (8001b98 <MX_I2C1_Init+0x74>)
 8001b72:	f001 fdb5 	bl	80036e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b7c:	f000 fa16 	bl	8001fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b80:	2100      	movs	r1, #0
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_I2C1_Init+0x74>)
 8001b84:	f001 fdf7 	bl	8003776 <HAL_I2CEx_ConfigDigitalFilter>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b8e:	f000 fa0d 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200000b4 	.word	0x200000b4
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	00702681 	.word	0x00702681

08001ba4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <MX_TIM1_Init+0xa0>)
 8001bc4:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <MX_TIM1_Init+0xa4>)
 8001bc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <MX_TIM1_Init+0xa0>)
 8001bca:	2247      	movs	r2, #71	; 0x47
 8001bcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <MX_TIM1_Init+0xa0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <MX_TIM1_Init+0xa0>)
 8001bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MX_TIM1_Init+0xa0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001be2:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <MX_TIM1_Init+0xa0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_TIM1_Init+0xa0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bee:	4815      	ldr	r0, [pc, #84]	; (8001c44 <MX_TIM1_Init+0xa0>)
 8001bf0:	f003 f92e 	bl	8004e50 <HAL_TIM_Base_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001bfa:	f000 f9d7 	bl	8001fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480e      	ldr	r0, [pc, #56]	; (8001c44 <MX_TIM1_Init+0xa0>)
 8001c0c:	f003 fda2 	bl	8005754 <HAL_TIM_ConfigClockSource>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c16:	f000 f9c9 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <MX_TIM1_Init+0xa0>)
 8001c2c:	f004 fabe 	bl	80061ac <HAL_TIMEx_MasterConfigSynchronization>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c36:	f000 f9b9 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000108 	.word	0x20000108
 8001c48:	40012c00 	.word	0x40012c00

08001c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08e      	sub	sp, #56	; 0x38
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	615a      	str	r2, [r3, #20]
 8001c7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <MX_TIM2_Init+0xe8>)
 8001c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8001c86:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <MX_TIM2_Init+0xe8>)
 8001c88:	227f      	movs	r2, #127	; 0x7f
 8001c8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8c:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <MX_TIM2_Init+0xe8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8001c92:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <MX_TIM2_Init+0xe8>)
 8001c94:	f240 2271 	movw	r2, #625	; 0x271
 8001c98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9a:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <MX_TIM2_Init+0xe8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <MX_TIM2_Init+0xe8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ca6:	4823      	ldr	r0, [pc, #140]	; (8001d34 <MX_TIM2_Init+0xe8>)
 8001ca8:	f003 f8d2 	bl	8004e50 <HAL_TIM_Base_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001cb2:	f000 f97b 	bl	8001fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	481c      	ldr	r0, [pc, #112]	; (8001d34 <MX_TIM2_Init+0xe8>)
 8001cc4:	f003 fd46 	bl	8005754 <HAL_TIM_ConfigClockSource>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001cce:	f000 f96d 	bl	8001fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cd2:	4818      	ldr	r0, [pc, #96]	; (8001d34 <MX_TIM2_Init+0xe8>)
 8001cd4:	f003 f9a3 	bl	800501e <HAL_TIM_PWM_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001cde:	f000 f965 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4810      	ldr	r0, [pc, #64]	; (8001d34 <MX_TIM2_Init+0xe8>)
 8001cf2:	f004 fa5b 	bl	80061ac <HAL_TIMEx_MasterConfigSynchronization>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001cfc:	f000 f956 	bl	8001fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d00:	2360      	movs	r3, #96	; 0x60
 8001d02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d10:	463b      	mov	r3, r7
 8001d12:	2204      	movs	r2, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4807      	ldr	r0, [pc, #28]	; (8001d34 <MX_TIM2_Init+0xe8>)
 8001d18:	f003 fc08 	bl	800552c <HAL_TIM_PWM_ConfigChannel>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001d22:	f000 f943 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d26:	4803      	ldr	r0, [pc, #12]	; (8001d34 <MX_TIM2_Init+0xe8>)
 8001d28:	f000 fc72 	bl	8002610 <HAL_TIM_MspPostInit>

}
 8001d2c:	bf00      	nop
 8001d2e:	3738      	adds	r7, #56	; 0x38
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000154 	.word	0x20000154

08001d38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <MX_TIM4_Init+0x94>)
 8001d58:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <MX_TIM4_Init+0x98>)
 8001d5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <MX_TIM4_Init+0x94>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <MX_TIM4_Init+0x94>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <MX_TIM4_Init+0x94>)
 8001d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <MX_TIM4_Init+0x94>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <MX_TIM4_Init+0x94>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d7c:	4813      	ldr	r0, [pc, #76]	; (8001dcc <MX_TIM4_Init+0x94>)
 8001d7e:	f003 f867 	bl	8004e50 <HAL_TIM_Base_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001d88:	f000 f910 	bl	8001fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	4619      	mov	r1, r3
 8001d98:	480c      	ldr	r0, [pc, #48]	; (8001dcc <MX_TIM4_Init+0x94>)
 8001d9a:	f003 fcdb 	bl	8005754 <HAL_TIM_ConfigClockSource>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001da4:	f000 f902 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_TIM4_Init+0x94>)
 8001db6:	f004 f9f9 	bl	80061ac <HAL_TIMEx_MasterConfigSynchronization>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001dc0:	f000 f8f4 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200001a0 	.word	0x200001a0
 8001dd0:	40000800 	.word	0x40000800

08001dd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001dda:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <MX_USART2_UART_Init+0x5c>)
 8001ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_USART2_UART_Init+0x58>)
 8001e18:	f004 fa6e 	bl	80062f8 <HAL_UART_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e22:	f000 f8c3 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200001ec 	.word	0x200001ec
 8001e30:	40004400 	.word	0x40004400

08001e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	4b55      	ldr	r3, [pc, #340]	; (8001fa0 <MX_GPIO_Init+0x16c>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	4a54      	ldr	r2, [pc, #336]	; (8001fa0 <MX_GPIO_Init+0x16c>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e56:	4b52      	ldr	r3, [pc, #328]	; (8001fa0 <MX_GPIO_Init+0x16c>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e62:	4b4f      	ldr	r3, [pc, #316]	; (8001fa0 <MX_GPIO_Init+0x16c>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a4e      	ldr	r2, [pc, #312]	; (8001fa0 <MX_GPIO_Init+0x16c>)
 8001e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <MX_GPIO_Init+0x16c>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <MX_GPIO_Init+0x16c>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	4a48      	ldr	r2, [pc, #288]	; (8001fa0 <MX_GPIO_Init+0x16c>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e86:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <MX_GPIO_Init+0x16c>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <MX_GPIO_Init+0x16c>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a42      	ldr	r2, [pc, #264]	; (8001fa0 <MX_GPIO_Init+0x16c>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9e:	4b40      	ldr	r3, [pc, #256]	; (8001fa0 <MX_GPIO_Init+0x16c>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SM_Pin|MB_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8001eb0:	483c      	ldr	r0, [pc, #240]	; (8001fa4 <MX_GPIO_Init+0x170>)
 8001eb2:	f001 f861 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D2_Pin|D3_Pin|SCLK_Pin
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f44f 51df 	mov.w	r1, #7136	; 0x1be0
 8001ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec0:	f001 f85a 	bl	8002f78 <HAL_GPIO_WritePin>
                          |SDI_Pin|F2_Pin|F1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, F4_Pin|F3_Pin|LCLK_Pin|D4_Pin, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f44f 51c3 	mov.w	r1, #6240	; 0x1860
 8001eca:	4837      	ldr	r0, [pc, #220]	; (8001fa8 <MX_GPIO_Init+0x174>)
 8001ecc:	f001 f854 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ed6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	482f      	ldr	r0, [pc, #188]	; (8001fa4 <MX_GPIO_Init+0x170>)
 8001ee8:	f000 fe84 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SM_Pin MB_Pin PC9 */
  GPIO_InitStruct.Pin = SM_Pin|MB_Pin|GPIO_PIN_9;
 8001eec:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8001ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4827      	ldr	r0, [pc, #156]	; (8001fa4 <MX_GPIO_Init+0x170>)
 8001f06:	f000 fe75 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001f0a:	2310      	movs	r3, #16
 8001f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f000 fe68 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D2_Pin D3_Pin SCLK_Pin
                           SDI_Pin F2_Pin F1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D2_Pin|D3_Pin|SCLK_Pin
 8001f24:	f44f 53df 	mov.w	r3, #7136	; 0x1be0
 8001f28:	617b      	str	r3, [r7, #20]
                          |SDI_Pin|F2_Pin|F1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f000 fe58 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin PC8 */
  GPIO_InitStruct.Pin = BTN1_Pin|GPIO_PIN_8;
 8001f44:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	4812      	ldr	r0, [pc, #72]	; (8001fa4 <MX_GPIO_Init+0x170>)
 8001f5a:	f000 fe4b 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin|C4_Pin|C3_Pin;
 8001f5e:	f24c 0306 	movw	r3, #49158	; 0xc006
 8001f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <MX_GPIO_Init+0x174>)
 8001f74:	f000 fe3e 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : F4_Pin F3_Pin LCLK_Pin D4_Pin */
  GPIO_InitStruct.Pin = F4_Pin|F3_Pin|LCLK_Pin|D4_Pin;
 8001f78:	f44f 53c3 	mov.w	r3, #6240	; 0x1860
 8001f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_GPIO_Init+0x174>)
 8001f92:	f000 fe2f 	bl	8002bf4 <HAL_GPIO_Init>

}
 8001f96:	bf00      	nop
 8001f98:	3728      	adds	r7, #40	; 0x28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	48000400 	.word	0x48000400

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
			/* User can add his own implementation to report the HAL error return state */
			__disable_irq();
			while (1) {
 8001fb4:	e7fe      	b.n	8001fb4 <Error_Handler+0x8>

08001fb6 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60ba      	str	r2, [r7, #8]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	81fb      	strh	r3, [r7, #14]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	81bb      	strh	r3, [r7, #12]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd0:	3307      	adds	r3, #7
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	da00      	bge.n	8001fd8 <SSD1306_DrawBitmap+0x22>
 8001fd6:	3307      	adds	r3, #7
 8001fd8:	10db      	asrs	r3, r3, #3
 8001fda:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	82bb      	strh	r3, [r7, #20]
 8001fe4:	e044      	b.n	8002070 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	827b      	strh	r3, [r7, #18]
 8001fea:	e02f      	b.n	800204c <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001fec:	8a7b      	ldrh	r3, [r7, #18]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	75fb      	strb	r3, [r7, #23]
 8001ffc:	e012      	b.n	8002024 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001ffe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002002:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002006:	fb03 f202 	mul.w	r2, r3, r2
 800200a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800200e:	2b00      	cmp	r3, #0
 8002010:	da00      	bge.n	8002014 <SSD1306_DrawBitmap+0x5e>
 8002012:	3307      	adds	r3, #7
 8002014:	10db      	asrs	r3, r3, #3
 8002016:	b21b      	sxth	r3, r3
 8002018:	4413      	add	r3, r2
 800201a:	461a      	mov	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4413      	add	r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002024:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da09      	bge.n	8002040 <SSD1306_DrawBitmap+0x8a>
 800202c:	89fa      	ldrh	r2, [r7, #14]
 800202e:	8a7b      	ldrh	r3, [r7, #18]
 8002030:	4413      	add	r3, r2
 8002032:	b29b      	uxth	r3, r3
 8002034:	89b9      	ldrh	r1, [r7, #12]
 8002036:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f86a 	bl	8002114 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002040:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002044:	b29b      	uxth	r3, r3
 8002046:	3301      	adds	r3, #1
 8002048:	b29b      	uxth	r3, r3
 800204a:	827b      	strh	r3, [r7, #18]
 800204c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002054:	429a      	cmp	r2, r3
 8002056:	dbc9      	blt.n	8001fec <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002058:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800205c:	b29b      	uxth	r3, r3
 800205e:	3301      	adds	r3, #1
 8002060:	b29b      	uxth	r3, r3
 8002062:	82bb      	strh	r3, [r7, #20]
 8002064:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002068:	b29b      	uxth	r3, r3
 800206a:	3301      	adds	r3, #1
 800206c:	b29b      	uxth	r3, r3
 800206e:	81bb      	strh	r3, [r7, #12]
 8002070:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002074:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002078:	429a      	cmp	r2, r3
 800207a:	dbb4      	blt.n	8001fe6 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <SSD1306_UpdateScreen>:

	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800208e:	2300      	movs	r3, #0
 8002090:	71fb      	strb	r3, [r7, #7]
 8002092:	e01d      	b.n	80020d0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	3b50      	subs	r3, #80	; 0x50
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	2100      	movs	r1, #0
 800209e:	2078      	movs	r0, #120	; 0x78
 80020a0:	f000 f9c2 	bl	8002428 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2100      	movs	r1, #0
 80020a8:	2078      	movs	r0, #120	; 0x78
 80020aa:	f000 f9bd 	bl	8002428 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80020ae:	2210      	movs	r2, #16
 80020b0:	2100      	movs	r1, #0
 80020b2:	2078      	movs	r0, #120	; 0x78
 80020b4:	f000 f9b8 	bl	8002428 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	01db      	lsls	r3, r3, #7
 80020bc:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <SSD1306_UpdateScreen+0x58>)
 80020be:	441a      	add	r2, r3
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	2078      	movs	r0, #120	; 0x78
 80020c6:	f000 f949 	bl	800235c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	3301      	adds	r3, #1
 80020ce:	71fb      	strb	r3, [r7, #7]
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	2b07      	cmp	r3, #7
 80020d4:	d9de      	bls.n	8002094 <SSD1306_UpdateScreen+0xc>
	}
}
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200002d4 	.word	0x200002d4

080020e4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <SSD1306_Fill+0x14>
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <SSD1306_Fill+0x16>
 80020f8:	23ff      	movs	r3, #255	; 0xff
 80020fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020fe:	4619      	mov	r1, r3
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <SSD1306_Fill+0x2c>)
 8002102:	f004 fdcf 	bl	8006ca4 <memset>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200002d4 	.word	0x200002d4

08002114 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
 800211e:	460b      	mov	r3, r1
 8002120:	80bb      	strh	r3, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	70fb      	strb	r3, [r7, #3]
	if (
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	2b7f      	cmp	r3, #127	; 0x7f
 800212a:	d848      	bhi.n	80021be <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800212c:	88bb      	ldrh	r3, [r7, #4]
 800212e:	2b3f      	cmp	r3, #63	; 0x3f
 8002130:	d845      	bhi.n	80021be <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <SSD1306_DrawPixel+0xb8>)
 8002134:	791b      	ldrb	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d11a      	bne.n	8002184 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800214e:	88fa      	ldrh	r2, [r7, #6]
 8002150:	88bb      	ldrh	r3, [r7, #4]
 8002152:	08db      	lsrs	r3, r3, #3
 8002154:	b298      	uxth	r0, r3
 8002156:	4603      	mov	r3, r0
 8002158:	01db      	lsls	r3, r3, #7
 800215a:	4413      	add	r3, r2
 800215c:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <SSD1306_DrawPixel+0xbc>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	b25a      	sxtb	r2, r3
 8002162:	88bb      	ldrh	r3, [r7, #4]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	2101      	movs	r1, #1
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	b25b      	sxtb	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b259      	sxtb	r1, r3
 8002174:	88fa      	ldrh	r2, [r7, #6]
 8002176:	4603      	mov	r3, r0
 8002178:	01db      	lsls	r3, r3, #7
 800217a:	4413      	add	r3, r2
 800217c:	b2c9      	uxtb	r1, r1
 800217e:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <SSD1306_DrawPixel+0xbc>)
 8002180:	54d1      	strb	r1, [r2, r3]
 8002182:	e01d      	b.n	80021c0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002184:	88fa      	ldrh	r2, [r7, #6]
 8002186:	88bb      	ldrh	r3, [r7, #4]
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	b298      	uxth	r0, r3
 800218c:	4603      	mov	r3, r0
 800218e:	01db      	lsls	r3, r3, #7
 8002190:	4413      	add	r3, r2
 8002192:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <SSD1306_DrawPixel+0xbc>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	b25a      	sxtb	r2, r3
 8002198:	88bb      	ldrh	r3, [r7, #4]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	b25b      	sxtb	r3, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	4013      	ands	r3, r2
 80021ac:	b259      	sxtb	r1, r3
 80021ae:	88fa      	ldrh	r2, [r7, #6]
 80021b0:	4603      	mov	r3, r0
 80021b2:	01db      	lsls	r3, r3, #7
 80021b4:	4413      	add	r3, r2
 80021b6:	b2c9      	uxtb	r1, r1
 80021b8:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <SSD1306_DrawPixel+0xbc>)
 80021ba:	54d1      	strb	r1, [r2, r3]
 80021bc:	e000      	b.n	80021c0 <SSD1306_DrawPixel+0xac>
		return;
 80021be:	bf00      	nop
	}
}
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	200006d4 	.word	0x200006d4
 80021d0:	200002d4 	.word	0x200002d4

080021d4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	460a      	mov	r2, r1
 80021de:	80fb      	strh	r3, [r7, #6]
 80021e0:	4613      	mov	r3, r2
 80021e2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80021e4:	4a05      	ldr	r2, [pc, #20]	; (80021fc <SSD1306_GotoXY+0x28>)
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <SSD1306_GotoXY+0x28>)
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	8053      	strh	r3, [r2, #2]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	200006d4 	.word	0x200006d4

08002200 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	4613      	mov	r3, r2
 800220e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002210:	4b3a      	ldr	r3, [pc, #232]	; (80022fc <SSD1306_Putc+0xfc>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
	if (
 800221c:	2b7f      	cmp	r3, #127	; 0x7f
 800221e:	dc07      	bgt.n	8002230 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002220:	4b36      	ldr	r3, [pc, #216]	; (80022fc <SSD1306_Putc+0xfc>)
 8002222:	885b      	ldrh	r3, [r3, #2]
 8002224:	461a      	mov	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800222c:	2b3f      	cmp	r3, #63	; 0x3f
 800222e:	dd01      	ble.n	8002234 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002230:	2300      	movs	r3, #0
 8002232:	e05e      	b.n	80022f2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e04b      	b.n	80022d2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	3b20      	subs	r3, #32
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	7849      	ldrb	r1, [r1, #1]
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4619      	mov	r1, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	440b      	add	r3, r1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e030      	b.n	80022c0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d010      	beq.n	8002290 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800226e:	4b23      	ldr	r3, [pc, #140]	; (80022fc <SSD1306_Putc+0xfc>)
 8002270:	881a      	ldrh	r2, [r3, #0]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	b29b      	uxth	r3, r3
 8002276:	4413      	add	r3, r2
 8002278:	b298      	uxth	r0, r3
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <SSD1306_Putc+0xfc>)
 800227c:	885a      	ldrh	r2, [r3, #2]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	b29b      	uxth	r3, r3
 8002282:	4413      	add	r3, r2
 8002284:	b29b      	uxth	r3, r3
 8002286:	79ba      	ldrb	r2, [r7, #6]
 8002288:	4619      	mov	r1, r3
 800228a:	f7ff ff43 	bl	8002114 <SSD1306_DrawPixel>
 800228e:	e014      	b.n	80022ba <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <SSD1306_Putc+0xfc>)
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4413      	add	r3, r2
 800229a:	b298      	uxth	r0, r3
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <SSD1306_Putc+0xfc>)
 800229e:	885a      	ldrh	r2, [r3, #2]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	b299      	uxth	r1, r3
 80022a8:	79bb      	ldrb	r3, [r7, #6]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf0c      	ite	eq
 80022ae:	2301      	moveq	r3, #1
 80022b0:	2300      	movne	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	f7ff ff2d 	bl	8002114 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	3301      	adds	r3, #1
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d3c8      	bcc.n	800225e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3301      	adds	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	785b      	ldrb	r3, [r3, #1]
 80022d6:	461a      	mov	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	4293      	cmp	r3, r2
 80022dc:	d3ad      	bcc.n	800223a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <SSD1306_Putc+0xfc>)
 80022e0:	881a      	ldrh	r2, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <SSD1306_Putc+0xfc>)
 80022ee:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80022f0:	79fb      	ldrb	r3, [r7, #7]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200006d4 	.word	0x200006d4

08002300 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	4613      	mov	r3, r2
 800230c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800230e:	e012      	b.n	8002336 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	79fa      	ldrb	r2, [r7, #7]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff71 	bl	8002200 <SSD1306_Putc>
 800231e:	4603      	mov	r3, r0
 8002320:	461a      	mov	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d002      	beq.n	8002330 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	e008      	b.n	8002342 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3301      	adds	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1e8      	bne.n	8002310 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	781b      	ldrb	r3, [r3, #0]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff fec8 	bl	80020e4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002354:	f7ff fe98 	bl	8002088 <SSD1306_UpdateScreen>
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}

0800235c <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b0c7      	sub	sp, #284	; 0x11c
 8002360:	af02      	add	r7, sp, #8
 8002362:	4604      	mov	r4, r0
 8002364:	4608      	mov	r0, r1
 8002366:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800236a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800236e:	600a      	str	r2, [r1, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002376:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800237a:	4622      	mov	r2, r4
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002382:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002386:	4602      	mov	r2, r0
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800238e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002392:	460a      	mov	r2, r1
 8002394:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002396:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800239a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800239e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80023a2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80023b0:	e015      	b.n	80023de <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80023b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023b6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80023ba:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	441a      	add	r2, r3
 80023c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023c6:	3301      	adds	r3, #1
 80023c8:	7811      	ldrb	r1, [r2, #0]
 80023ca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80023ce:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80023d2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80023d4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023d8:	3301      	adds	r3, #1
 80023da:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80023de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80023e8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80023ec:	8812      	ldrh	r2, [r2, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d8df      	bhi.n	80023b2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80023f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023f6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b299      	uxth	r1, r3
 80023fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002402:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	b29b      	uxth	r3, r3
 800240c:	f107 020c 	add.w	r2, r7, #12
 8002410:	200a      	movs	r0, #10
 8002412:	9000      	str	r0, [sp, #0]
 8002414:	4803      	ldr	r0, [pc, #12]	; (8002424 <ssd1306_I2C_WriteMulti+0xc8>)
 8002416:	f000 fe71 	bl	80030fc <HAL_I2C_Master_Transmit>
}
 800241a:	bf00      	nop
 800241c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002420:	46bd      	mov	sp, r7
 8002422:	bd90      	pop	{r4, r7, pc}
 8002424:	200000b4 	.word	0x200000b4

08002428 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af02      	add	r7, sp, #8
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	460b      	mov	r3, r1
 8002434:	71bb      	strb	r3, [r7, #6]
 8002436:	4613      	mov	r3, r2
 8002438:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800243a:	79bb      	ldrb	r3, [r7, #6]
 800243c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800243e:	797b      	ldrb	r3, [r7, #5]
 8002440:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	b299      	uxth	r1, r3
 8002446:	f107 020c 	add.w	r2, r7, #12
 800244a:	230a      	movs	r3, #10
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2302      	movs	r3, #2
 8002450:	4803      	ldr	r0, [pc, #12]	; (8002460 <ssd1306_I2C_Write+0x38>)
 8002452:	f000 fe53 	bl	80030fc <HAL_I2C_Master_Transmit>
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200000b4 	.word	0x200000b4

08002464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_MspInit+0x44>)
 800246c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246e:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <HAL_MspInit+0x44>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6613      	str	r3, [r2, #96]	; 0x60
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_MspInit+0x44>)
 8002478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_MspInit+0x44>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_MspInit+0x44>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	6593      	str	r3, [r2, #88]	; 0x58
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_MspInit+0x44>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b0ac      	sub	sp, #176	; 0xb0
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	2288      	movs	r2, #136	; 0x88
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f004 fbe9 	bl	8006ca4 <memset>
  if(hi2c->Instance==I2C1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a21      	ldr	r2, [pc, #132]	; (800255c <HAL_I2C_MspInit+0xb0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d13b      	bne.n	8002554 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024dc:	2340      	movs	r3, #64	; 0x40
 80024de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024e0:	2300      	movs	r3, #0
 80024e2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4618      	mov	r0, r3
 80024ea:	f001 fff5 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80024f4:	f7ff fd5a 	bl	8001fac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_I2C_MspInit+0xb4>)
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_I2C_MspInit+0xb4>)
 80024fe:	f043 0302 	orr.w	r3, r3, #2
 8002502:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002504:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_I2C_MspInit+0xb4>)
 8002506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002510:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002514:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002518:	2312      	movs	r3, #18
 800251a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002524:	2303      	movs	r3, #3
 8002526:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800252a:	2304      	movs	r3, #4
 800252c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002534:	4619      	mov	r1, r3
 8002536:	480b      	ldr	r0, [pc, #44]	; (8002564 <HAL_I2C_MspInit+0xb8>)
 8002538:	f000 fb5c 	bl	8002bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_I2C_MspInit+0xb4>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	4a07      	ldr	r2, [pc, #28]	; (8002560 <HAL_I2C_MspInit+0xb4>)
 8002542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002546:	6593      	str	r3, [r2, #88]	; 0x58
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_I2C_MspInit+0xb4>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002554:	bf00      	nop
 8002556:	37b0      	adds	r7, #176	; 0xb0
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40005400 	.word	0x40005400
 8002560:	40021000 	.word	0x40021000
 8002564:	48000400 	.word	0x48000400

08002568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a23      	ldr	r2, [pc, #140]	; (8002604 <HAL_TIM_Base_MspInit+0x9c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10c      	bne.n	8002594 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <HAL_TIM_Base_MspInit+0xa0>)
 800257c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257e:	4a22      	ldr	r2, [pc, #136]	; (8002608 <HAL_TIM_Base_MspInit+0xa0>)
 8002580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002584:	6613      	str	r3, [r2, #96]	; 0x60
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_TIM_Base_MspInit+0xa0>)
 8002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002592:	e032      	b.n	80025fa <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d114      	bne.n	80025c8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_TIM_Base_MspInit+0xa0>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	4a19      	ldr	r2, [pc, #100]	; (8002608 <HAL_TIM_Base_MspInit+0xa0>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6593      	str	r3, [r2, #88]	; 0x58
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <HAL_TIM_Base_MspInit+0xa0>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	201c      	movs	r0, #28
 80025bc:	f000 fae3 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025c0:	201c      	movs	r0, #28
 80025c2:	f000 fafc 	bl	8002bbe <HAL_NVIC_EnableIRQ>
}
 80025c6:	e018      	b.n	80025fa <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0f      	ldr	r2, [pc, #60]	; (800260c <HAL_TIM_Base_MspInit+0xa4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d113      	bne.n	80025fa <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <HAL_TIM_Base_MspInit+0xa0>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <HAL_TIM_Base_MspInit+0xa0>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	6593      	str	r3, [r2, #88]	; 0x58
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_TIM_Base_MspInit+0xa0>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	201e      	movs	r0, #30
 80025f0:	f000 fac9 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025f4:	201e      	movs	r0, #30
 80025f6:	f000 fae2 	bl	8002bbe <HAL_NVIC_EnableIRQ>
}
 80025fa:	bf00      	nop
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40021000 	.word	0x40021000
 800260c:	40000800 	.word	0x40000800

08002610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002630:	d11c      	bne.n	800266c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_TIM_MspPostInit+0x64>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <HAL_TIM_MspPostInit+0x64>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <HAL_TIM_MspPostInit+0x64>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800264a:	2302      	movs	r3, #2
 800264c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800265a:	2301      	movs	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	4619      	mov	r1, r3
 8002664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002668:	f000 fac4 	bl	8002bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800266c:	bf00      	nop
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000

08002678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b0ac      	sub	sp, #176	; 0xb0
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	2288      	movs	r2, #136	; 0x88
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f004 fb03 	bl	8006ca4 <memset>
  if(huart->Instance==USART2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a21      	ldr	r2, [pc, #132]	; (8002728 <HAL_UART_MspInit+0xb0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d13b      	bne.n	8002720 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026a8:	2302      	movs	r3, #2
 80026aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026ac:	2300      	movs	r3, #0
 80026ae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4618      	mov	r0, r3
 80026b6:	f001 ff0f 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026c0:	f7ff fc74 	bl	8001fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_UART_MspInit+0xb4>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	4a18      	ldr	r2, [pc, #96]	; (800272c <HAL_UART_MspInit+0xb4>)
 80026ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ce:	6593      	str	r3, [r2, #88]	; 0x58
 80026d0:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_UART_MspInit+0xb4>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_UART_MspInit+0xb4>)
 80026de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e0:	4a12      	ldr	r2, [pc, #72]	; (800272c <HAL_UART_MspInit+0xb4>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_UART_MspInit+0xb4>)
 80026ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026f4:	230c      	movs	r3, #12
 80026f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002706:	2303      	movs	r3, #3
 8002708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800270c:	2307      	movs	r3, #7
 800270e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002716:	4619      	mov	r1, r3
 8002718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800271c:	f000 fa6a 	bl	8002bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002720:	bf00      	nop
 8002722:	37b0      	adds	r7, #176	; 0xb0
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40004400 	.word	0x40004400
 800272c:	40021000 	.word	0x40021000

08002730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <NMI_Handler+0x4>

08002736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <HardFault_Handler+0x4>

0800273c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <MemManage_Handler+0x4>

08002742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <BusFault_Handler+0x4>

08002748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <UsageFault_Handler+0x4>

0800274e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800277c:	f000 f8e4 	bl	8002948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}

08002784 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <TIM2_IRQHandler+0x10>)
 800278a:	f002 fdaf 	bl	80052ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000154 	.word	0x20000154

08002798 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <TIM4_IRQHandler+0x10>)
 800279e:	f002 fda5 	bl	80052ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200001a0 	.word	0x200001a0

080027ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b4:	4a14      	ldr	r2, [pc, #80]	; (8002808 <_sbrk+0x5c>)
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <_sbrk+0x60>)
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <_sbrk+0x64>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <_sbrk+0x64>)
 80027ca:	4a12      	ldr	r2, [pc, #72]	; (8002814 <_sbrk+0x68>)
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <_sbrk+0x64>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d207      	bcs.n	80027ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027dc:	f004 fa7c 	bl	8006cd8 <__errno>
 80027e0:	4603      	mov	r3, r0
 80027e2:	220c      	movs	r2, #12
 80027e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	e009      	b.n	8002800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <_sbrk+0x64>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <_sbrk+0x64>)
 80027fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20018000 	.word	0x20018000
 800280c:	00000400 	.word	0x00000400
 8002810:	200006dc 	.word	0x200006dc
 8002814:	20000830 	.word	0x20000830

08002818 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <SystemInit+0x20>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	4a05      	ldr	r2, [pc, #20]	; (8002838 <SystemInit+0x20>)
 8002824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800283c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002874 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002840:	f7ff ffea 	bl	8002818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002844:	480c      	ldr	r0, [pc, #48]	; (8002878 <LoopForever+0x6>)
  ldr r1, =_edata
 8002846:	490d      	ldr	r1, [pc, #52]	; (800287c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <LoopForever+0xe>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800284c:	e002      	b.n	8002854 <LoopCopyDataInit>

0800284e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002852:	3304      	adds	r3, #4

08002854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002858:	d3f9      	bcc.n	800284e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800285c:	4c0a      	ldr	r4, [pc, #40]	; (8002888 <LoopForever+0x16>)
  movs r3, #0
 800285e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002860:	e001      	b.n	8002866 <LoopFillZerobss>

08002862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002864:	3204      	adds	r2, #4

08002866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002868:	d3fb      	bcc.n	8002862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800286a:	f004 fa3b 	bl	8006ce4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800286e:	f7fe fe53 	bl	8001518 <main>

08002872 <LoopForever>:

LoopForever:
    b LoopForever
 8002872:	e7fe      	b.n	8002872 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002874:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800287c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002880:	08009b9c 	.word	0x08009b9c
  ldr r2, =_sbss
 8002884:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002888:	2000082c 	.word	0x2000082c

0800288c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800288c:	e7fe      	b.n	800288c <ADC1_2_IRQHandler>
	...

08002890 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800289a:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <HAL_Init+0x3c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a0b      	ldr	r2, [pc, #44]	; (80028cc <HAL_Init+0x3c>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a6:	2003      	movs	r0, #3
 80028a8:	f000 f962 	bl	8002b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ac:	2000      	movs	r0, #0
 80028ae:	f000 f80f 	bl	80028d0 <HAL_InitTick>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	71fb      	strb	r3, [r7, #7]
 80028bc:	e001      	b.n	80028c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028be:	f7ff fdd1 	bl	8002464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028c2:	79fb      	ldrb	r3, [r7, #7]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40022000 	.word	0x40022000

080028d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_InitTick+0x6c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d023      	beq.n	800292c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <HAL_InitTick+0x70>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <HAL_InitTick+0x6c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f96d 	bl	8002bda <HAL_SYSTICK_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10f      	bne.n	8002926 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d809      	bhi.n	8002920 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800290c:	2200      	movs	r2, #0
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	f000 f937 	bl	8002b86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <HAL_InitTick+0x74>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e007      	b.n	8002930 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e004      	b.n	8002930 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
 800292a:	e001      	b.n	8002930 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000044 	.word	0x20000044
 8002940:	2000003c 	.word	0x2000003c
 8002944:	20000040 	.word	0x20000040

08002948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_IncTick+0x20>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_IncTick+0x24>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4413      	add	r3, r2
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <HAL_IncTick+0x24>)
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000044 	.word	0x20000044
 800296c:	200006e0 	.word	0x200006e0

08002970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return uwTick;
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_GetTick+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	200006e0 	.word	0x200006e0

08002988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002990:	f7ff ffee 	bl	8002970 <HAL_GetTick>
 8002994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d005      	beq.n	80029ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HAL_Delay+0x44>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ae:	bf00      	nop
 80029b0:	f7ff ffde 	bl	8002970 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d8f7      	bhi.n	80029b0 <HAL_Delay+0x28>
  {
  }
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000044 	.word	0x20000044

080029d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ec:	4013      	ands	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a02:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	60d3      	str	r3, [r2, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <__NVIC_GetPriorityGrouping+0x18>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	f003 0307 	and.w	r3, r3, #7
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	db0b      	blt.n	8002a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	4907      	ldr	r1, [pc, #28]	; (8002a6c <__NVIC_EnableIRQ+0x38>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2001      	movs	r0, #1
 8002a56:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000e100 	.word	0xe000e100

08002a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	db0a      	blt.n	8002a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	490c      	ldr	r1, [pc, #48]	; (8002abc <__NVIC_SetPriority+0x4c>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	440b      	add	r3, r1
 8002a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a98:	e00a      	b.n	8002ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <__NVIC_SetPriority+0x50>)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	3b04      	subs	r3, #4
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	440b      	add	r3, r1
 8002aae:	761a      	strb	r2, [r3, #24]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000e100 	.word	0xe000e100
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f1c3 0307 	rsb	r3, r3, #7
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	bf28      	it	cs
 8002ae2:	2304      	movcs	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d902      	bls.n	8002af4 <NVIC_EncodePriority+0x30>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3b03      	subs	r3, #3
 8002af2:	e000      	b.n	8002af6 <NVIC_EncodePriority+0x32>
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	f04f 32ff 	mov.w	r2, #4294967295
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	401a      	ands	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	43d9      	mvns	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	4313      	orrs	r3, r2
         );
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b3c:	d301      	bcc.n	8002b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00f      	b.n	8002b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b42:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <SysTick_Config+0x40>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4a:	210f      	movs	r1, #15
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f7ff ff8e 	bl	8002a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <SysTick_Config+0x40>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5a:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <SysTick_Config+0x40>)
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	e000e010 	.word	0xe000e010

08002b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ff29 	bl	80029d0 <__NVIC_SetPriorityGrouping>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b98:	f7ff ff3e 	bl	8002a18 <__NVIC_GetPriorityGrouping>
 8002b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f7ff ff8e 	bl	8002ac4 <NVIC_EncodePriority>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff5d 	bl	8002a70 <__NVIC_SetPriority>
}
 8002bb6:	bf00      	nop
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff31 	bl	8002a34 <__NVIC_EnableIRQ>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff ffa2 	bl	8002b2c <SysTick_Config>
 8002be8:	4603      	mov	r3, r0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c02:	e17f      	b.n	8002f04 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8171 	beq.w	8002efe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d005      	beq.n	8002c34 <HAL_GPIO_Init+0x40>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d130      	bne.n	8002c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f003 0201 	and.w	r2, r3, #1
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d118      	bne.n	8002cd4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	08db      	lsrs	r3, r3, #3
 8002cbe:	f003 0201 	and.w	r2, r3, #1
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d017      	beq.n	8002d10 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	2203      	movs	r2, #3
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d123      	bne.n	8002d64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	6939      	ldr	r1, [r7, #16]
 8002d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80ac 	beq.w	8002efe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <HAL_GPIO_Init+0x330>)
 8002da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002daa:	4a5e      	ldr	r2, [pc, #376]	; (8002f24 <HAL_GPIO_Init+0x330>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6613      	str	r3, [r2, #96]	; 0x60
 8002db2:	4b5c      	ldr	r3, [pc, #368]	; (8002f24 <HAL_GPIO_Init+0x330>)
 8002db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dbe:	4a5a      	ldr	r2, [pc, #360]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002de8:	d025      	beq.n	8002e36 <HAL_GPIO_Init+0x242>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a4f      	ldr	r2, [pc, #316]	; (8002f2c <HAL_GPIO_Init+0x338>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01f      	beq.n	8002e32 <HAL_GPIO_Init+0x23e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a4e      	ldr	r2, [pc, #312]	; (8002f30 <HAL_GPIO_Init+0x33c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d019      	beq.n	8002e2e <HAL_GPIO_Init+0x23a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a4d      	ldr	r2, [pc, #308]	; (8002f34 <HAL_GPIO_Init+0x340>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_GPIO_Init+0x236>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4c      	ldr	r2, [pc, #304]	; (8002f38 <HAL_GPIO_Init+0x344>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00d      	beq.n	8002e26 <HAL_GPIO_Init+0x232>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a4b      	ldr	r2, [pc, #300]	; (8002f3c <HAL_GPIO_Init+0x348>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d007      	beq.n	8002e22 <HAL_GPIO_Init+0x22e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a4a      	ldr	r2, [pc, #296]	; (8002f40 <HAL_GPIO_Init+0x34c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_GPIO_Init+0x22a>
 8002e1a:	2306      	movs	r3, #6
 8002e1c:	e00c      	b.n	8002e38 <HAL_GPIO_Init+0x244>
 8002e1e:	2307      	movs	r3, #7
 8002e20:	e00a      	b.n	8002e38 <HAL_GPIO_Init+0x244>
 8002e22:	2305      	movs	r3, #5
 8002e24:	e008      	b.n	8002e38 <HAL_GPIO_Init+0x244>
 8002e26:	2304      	movs	r3, #4
 8002e28:	e006      	b.n	8002e38 <HAL_GPIO_Init+0x244>
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e004      	b.n	8002e38 <HAL_GPIO_Init+0x244>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e002      	b.n	8002e38 <HAL_GPIO_Init+0x244>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <HAL_GPIO_Init+0x244>
 8002e36:	2300      	movs	r3, #0
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	f002 0203 	and.w	r2, r2, #3
 8002e3e:	0092      	lsls	r2, r2, #2
 8002e40:	4093      	lsls	r3, r2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e48:	4937      	ldr	r1, [pc, #220]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	089b      	lsrs	r3, r3, #2
 8002e4e:	3302      	adds	r3, #2
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_GPIO_Init+0x350>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e7a:	4a32      	ldr	r2, [pc, #200]	; (8002f44 <HAL_GPIO_Init+0x350>)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e80:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <HAL_GPIO_Init+0x350>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_GPIO_Init+0x350>)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_GPIO_Init+0x350>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ece:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <HAL_GPIO_Init+0x350>)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_GPIO_Init+0x350>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ef8:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <HAL_GPIO_Init+0x350>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	3301      	adds	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f47f ae78 	bne.w	8002c04 <HAL_GPIO_Init+0x10>
  }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	48000400 	.word	0x48000400
 8002f30:	48000800 	.word	0x48000800
 8002f34:	48000c00 	.word	0x48000c00
 8002f38:	48001000 	.word	0x48001000
 8002f3c:	48001400 	.word	0x48001400
 8002f40:	48001800 	.word	0x48001800
 8002f44:	40010400 	.word	0x40010400

08002f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	e001      	b.n	8002f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fba:	887a      	ldrh	r2, [r7, #2]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	041a      	lsls	r2, r3, #16
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	43d9      	mvns	r1, r3
 8002fc6:	887b      	ldrh	r3, [r7, #2]
 8002fc8:	400b      	ands	r3, r1
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	619a      	str	r2, [r3, #24]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e081      	b.n	80030f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff fa52 	bl	80024ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800302c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800303c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d107      	bne.n	8003056 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	e006      	b.n	8003064 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003062:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d104      	bne.n	8003076 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003074:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003088:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003098:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69d9      	ldr	r1, [r3, #28]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1a      	ldr	r2, [r3, #32]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	461a      	mov	r2, r3
 8003108:	460b      	mov	r3, r1
 800310a:	817b      	strh	r3, [r7, #10]
 800310c:	4613      	mov	r3, r2
 800310e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b20      	cmp	r3, #32
 800311a:	f040 80da 	bne.w	80032d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_I2C_Master_Transmit+0x30>
 8003128:	2302      	movs	r3, #2
 800312a:	e0d3      	b.n	80032d4 <HAL_I2C_Master_Transmit+0x1d8>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003134:	f7ff fc1c 	bl	8002970 <HAL_GetTick>
 8003138:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2319      	movs	r3, #25
 8003140:	2201      	movs	r2, #1
 8003142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f8f0 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0be      	b.n	80032d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2221      	movs	r2, #33	; 0x21
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2210      	movs	r2, #16
 8003162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	893a      	ldrh	r2, [r7, #8]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	2bff      	cmp	r3, #255	; 0xff
 8003186:	d90e      	bls.n	80031a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	22ff      	movs	r2, #255	; 0xff
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	b2da      	uxtb	r2, r3
 8003194:	8979      	ldrh	r1, [r7, #10]
 8003196:	4b51      	ldr	r3, [pc, #324]	; (80032dc <HAL_I2C_Master_Transmit+0x1e0>)
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fa6c 	bl	800367c <I2C_TransferConfig>
 80031a4:	e06c      	b.n	8003280 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	8979      	ldrh	r1, [r7, #10]
 80031b8:	4b48      	ldr	r3, [pc, #288]	; (80032dc <HAL_I2C_Master_Transmit+0x1e0>)
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fa5b 	bl	800367c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80031c6:	e05b      	b.n	8003280 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	6a39      	ldr	r1, [r7, #32]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f8ed 	bl	80033ac <I2C_WaitOnTXISFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e07b      	b.n	80032d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d034      	beq.n	8003280 <HAL_I2C_Master_Transmit+0x184>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d130      	bne.n	8003280 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	2200      	movs	r2, #0
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f87f 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e04d      	b.n	80032d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	2bff      	cmp	r3, #255	; 0xff
 8003240:	d90e      	bls.n	8003260 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	b2da      	uxtb	r2, r3
 800324e:	8979      	ldrh	r1, [r7, #10]
 8003250:	2300      	movs	r3, #0
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fa0f 	bl	800367c <I2C_TransferConfig>
 800325e:	e00f      	b.n	8003280 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	b2da      	uxtb	r2, r3
 8003270:	8979      	ldrh	r1, [r7, #10]
 8003272:	2300      	movs	r3, #0
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f9fe 	bl	800367c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d19e      	bne.n	80031c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	6a39      	ldr	r1, [r7, #32]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f8cc 	bl	800342c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e01a      	b.n	80032d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2220      	movs	r2, #32
 80032a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_I2C_Master_Transmit+0x1e4>)
 80032b2:	400b      	ands	r3, r1
 80032b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	80002000 	.word	0x80002000
 80032e0:	fe00e800 	.word	0xfe00e800

080032e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d103      	bne.n	8003302 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2200      	movs	r2, #0
 8003300:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d007      	beq.n	8003320 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	619a      	str	r2, [r3, #24]
  }
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800333c:	e022      	b.n	8003384 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d01e      	beq.n	8003384 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7ff fb13 	bl	8002970 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d113      	bne.n	8003384 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e00f      	b.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	4013      	ands	r3, r2
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	429a      	cmp	r2, r3
 8003392:	bf0c      	ite	eq
 8003394:	2301      	moveq	r3, #1
 8003396:	2300      	movne	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d0cd      	beq.n	800333e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033b8:	e02c      	b.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f870 	bl	80034a4 <I2C_IsErrorOccurred>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e02a      	b.n	8003424 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d01e      	beq.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d6:	f7ff facb 	bl	8002970 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d113      	bne.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e007      	b.n	8003424 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d1cb      	bne.n	80033ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003438:	e028      	b.n	800348c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f830 	bl	80034a4 <I2C_IsErrorOccurred>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e026      	b.n	800349c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344e:	f7ff fa8f 	bl	8002970 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d113      	bne.n	800348c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e007      	b.n	800349c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b20      	cmp	r3, #32
 8003498:	d1cf      	bne.n	800343a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d075      	beq.n	80035bc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2210      	movs	r2, #16
 80034d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034d8:	e056      	b.n	8003588 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d052      	beq.n	8003588 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7ff fa45 	bl	8002970 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_IsErrorOccurred+0x54>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d147      	bne.n	8003588 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003502:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800350a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351a:	d12e      	bne.n	800357a <I2C_IsErrorOccurred+0xd6>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003522:	d02a      	beq.n	800357a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	2b20      	cmp	r3, #32
 8003528:	d027      	beq.n	800357a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003538:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800353a:	f7ff fa19 	bl	8002970 <HAL_GetTick>
 800353e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003540:	e01b      	b.n	800357a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003542:	f7ff fa15 	bl	8002970 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b19      	cmp	r3, #25
 800354e:	d914      	bls.n	800357a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b20      	cmp	r3, #32
 8003586:	d1dc      	bne.n	8003542 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b20      	cmp	r3, #32
 8003594:	d003      	beq.n	800359e <I2C_IsErrorOccurred+0xfa>
 8003596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800359a:	2b00      	cmp	r3, #0
 800359c:	d09d      	beq.n	80034da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800359e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d103      	bne.n	80035ae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2220      	movs	r2, #32
 80035ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f043 0308 	orr.w	r3, r3, #8
 80035f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003622:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800362a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01c      	beq.n	800366c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f7ff fe56 	bl	80032e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6859      	ldr	r1, [r3, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <I2C_IsErrorOccurred+0x1d4>)
 8003644:	400b      	ands	r3, r1
 8003646:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	431a      	orrs	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800366c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003670:	4618      	mov	r0, r3
 8003672:	3728      	adds	r7, #40	; 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	fe00e800 	.word	0xfe00e800

0800367c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	817b      	strh	r3, [r7, #10]
 800368a:	4613      	mov	r3, r2
 800368c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800368e:	897b      	ldrh	r3, [r7, #10]
 8003690:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003694:	7a7b      	ldrb	r3, [r7, #9]
 8003696:	041b      	lsls	r3, r3, #16
 8003698:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800369c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	0d5b      	lsrs	r3, r3, #21
 80036b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <I2C_TransferConfig+0x60>)
 80036bc:	430b      	orrs	r3, r1
 80036be:	43db      	mvns	r3, r3
 80036c0:	ea02 0103 	and.w	r1, r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	03ff63ff 	.word	0x03ff63ff

080036e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d138      	bne.n	8003768 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003700:	2302      	movs	r3, #2
 8003702:	e032      	b.n	800376a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	; 0x24
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003732:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e000      	b.n	800376a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003776:	b480      	push	{r7}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b20      	cmp	r3, #32
 800378a:	d139      	bne.n	8003800 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003796:	2302      	movs	r3, #2
 8003798:	e033      	b.n	8003802 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2224      	movs	r2, #36	; 0x24
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003800:	2302      	movs	r3, #2
  }
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <HAL_PWREx_GetVoltageRange+0x18>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40007000 	.word	0x40007000

0800382c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800383a:	d130      	bne.n	800389e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800383c:	4b23      	ldr	r3, [pc, #140]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003848:	d038      	beq.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003852:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003854:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003858:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2232      	movs	r2, #50	; 0x32
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	0c9b      	lsrs	r3, r3, #18
 800386c:	3301      	adds	r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003870:	e002      	b.n	8003878 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3b01      	subs	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003884:	d102      	bne.n	800388c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f2      	bne.n	8003872 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003898:	d110      	bne.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e00f      	b.n	80038be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038aa:	d007      	beq.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038b4:	4a05      	ldr	r2, [pc, #20]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40007000 	.word	0x40007000
 80038d0:	2000003c 	.word	0x2000003c
 80038d4:	431bde83 	.word	0x431bde83

080038d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e3ca      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ea:	4b97      	ldr	r3, [pc, #604]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f4:	4b94      	ldr	r3, [pc, #592]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80e4 	beq.w	8003ad4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <HAL_RCC_OscConfig+0x4a>
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b0c      	cmp	r3, #12
 8003916:	f040 808b 	bne.w	8003a30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 8087 	bne.w	8003a30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003922:	4b89      	ldr	r3, [pc, #548]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_RCC_OscConfig+0x62>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e3a2      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	4b82      	ldr	r3, [pc, #520]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <HAL_RCC_OscConfig+0x7c>
 800394a:	4b7f      	ldr	r3, [pc, #508]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003952:	e005      	b.n	8003960 <HAL_RCC_OscConfig+0x88>
 8003954:	4b7c      	ldr	r3, [pc, #496]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003960:	4293      	cmp	r3, r2
 8003962:	d223      	bcs.n	80039ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fd55 	bl	8004418 <RCC_SetFlashLatencyFromMSIRange>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e383      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003978:	4b73      	ldr	r3, [pc, #460]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a72      	ldr	r2, [pc, #456]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 800397e:	f043 0308 	orr.w	r3, r3, #8
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b70      	ldr	r3, [pc, #448]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	496d      	ldr	r1, [pc, #436]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003996:	4b6c      	ldr	r3, [pc, #432]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	4968      	ldr	r1, [pc, #416]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	604b      	str	r3, [r1, #4]
 80039aa:	e025      	b.n	80039f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ac:	4b66      	ldr	r3, [pc, #408]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a65      	ldr	r2, [pc, #404]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039b2:	f043 0308 	orr.w	r3, r3, #8
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	4b63      	ldr	r3, [pc, #396]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4960      	ldr	r1, [pc, #384]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ca:	4b5f      	ldr	r3, [pc, #380]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	495b      	ldr	r1, [pc, #364]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d109      	bne.n	80039f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fd15 	bl	8004418 <RCC_SetFlashLatencyFromMSIRange>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e343      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039f8:	f000 fc4a 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b52      	ldr	r3, [pc, #328]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	4950      	ldr	r1, [pc, #320]	; (8003b4c <HAL_RCC_OscConfig+0x274>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
 8003a14:	4a4e      	ldr	r2, [pc, #312]	; (8003b50 <HAL_RCC_OscConfig+0x278>)
 8003a16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a18:	4b4e      	ldr	r3, [pc, #312]	; (8003b54 <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe ff57 	bl	80028d0 <HAL_InitTick>
 8003a22:	4603      	mov	r3, r0
 8003a24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d052      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	e327      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d032      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a38:	4b43      	ldr	r3, [pc, #268]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a42      	ldr	r2, [pc, #264]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a44:	f7fe ff94 	bl	8002970 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a4c:	f7fe ff90 	bl	8002970 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e310      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a5e:	4b3a      	ldr	r3, [pc, #232]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a6a:	4b37      	ldr	r3, [pc, #220]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a36      	ldr	r2, [pc, #216]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a70:	f043 0308 	orr.w	r3, r3, #8
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4931      	ldr	r1, [pc, #196]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a88:	4b2f      	ldr	r3, [pc, #188]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	492c      	ldr	r1, [pc, #176]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
 8003a9c:	e01a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a9e:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe ff61 	bl	8002970 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab2:	f7fe ff5d 	bl	8002970 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e2dd      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ac4:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x1da>
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ad2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d074      	beq.n	8003bca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d005      	beq.n	8003af2 <HAL_RCC_OscConfig+0x21a>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	d10e      	bne.n	8003b0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d10b      	bne.n	8003b0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d064      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x2f0>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d160      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e2ba      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x24a>
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	e026      	b.n	8003b70 <HAL_RCC_OscConfig+0x298>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b2a:	d115      	bne.n	8003b58 <HAL_RCC_OscConfig+0x280>
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a05      	ldr	r2, [pc, #20]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a02      	ldr	r2, [pc, #8]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e014      	b.n	8003b70 <HAL_RCC_OscConfig+0x298>
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	08009b10 	.word	0x08009b10
 8003b50:	2000003c 	.word	0x2000003c
 8003b54:	20000040 	.word	0x20000040
 8003b58:	4ba0      	ldr	r3, [pc, #640]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a9f      	ldr	r2, [pc, #636]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4b9d      	ldr	r3, [pc, #628]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a9c      	ldr	r2, [pc, #624]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe fefa 	bl	8002970 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fe fef6 	bl	8002970 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e276      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b92:	4b92      	ldr	r3, [pc, #584]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x2a8>
 8003b9e:	e014      	b.n	8003bca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fe fee6 	bl	8002970 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fe fee2 	bl	8002970 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e262      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bba:	4b88      	ldr	r3, [pc, #544]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x2d0>
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d060      	beq.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_OscConfig+0x310>
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d119      	bne.n	8003c16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d116      	bne.n	8003c16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be8:	4b7c      	ldr	r3, [pc, #496]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_OscConfig+0x328>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e23f      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b76      	ldr	r3, [pc, #472]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	4973      	ldr	r1, [pc, #460]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c14:	e040      	b.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d023      	beq.n	8003c66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c1e:	4b6f      	ldr	r3, [pc, #444]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6e      	ldr	r2, [pc, #440]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fe fea1 	bl	8002970 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fe fe9d 	bl	8002970 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e21d      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c44:	4b65      	ldr	r3, [pc, #404]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b62      	ldr	r3, [pc, #392]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	495f      	ldr	r1, [pc, #380]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
 8003c64:	e018      	b.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c66:	4b5d      	ldr	r3, [pc, #372]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5c      	ldr	r2, [pc, #368]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fe fe7d 	bl	8002970 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7fe fe79 	bl	8002970 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e1f9      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c8c:	4b53      	ldr	r3, [pc, #332]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d03c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01c      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cac:	4b4b      	ldr	r3, [pc, #300]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb2:	4a4a      	ldr	r2, [pc, #296]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fe fe58 	bl	8002970 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7fe fe54 	bl	8002970 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1d4      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cd6:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ef      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x3ec>
 8003ce4:	e01b      	b.n	8003d1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cec:	4a3b      	ldr	r2, [pc, #236]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fe fe3b 	bl	8002970 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fe fe37 	bl	8002970 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1b7      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d10:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ef      	bne.n	8003cfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80a6 	beq.w	8003e78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d30:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d46:	6593      	str	r3, [r2, #88]	; 0x58
 8003d48:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d54:	2301      	movs	r3, #1
 8003d56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d58:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d118      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d64:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d70:	f7fe fdfe 	bl	8002970 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fe fdfa 	bl	8002970 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e17a      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d108      	bne.n	8003db0 <HAL_RCC_OscConfig+0x4d8>
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dae:	e029      	b.n	8003e04 <HAL_RCC_OscConfig+0x52c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d115      	bne.n	8003de4 <HAL_RCC_OscConfig+0x50c>
 8003db8:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	4a07      	ldr	r2, [pc, #28]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dc0:	f043 0304 	orr.w	r3, r3, #4
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	4a03      	ldr	r2, [pc, #12]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dd8:	e014      	b.n	8003e04 <HAL_RCC_OscConfig+0x52c>
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40007000 	.word	0x40007000
 8003de4:	4b9c      	ldr	r3, [pc, #624]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	4a9b      	ldr	r2, [pc, #620]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df4:	4b98      	ldr	r3, [pc, #608]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	4a97      	ldr	r2, [pc, #604]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d016      	beq.n	8003e3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fe fdb0 	bl	8002970 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fe fdac 	bl	8002970 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e12a      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2a:	4b8b      	ldr	r3, [pc, #556]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ed      	beq.n	8003e14 <HAL_RCC_OscConfig+0x53c>
 8003e38:	e015      	b.n	8003e66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fd99 	bl	8002970 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fe fd95 	bl	8002970 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e113      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e58:	4b7f      	ldr	r3, [pc, #508]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ed      	bne.n	8003e42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e66:	7ffb      	ldrb	r3, [r7, #31]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b7a      	ldr	r3, [pc, #488]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	4a79      	ldr	r2, [pc, #484]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80fe 	beq.w	800407e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	f040 80d0 	bne.w	800402c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e8c:	4b72      	ldr	r3, [pc, #456]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f003 0203 	and.w	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d130      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d127      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d11f      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ecc:	2a07      	cmp	r2, #7
 8003ece:	bf14      	ite	ne
 8003ed0:	2201      	movne	r2, #1
 8003ed2:	2200      	moveq	r2, #0
 8003ed4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d113      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d109      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	3b01      	subs	r3, #1
 8003efc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d06e      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	d069      	beq.n	8003fdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f08:	4b53      	ldr	r3, [pc, #332]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d105      	bne.n	8003f20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f14:	4b50      	ldr	r3, [pc, #320]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0ad      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f24:	4b4c      	ldr	r3, [pc, #304]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a4b      	ldr	r2, [pc, #300]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f30:	f7fe fd1e 	bl	8002970 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fe fd1a 	bl	8002970 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e09a      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4a:	4b43      	ldr	r3, [pc, #268]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f56:	4b40      	ldr	r3, [pc, #256]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	4b40      	ldr	r3, [pc, #256]	; (800405c <HAL_RCC_OscConfig+0x784>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f66:	3a01      	subs	r2, #1
 8003f68:	0112      	lsls	r2, r2, #4
 8003f6a:	4311      	orrs	r1, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f70:	0212      	lsls	r2, r2, #8
 8003f72:	4311      	orrs	r1, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f78:	0852      	lsrs	r2, r2, #1
 8003f7a:	3a01      	subs	r2, #1
 8003f7c:	0552      	lsls	r2, r2, #21
 8003f7e:	4311      	orrs	r1, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f84:	0852      	lsrs	r2, r2, #1
 8003f86:	3a01      	subs	r2, #1
 8003f88:	0652      	lsls	r2, r2, #25
 8003f8a:	4311      	orrs	r1, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f90:	0912      	lsrs	r2, r2, #4
 8003f92:	0452      	lsls	r2, r2, #17
 8003f94:	430a      	orrs	r2, r1
 8003f96:	4930      	ldr	r1, [pc, #192]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b2e      	ldr	r3, [pc, #184]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a2d      	ldr	r2, [pc, #180]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a2a      	ldr	r2, [pc, #168]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fb4:	f7fe fcdc 	bl	8002970 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fe fcd8 	bl	8002970 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e058      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	4b22      	ldr	r3, [pc, #136]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fda:	e050      	b.n	800407e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e04f      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d148      	bne.n	800407e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fec:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ff8:	4b17      	ldr	r3, [pc, #92]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4a16      	ldr	r2, [pc, #88]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004002:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004004:	f7fe fcb4 	bl	8002970 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7fe fcb0 	bl	8002970 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e030      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401e:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x734>
 800402a:	e028      	b.n	800407e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d023      	beq.n	800407a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a08      	ldr	r2, [pc, #32]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8004038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800403c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fe fc97 	bl	8002970 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004044:	e00c      	b.n	8004060 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004046:	f7fe fc93 	bl	8002970 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d905      	bls.n	8004060 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e013      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
 8004058:	40021000 	.word	0x40021000
 800405c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_RCC_OscConfig+0x7b0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1ec      	bne.n	8004046 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_RCC_OscConfig+0x7b0>)
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	4905      	ldr	r1, [pc, #20]	; (8004088 <HAL_RCC_OscConfig+0x7b0>)
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_OscConfig+0x7b4>)
 8004074:	4013      	ands	r3, r2
 8004076:	60cb      	str	r3, [r1, #12]
 8004078:	e001      	b.n	800407e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3720      	adds	r7, #32
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40021000 	.word	0x40021000
 800408c:	feeefffc 	.word	0xfeeefffc

08004090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0e7      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a4:	4b75      	ldr	r3, [pc, #468]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d910      	bls.n	80040d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b72      	ldr	r3, [pc, #456]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 0207 	bic.w	r2, r3, #7
 80040ba:	4970      	ldr	r1, [pc, #448]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b6e      	ldr	r3, [pc, #440]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0cf      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d010      	beq.n	8004102 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	4b66      	ldr	r3, [pc, #408]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d908      	bls.n	8004102 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f0:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4960      	ldr	r1, [pc, #384]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d04c      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004116:	4b5a      	ldr	r3, [pc, #360]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d121      	bne.n	8004166 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e0a6      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800412e:	4b54      	ldr	r3, [pc, #336]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d115      	bne.n	8004166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e09a      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004146:	4b4e      	ldr	r3, [pc, #312]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e08e      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004156:	4b4a      	ldr	r3, [pc, #296]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e086      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004166:	4b46      	ldr	r3, [pc, #280]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f023 0203 	bic.w	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4943      	ldr	r1, [pc, #268]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004174:	4313      	orrs	r3, r2
 8004176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004178:	f7fe fbfa 	bl	8002970 <HAL_GetTick>
 800417c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	e00a      	b.n	8004196 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004180:	f7fe fbf6 	bl	8002970 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e06e      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	4b3a      	ldr	r3, [pc, #232]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 020c 	and.w	r2, r3, #12
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d1eb      	bne.n	8004180 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d010      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	4b31      	ldr	r3, [pc, #196]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d208      	bcs.n	80041d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	492b      	ldr	r1, [pc, #172]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d6:	4b29      	ldr	r3, [pc, #164]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d210      	bcs.n	8004206 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f023 0207 	bic.w	r2, r3, #7
 80041ec:	4923      	ldr	r1, [pc, #140]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f4:	4b21      	ldr	r3, [pc, #132]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e036      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004212:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	4918      	ldr	r1, [pc, #96]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004230:	4b13      	ldr	r3, [pc, #76]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4910      	ldr	r1, [pc, #64]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	4313      	orrs	r3, r2
 8004242:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004244:	f000 f824 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	091b      	lsrs	r3, r3, #4
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	490b      	ldr	r1, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
 8004260:	4a09      	ldr	r2, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004262:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1fc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe fb31 	bl	80028d0 <HAL_InitTick>
 800426e:	4603      	mov	r3, r0
 8004270:	72fb      	strb	r3, [r7, #11]

  return status;
 8004272:	7afb      	ldrb	r3, [r7, #11]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40022000 	.word	0x40022000
 8004280:	40021000 	.word	0x40021000
 8004284:	08009b10 	.word	0x08009b10
 8004288:	2000003c 	.word	0x2000003c
 800428c:	20000040 	.word	0x20000040

08004290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	; 0x24
 8004294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800429e:	4b3e      	ldr	r3, [pc, #248]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a8:	4b3b      	ldr	r3, [pc, #236]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x34>
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d121      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d11e      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042c4:	4b34      	ldr	r3, [pc, #208]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e005      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042e0:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042ec:	4a2b      	ldr	r2, [pc, #172]	; (800439c <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10d      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004300:	e00a      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d102      	bne.n	800430e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e004      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d101      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004314:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004316:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d134      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0xa6>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d003      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0xac>
 8004334:	e005      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004338:	617b      	str	r3, [r7, #20]
      break;
 800433a:	e005      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800433c:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800433e:	617b      	str	r3, [r7, #20]
      break;
 8004340:	e002      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	617b      	str	r3, [r7, #20]
      break;
 8004346:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	3301      	adds	r3, #1
 8004354:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	fb03 f202 	mul.w	r2, r3, r2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	0e5b      	lsrs	r3, r3, #25
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	3301      	adds	r3, #1
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004388:	69bb      	ldr	r3, [r7, #24]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3724      	adds	r7, #36	; 0x24
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	08009b28 	.word	0x08009b28
 80043a0:	00f42400 	.word	0x00f42400
 80043a4:	007a1200 	.word	0x007a1200

080043a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	2000003c 	.word	0x2000003c

080043c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043c4:	f7ff fff0 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	4904      	ldr	r1, [pc, #16]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40021000 	.word	0x40021000
 80043e8:	08009b20 	.word	0x08009b20

080043ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043f0:	f7ff ffda 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	0adb      	lsrs	r3, r3, #11
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	4904      	ldr	r1, [pc, #16]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004402:	5ccb      	ldrb	r3, [r1, r3]
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800440c:	4618      	mov	r0, r3
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021000 	.word	0x40021000
 8004414:	08009b20 	.word	0x08009b20

08004418 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004420:	2300      	movs	r3, #0
 8004422:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004424:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004430:	f7ff f9ee 	bl	8003810 <HAL_PWREx_GetVoltageRange>
 8004434:	6178      	str	r0, [r7, #20]
 8004436:	e014      	b.n	8004462 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6593      	str	r3, [r2, #88]	; 0x58
 8004444:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004450:	f7ff f9de 	bl	8003810 <HAL_PWREx_GetVoltageRange>
 8004454:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004456:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445a:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004460:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004468:	d10b      	bne.n	8004482 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d919      	bls.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2ba0      	cmp	r3, #160	; 0xa0
 8004474:	d902      	bls.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004476:	2302      	movs	r3, #2
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	e013      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800447c:	2301      	movs	r3, #1
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	e010      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d902      	bls.n	800448e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004488:	2303      	movs	r3, #3
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e00a      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d102      	bne.n	800449a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004494:	2302      	movs	r3, #2
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	e004      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b70      	cmp	r3, #112	; 0x70
 800449e:	d101      	bne.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044a0:	2301      	movs	r3, #1
 80044a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 0207 	bic.w	r2, r3, #7
 80044ac:	4909      	ldr	r1, [pc, #36]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044b4:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d001      	beq.n	80044c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40022000 	.word	0x40022000

080044d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044e0:	2300      	movs	r3, #0
 80044e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044e4:	2300      	movs	r3, #0
 80044e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d041      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044fc:	d02a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004502:	d824      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004504:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004508:	d008      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800450a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800450e:	d81e      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004518:	d010      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800451a:	e018      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800451c:	4b86      	ldr	r3, [pc, #536]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4a85      	ldr	r2, [pc, #532]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004526:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004528:	e015      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3304      	adds	r3, #4
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fabb 	bl	8004aac <RCCEx_PLLSAI1_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800453a:	e00c      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3320      	adds	r3, #32
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fba6 	bl	8004c94 <RCCEx_PLLSAI2_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800454c:	e003      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	74fb      	strb	r3, [r7, #19]
      break;
 8004552:	e000      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800455c:	4b76      	ldr	r3, [pc, #472]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800456a:	4973      	ldr	r1, [pc, #460]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004572:	e001      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d041      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004588:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800458c:	d02a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800458e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004592:	d824      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004598:	d008      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800459a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800459e:	d81e      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045a8:	d010      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045aa:	e018      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045ac:	4b62      	ldr	r3, [pc, #392]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4a61      	ldr	r2, [pc, #388]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045b8:	e015      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fa73 	bl	8004aac <RCCEx_PLLSAI1_Config>
 80045c6:	4603      	mov	r3, r0
 80045c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045ca:	e00c      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3320      	adds	r3, #32
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fb5e 	bl	8004c94 <RCCEx_PLLSAI2_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045dc:	e003      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	74fb      	strb	r3, [r7, #19]
      break;
 80045e2:	e000      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e6:	7cfb      	ldrb	r3, [r7, #19]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045ec:	4b52      	ldr	r3, [pc, #328]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045fa:	494f      	ldr	r1, [pc, #316]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004602:	e001      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80a0 	beq.w	8004756 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004616:	2300      	movs	r3, #0
 8004618:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800461a:	4b47      	ldr	r3, [pc, #284]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004630:	4b41      	ldr	r3, [pc, #260]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	4a40      	ldr	r2, [pc, #256]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	6593      	str	r3, [r2, #88]	; 0x58
 800463c:	4b3e      	ldr	r3, [pc, #248]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004648:	2301      	movs	r3, #1
 800464a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464c:	4b3b      	ldr	r3, [pc, #236]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a3a      	ldr	r2, [pc, #232]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004656:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004658:	f7fe f98a 	bl	8002970 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800465e:	e009      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004660:	f7fe f986 	bl	8002970 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d902      	bls.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	74fb      	strb	r3, [r7, #19]
        break;
 8004672:	e005      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004674:	4b31      	ldr	r3, [pc, #196]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0ef      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d15c      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004686:	4b2c      	ldr	r3, [pc, #176]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004690:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01f      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d019      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a4:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b0:	4b21      	ldr	r3, [pc, #132]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	4a20      	ldr	r2, [pc, #128]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fe f945 	bl	8002970 <HAL_GetTick>
 80046e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e8:	e00b      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fe f941 	bl	8002970 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d902      	bls.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004700:	e006      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004702:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ec      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10c      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004726:	4904      	ldr	r1, [pc, #16]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800472e:	e009      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
 8004734:	e006      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004744:	7c7b      	ldrb	r3, [r7, #17]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d105      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474a:	4b9e      	ldr	r3, [pc, #632]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	4a9d      	ldr	r2, [pc, #628]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004754:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004762:	4b98      	ldr	r3, [pc, #608]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	f023 0203 	bic.w	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	4994      	ldr	r1, [pc, #592]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004784:	4b8f      	ldr	r3, [pc, #572]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478a:	f023 020c 	bic.w	r2, r3, #12
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	498c      	ldr	r1, [pc, #560]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047a6:	4b87      	ldr	r3, [pc, #540]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	4983      	ldr	r1, [pc, #524]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047c8:	4b7e      	ldr	r3, [pc, #504]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	497b      	ldr	r1, [pc, #492]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047ea:	4b76      	ldr	r3, [pc, #472]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f8:	4972      	ldr	r1, [pc, #456]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800480c:	4b6d      	ldr	r3, [pc, #436]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	496a      	ldr	r1, [pc, #424]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800482e:	4b65      	ldr	r3, [pc, #404]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483c:	4961      	ldr	r1, [pc, #388]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004850:	4b5c      	ldr	r3, [pc, #368]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485e:	4959      	ldr	r1, [pc, #356]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004872:	4b54      	ldr	r3, [pc, #336]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	4950      	ldr	r1, [pc, #320]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004894:	4b4b      	ldr	r3, [pc, #300]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	4948      	ldr	r1, [pc, #288]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048b6:	4b43      	ldr	r3, [pc, #268]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	493f      	ldr	r1, [pc, #252]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d028      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048d8:	4b3a      	ldr	r3, [pc, #232]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e6:	4937      	ldr	r1, [pc, #220]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048f6:	d106      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f8:	4b32      	ldr	r3, [pc, #200]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4a31      	ldr	r2, [pc, #196]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004902:	60d3      	str	r3, [r2, #12]
 8004904:	e011      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800490a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800490e:	d10c      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	2101      	movs	r1, #1
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f8c8 	bl	8004aac <RCCEx_PLLSAI1_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d028      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004936:	4b23      	ldr	r3, [pc, #140]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	491f      	ldr	r1, [pc, #124]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004954:	d106      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004956:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	4a1a      	ldr	r2, [pc, #104]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004960:	60d3      	str	r3, [r2, #12]
 8004962:	e011      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800496c:	d10c      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3304      	adds	r3, #4
 8004972:	2101      	movs	r1, #1
 8004974:	4618      	mov	r0, r3
 8004976:	f000 f899 	bl	8004aac <RCCEx_PLLSAI1_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d02b      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a2:	4908      	ldr	r1, [pc, #32]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b2:	d109      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a02      	ldr	r2, [pc, #8]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049be:	60d3      	str	r3, [r2, #12]
 80049c0:	e014      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049d0:	d10c      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2101      	movs	r1, #1
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 f867 	bl	8004aac <RCCEx_PLLSAI1_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d02f      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f8:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a06:	4928      	ldr	r1, [pc, #160]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a16:	d10d      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 f844 	bl	8004aac <RCCEx_PLLSAI1_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a28:	7cfb      	ldrb	r3, [r7, #19]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d014      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a2e:	7cfb      	ldrb	r3, [r7, #19]
 8004a30:	74bb      	strb	r3, [r7, #18]
 8004a32:	e011      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3320      	adds	r3, #32
 8004a42:	2102      	movs	r1, #2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f925 	bl	8004c94 <RCCEx_PLLSAI2_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a64:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a72:	490d      	ldr	r1, [pc, #52]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a86:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a96:	4904      	ldr	r1, [pc, #16]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000

08004aac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aba:	4b75      	ldr	r3, [pc, #468]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d018      	beq.n	8004af8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ac6:	4b72      	ldr	r3, [pc, #456]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f003 0203 	and.w	r2, r3, #3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d10d      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
       ||
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ade:	4b6c      	ldr	r3, [pc, #432]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
       ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d047      	beq.n	8004b82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
 8004af6:	e044      	b.n	8004b82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d018      	beq.n	8004b32 <RCCEx_PLLSAI1_Config+0x86>
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d825      	bhi.n	8004b50 <RCCEx_PLLSAI1_Config+0xa4>
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d002      	beq.n	8004b0e <RCCEx_PLLSAI1_Config+0x62>
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d009      	beq.n	8004b20 <RCCEx_PLLSAI1_Config+0x74>
 8004b0c:	e020      	b.n	8004b50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b0e:	4b60      	ldr	r3, [pc, #384]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d11d      	bne.n	8004b56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b1e:	e01a      	b.n	8004b56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b20:	4b5b      	ldr	r3, [pc, #364]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d116      	bne.n	8004b5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b30:	e013      	b.n	8004b5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b32:	4b57      	ldr	r3, [pc, #348]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10f      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b3e:	4b54      	ldr	r3, [pc, #336]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b4e:	e006      	b.n	8004b5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      break;
 8004b54:	e004      	b.n	8004b60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b56:	bf00      	nop
 8004b58:	e002      	b.n	8004b60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e000      	b.n	8004b60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10d      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b66:	4b4a      	ldr	r3, [pc, #296]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6819      	ldr	r1, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	4944      	ldr	r1, [pc, #272]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d17d      	bne.n	8004c84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b88:	4b41      	ldr	r3, [pc, #260]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a40      	ldr	r2, [pc, #256]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b94:	f7fd feec 	bl	8002970 <HAL_GetTick>
 8004b98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b9a:	e009      	b.n	8004bb0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b9c:	f7fd fee8 	bl	8002970 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d902      	bls.n	8004bb0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	73fb      	strb	r3, [r7, #15]
        break;
 8004bae:	e005      	b.n	8004bbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bb0:	4b37      	ldr	r3, [pc, #220]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1ef      	bne.n	8004b9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d160      	bne.n	8004c84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d111      	bne.n	8004bec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bc8:	4b31      	ldr	r3, [pc, #196]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6892      	ldr	r2, [r2, #8]
 8004bd8:	0211      	lsls	r1, r2, #8
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68d2      	ldr	r2, [r2, #12]
 8004bde:	0912      	lsrs	r2, r2, #4
 8004be0:	0452      	lsls	r2, r2, #17
 8004be2:	430a      	orrs	r2, r1
 8004be4:	492a      	ldr	r1, [pc, #168]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	610b      	str	r3, [r1, #16]
 8004bea:	e027      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d112      	bne.n	8004c18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bf2:	4b27      	ldr	r3, [pc, #156]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6892      	ldr	r2, [r2, #8]
 8004c02:	0211      	lsls	r1, r2, #8
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6912      	ldr	r2, [r2, #16]
 8004c08:	0852      	lsrs	r2, r2, #1
 8004c0a:	3a01      	subs	r2, #1
 8004c0c:	0552      	lsls	r2, r2, #21
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	491f      	ldr	r1, [pc, #124]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	610b      	str	r3, [r1, #16]
 8004c16:	e011      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c18:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6892      	ldr	r2, [r2, #8]
 8004c28:	0211      	lsls	r1, r2, #8
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6952      	ldr	r2, [r2, #20]
 8004c2e:	0852      	lsrs	r2, r2, #1
 8004c30:	3a01      	subs	r2, #1
 8004c32:	0652      	lsls	r2, r2, #25
 8004c34:	430a      	orrs	r2, r1
 8004c36:	4916      	ldr	r1, [pc, #88]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c3c:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fd fe92 	bl	8002970 <HAL_GetTick>
 8004c4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c4e:	e009      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c50:	f7fd fe8e 	bl	8002970 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d902      	bls.n	8004c64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	73fb      	strb	r3, [r7, #15]
          break;
 8004c62:	e005      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0ef      	beq.n	8004c50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	4904      	ldr	r1, [pc, #16]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000

08004c94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ca2:	4b6a      	ldr	r3, [pc, #424]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d018      	beq.n	8004ce0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cae:	4b67      	ldr	r3, [pc, #412]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0203 	and.w	r2, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d10d      	bne.n	8004cda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
       ||
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cc6:	4b61      	ldr	r3, [pc, #388]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
       ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d047      	beq.n	8004d6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
 8004cde:	e044      	b.n	8004d6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d018      	beq.n	8004d1a <RCCEx_PLLSAI2_Config+0x86>
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d825      	bhi.n	8004d38 <RCCEx_PLLSAI2_Config+0xa4>
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d002      	beq.n	8004cf6 <RCCEx_PLLSAI2_Config+0x62>
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d009      	beq.n	8004d08 <RCCEx_PLLSAI2_Config+0x74>
 8004cf4:	e020      	b.n	8004d38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cf6:	4b55      	ldr	r3, [pc, #340]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d11d      	bne.n	8004d3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d06:	e01a      	b.n	8004d3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d08:	4b50      	ldr	r3, [pc, #320]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d116      	bne.n	8004d42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d18:	e013      	b.n	8004d42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d1a:	4b4c      	ldr	r3, [pc, #304]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d26:	4b49      	ldr	r3, [pc, #292]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d36:	e006      	b.n	8004d46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3c:	e004      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e002      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d46:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10d      	bne.n	8004d6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d4e:	4b3f      	ldr	r3, [pc, #252]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6819      	ldr	r1, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	430b      	orrs	r3, r1
 8004d64:	4939      	ldr	r1, [pc, #228]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d167      	bne.n	8004e40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d70:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a35      	ldr	r2, [pc, #212]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7c:	f7fd fdf8 	bl	8002970 <HAL_GetTick>
 8004d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d82:	e009      	b.n	8004d98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d84:	f7fd fdf4 	bl	8002970 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d902      	bls.n	8004d98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	73fb      	strb	r3, [r7, #15]
        break;
 8004d96:	e005      	b.n	8004da4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d98:	4b2c      	ldr	r3, [pc, #176]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1ef      	bne.n	8004d84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d14a      	bne.n	8004e40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d111      	bne.n	8004dd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004db0:	4b26      	ldr	r3, [pc, #152]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6892      	ldr	r2, [r2, #8]
 8004dc0:	0211      	lsls	r1, r2, #8
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68d2      	ldr	r2, [r2, #12]
 8004dc6:	0912      	lsrs	r2, r2, #4
 8004dc8:	0452      	lsls	r2, r2, #17
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	491f      	ldr	r1, [pc, #124]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	614b      	str	r3, [r1, #20]
 8004dd2:	e011      	b.n	8004df8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dd4:	4b1d      	ldr	r3, [pc, #116]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ddc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6892      	ldr	r2, [r2, #8]
 8004de4:	0211      	lsls	r1, r2, #8
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6912      	ldr	r2, [r2, #16]
 8004dea:	0852      	lsrs	r2, r2, #1
 8004dec:	3a01      	subs	r2, #1
 8004dee:	0652      	lsls	r2, r2, #25
 8004df0:	430a      	orrs	r2, r1
 8004df2:	4916      	ldr	r1, [pc, #88]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004df8:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e04:	f7fd fdb4 	bl	8002970 <HAL_GetTick>
 8004e08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e0a:	e009      	b.n	8004e20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e0c:	f7fd fdb0 	bl	8002970 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d902      	bls.n	8004e20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e1e:	e005      	b.n	8004e2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ef      	beq.n	8004e0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e32:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	4904      	ldr	r1, [pc, #16]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40021000 	.word	0x40021000

08004e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e049      	b.n	8004ef6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fd fb76 	bl	8002568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4610      	mov	r0, r2
 8004e90:	f000 fd5c 	bl	800594c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d001      	beq.n	8004f18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e047      	b.n	8004fa8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a23      	ldr	r2, [pc, #140]	; (8004fb4 <HAL_TIM_Base_Start+0xb4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01d      	beq.n	8004f66 <HAL_TIM_Base_Start+0x66>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f32:	d018      	beq.n	8004f66 <HAL_TIM_Base_Start+0x66>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1f      	ldr	r2, [pc, #124]	; (8004fb8 <HAL_TIM_Base_Start+0xb8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_TIM_Base_Start+0x66>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <HAL_TIM_Base_Start+0xbc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_TIM_Base_Start+0x66>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1c      	ldr	r2, [pc, #112]	; (8004fc0 <HAL_TIM_Base_Start+0xc0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_TIM_Base_Start+0x66>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1b      	ldr	r2, [pc, #108]	; (8004fc4 <HAL_TIM_Base_Start+0xc4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_TIM_Base_Start+0x66>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <HAL_TIM_Base_Start+0xc8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d115      	bne.n	8004f92 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	4b17      	ldr	r3, [pc, #92]	; (8004fcc <HAL_TIM_Base_Start+0xcc>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b06      	cmp	r3, #6
 8004f76:	d015      	beq.n	8004fa4 <HAL_TIM_Base_Start+0xa4>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7e:	d011      	beq.n	8004fa4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f90:	e008      	b.n	8004fa4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	e000      	b.n	8004fa6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800
 8004fc0:	40000c00 	.word	0x40000c00
 8004fc4:	40013400 	.word	0x40013400
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	00010007 	.word	0x00010007

08004fd0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10f      	bne.n	8005008 <HAL_TIM_Base_Stop+0x38>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6a1a      	ldr	r2, [r3, #32]
 8004fee:	f240 4344 	movw	r3, #1092	; 0x444
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d107      	bne.n	8005008 <HAL_TIM_Base_Stop+0x38>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e049      	b.n	80050c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f841 	bl	80050cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3304      	adds	r3, #4
 800505a:	4619      	mov	r1, r3
 800505c:	4610      	mov	r0, r2
 800505e:	f000 fc75 	bl	800594c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d109      	bne.n	8005104 <HAL_TIM_PWM_Start+0x24>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	bf14      	ite	ne
 80050fc:	2301      	movne	r3, #1
 80050fe:	2300      	moveq	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	e03c      	b.n	800517e <HAL_TIM_PWM_Start+0x9e>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b04      	cmp	r3, #4
 8005108:	d109      	bne.n	800511e <HAL_TIM_PWM_Start+0x3e>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	e02f      	b.n	800517e <HAL_TIM_PWM_Start+0x9e>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d109      	bne.n	8005138 <HAL_TIM_PWM_Start+0x58>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	bf14      	ite	ne
 8005130:	2301      	movne	r3, #1
 8005132:	2300      	moveq	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	e022      	b.n	800517e <HAL_TIM_PWM_Start+0x9e>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d109      	bne.n	8005152 <HAL_TIM_PWM_Start+0x72>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	bf14      	ite	ne
 800514a:	2301      	movne	r3, #1
 800514c:	2300      	moveq	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	e015      	b.n	800517e <HAL_TIM_PWM_Start+0x9e>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b10      	cmp	r3, #16
 8005156:	d109      	bne.n	800516c <HAL_TIM_PWM_Start+0x8c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	e008      	b.n	800517e <HAL_TIM_PWM_Start+0x9e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e09c      	b.n	80052c0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0xb6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005194:	e023      	b.n	80051de <HAL_TIM_PWM_Start+0xfe>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b04      	cmp	r3, #4
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0xc6>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a4:	e01b      	b.n	80051de <HAL_TIM_PWM_Start+0xfe>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_PWM_Start+0xd6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b4:	e013      	b.n	80051de <HAL_TIM_PWM_Start+0xfe>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_PWM_Start+0xe6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051c4:	e00b      	b.n	80051de <HAL_TIM_PWM_Start+0xfe>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_PWM_Start+0xf6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d4:	e003      	b.n	80051de <HAL_TIM_PWM_Start+0xfe>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2201      	movs	r2, #1
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 ffba 	bl	8006160 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a35      	ldr	r2, [pc, #212]	; (80052c8 <HAL_TIM_PWM_Start+0x1e8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <HAL_TIM_PWM_Start+0x13e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a34      	ldr	r2, [pc, #208]	; (80052cc <HAL_TIM_PWM_Start+0x1ec>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00e      	beq.n	800521e <HAL_TIM_PWM_Start+0x13e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a32      	ldr	r2, [pc, #200]	; (80052d0 <HAL_TIM_PWM_Start+0x1f0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d009      	beq.n	800521e <HAL_TIM_PWM_Start+0x13e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a31      	ldr	r2, [pc, #196]	; (80052d4 <HAL_TIM_PWM_Start+0x1f4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d004      	beq.n	800521e <HAL_TIM_PWM_Start+0x13e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a2f      	ldr	r2, [pc, #188]	; (80052d8 <HAL_TIM_PWM_Start+0x1f8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d101      	bne.n	8005222 <HAL_TIM_PWM_Start+0x142>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <HAL_TIM_PWM_Start+0x144>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d007      	beq.n	8005238 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005236:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a22      	ldr	r2, [pc, #136]	; (80052c8 <HAL_TIM_PWM_Start+0x1e8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01d      	beq.n	800527e <HAL_TIM_PWM_Start+0x19e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524a:	d018      	beq.n	800527e <HAL_TIM_PWM_Start+0x19e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a22      	ldr	r2, [pc, #136]	; (80052dc <HAL_TIM_PWM_Start+0x1fc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <HAL_TIM_PWM_Start+0x19e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <HAL_TIM_PWM_Start+0x200>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00e      	beq.n	800527e <HAL_TIM_PWM_Start+0x19e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1f      	ldr	r2, [pc, #124]	; (80052e4 <HAL_TIM_PWM_Start+0x204>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d009      	beq.n	800527e <HAL_TIM_PWM_Start+0x19e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a17      	ldr	r2, [pc, #92]	; (80052cc <HAL_TIM_PWM_Start+0x1ec>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <HAL_TIM_PWM_Start+0x19e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <HAL_TIM_PWM_Start+0x1f0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d115      	bne.n	80052aa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <HAL_TIM_PWM_Start+0x208>)
 8005286:	4013      	ands	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b06      	cmp	r3, #6
 800528e:	d015      	beq.n	80052bc <HAL_TIM_PWM_Start+0x1dc>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005296:	d011      	beq.n	80052bc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a8:	e008      	b.n	80052bc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e000      	b.n	80052be <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40013400 	.word	0x40013400
 80052d0:	40014000 	.word	0x40014000
 80052d4:	40014400 	.word	0x40014400
 80052d8:	40014800 	.word	0x40014800
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40000c00 	.word	0x40000c00
 80052e8:	00010007 	.word	0x00010007

080052ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d122      	bne.n	8005348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b02      	cmp	r3, #2
 800530e:	d11b      	bne.n	8005348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0202 	mvn.w	r2, #2
 8005318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 faed 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 8005334:	e005      	b.n	8005342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fadf 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 faf0 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d122      	bne.n	800539c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b04      	cmp	r3, #4
 8005362:	d11b      	bne.n	800539c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0204 	mvn.w	r2, #4
 800536c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fac3 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 8005388:	e005      	b.n	8005396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fab5 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fac6 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d122      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d11b      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0208 	mvn.w	r2, #8
 80053c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2204      	movs	r2, #4
 80053c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa99 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa8b 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fa9c 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d122      	bne.n	8005444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b10      	cmp	r3, #16
 800540a:	d11b      	bne.n	8005444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0210 	mvn.w	r2, #16
 8005414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2208      	movs	r2, #8
 800541a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fa6f 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 8005430:	e005      	b.n	800543e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa61 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fa72 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b01      	cmp	r3, #1
 8005450:	d10e      	bne.n	8005470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d107      	bne.n	8005470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0201 	mvn.w	r2, #1
 8005468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa3b 	bl	80058e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	2b80      	cmp	r3, #128	; 0x80
 800547c:	d10e      	bne.n	800549c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005488:	2b80      	cmp	r3, #128	; 0x80
 800548a:	d107      	bne.n	800549c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 ff1a 	bl	80062d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054aa:	d10e      	bne.n	80054ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	2b80      	cmp	r3, #128	; 0x80
 80054b8:	d107      	bne.n	80054ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 ff0d 	bl	80062e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d10e      	bne.n	80054f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e2:	2b40      	cmp	r3, #64	; 0x40
 80054e4:	d107      	bne.n	80054f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fa20 	bl	8005936 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b20      	cmp	r3, #32
 8005502:	d10e      	bne.n	8005522 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b20      	cmp	r3, #32
 8005510:	d107      	bne.n	8005522 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f06f 0220 	mvn.w	r2, #32
 800551a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fecd 	bl	80062bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005546:	2302      	movs	r3, #2
 8005548:	e0ff      	b.n	800574a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b14      	cmp	r3, #20
 8005556:	f200 80f0 	bhi.w	800573a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800555a:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800555c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005560:	080055b5 	.word	0x080055b5
 8005564:	0800573b 	.word	0x0800573b
 8005568:	0800573b 	.word	0x0800573b
 800556c:	0800573b 	.word	0x0800573b
 8005570:	080055f5 	.word	0x080055f5
 8005574:	0800573b 	.word	0x0800573b
 8005578:	0800573b 	.word	0x0800573b
 800557c:	0800573b 	.word	0x0800573b
 8005580:	08005637 	.word	0x08005637
 8005584:	0800573b 	.word	0x0800573b
 8005588:	0800573b 	.word	0x0800573b
 800558c:	0800573b 	.word	0x0800573b
 8005590:	08005677 	.word	0x08005677
 8005594:	0800573b 	.word	0x0800573b
 8005598:	0800573b 	.word	0x0800573b
 800559c:	0800573b 	.word	0x0800573b
 80055a0:	080056b9 	.word	0x080056b9
 80055a4:	0800573b 	.word	0x0800573b
 80055a8:	0800573b 	.word	0x0800573b
 80055ac:	0800573b 	.word	0x0800573b
 80055b0:	080056f9 	.word	0x080056f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fa60 	bl	8005a80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0208 	orr.w	r2, r2, #8
 80055ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0204 	bic.w	r2, r2, #4
 80055de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6999      	ldr	r1, [r3, #24]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	619a      	str	r2, [r3, #24]
      break;
 80055f2:	e0a5      	b.n	8005740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fad0 	bl	8005ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6999      	ldr	r1, [r3, #24]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	021a      	lsls	r2, r3, #8
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	619a      	str	r2, [r3, #24]
      break;
 8005634:	e084      	b.n	8005740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fb39 	bl	8005cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0208 	orr.w	r2, r2, #8
 8005650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0204 	bic.w	r2, r2, #4
 8005660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69d9      	ldr	r1, [r3, #28]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	61da      	str	r2, [r3, #28]
      break;
 8005674:	e064      	b.n	8005740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fba1 	bl	8005dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69d9      	ldr	r1, [r3, #28]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	021a      	lsls	r2, r3, #8
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	61da      	str	r2, [r3, #28]
      break;
 80056b6:	e043      	b.n	8005740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fbea 	bl	8005e98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0208 	orr.w	r2, r2, #8
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0204 	bic.w	r2, r2, #4
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056f6:	e023      	b.n	8005740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fc2e 	bl	8005f60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005712:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	021a      	lsls	r2, r3, #8
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005738:	e002      	b.n	8005740 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
      break;
 800573e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop

08005754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_TIM_ConfigClockSource+0x1c>
 800576c:	2302      	movs	r3, #2
 800576e:	e0b6      	b.n	80058de <HAL_TIM_ConfigClockSource+0x18a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800579a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ac:	d03e      	beq.n	800582c <HAL_TIM_ConfigClockSource+0xd8>
 80057ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b2:	f200 8087 	bhi.w	80058c4 <HAL_TIM_ConfigClockSource+0x170>
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ba:	f000 8086 	beq.w	80058ca <HAL_TIM_ConfigClockSource+0x176>
 80057be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c2:	d87f      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x170>
 80057c4:	2b70      	cmp	r3, #112	; 0x70
 80057c6:	d01a      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0xaa>
 80057c8:	2b70      	cmp	r3, #112	; 0x70
 80057ca:	d87b      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x170>
 80057cc:	2b60      	cmp	r3, #96	; 0x60
 80057ce:	d050      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x11e>
 80057d0:	2b60      	cmp	r3, #96	; 0x60
 80057d2:	d877      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x170>
 80057d4:	2b50      	cmp	r3, #80	; 0x50
 80057d6:	d03c      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0xfe>
 80057d8:	2b50      	cmp	r3, #80	; 0x50
 80057da:	d873      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x170>
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d058      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x13e>
 80057e0:	2b40      	cmp	r3, #64	; 0x40
 80057e2:	d86f      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x170>
 80057e4:	2b30      	cmp	r3, #48	; 0x30
 80057e6:	d064      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x15e>
 80057e8:	2b30      	cmp	r3, #48	; 0x30
 80057ea:	d86b      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x170>
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d060      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x15e>
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d867      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x170>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d05c      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x15e>
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d05a      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x15e>
 80057fc:	e062      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800580e:	f000 fc87 	bl	8006120 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	609a      	str	r2, [r3, #8]
      break;
 800582a:	e04f      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800583c:	f000 fc70 	bl	8006120 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800584e:	609a      	str	r2, [r3, #8]
      break;
 8005850:	e03c      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800585e:	461a      	mov	r2, r3
 8005860:	f000 fbe4 	bl	800602c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2150      	movs	r1, #80	; 0x50
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fc3d 	bl	80060ea <TIM_ITRx_SetConfig>
      break;
 8005870:	e02c      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800587e:	461a      	mov	r2, r3
 8005880:	f000 fc03 	bl	800608a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2160      	movs	r1, #96	; 0x60
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fc2d 	bl	80060ea <TIM_ITRx_SetConfig>
      break;
 8005890:	e01c      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800589e:	461a      	mov	r2, r3
 80058a0:	f000 fbc4 	bl	800602c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2140      	movs	r1, #64	; 0x40
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fc1d 	bl	80060ea <TIM_ITRx_SetConfig>
      break;
 80058b0:	e00c      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f000 fc14 	bl	80060ea <TIM_ITRx_SetConfig>
      break;
 80058c2:	e003      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	73fb      	strb	r3, [r7, #15]
      break;
 80058c8:	e000      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80058ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a40      	ldr	r2, [pc, #256]	; (8005a60 <TIM_Base_SetConfig+0x114>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d013      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596a:	d00f      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a3d      	ldr	r2, [pc, #244]	; (8005a64 <TIM_Base_SetConfig+0x118>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00b      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a3c      	ldr	r2, [pc, #240]	; (8005a68 <TIM_Base_SetConfig+0x11c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d007      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a3b      	ldr	r2, [pc, #236]	; (8005a6c <TIM_Base_SetConfig+0x120>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a3a      	ldr	r2, [pc, #232]	; (8005a70 <TIM_Base_SetConfig+0x124>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d108      	bne.n	800599e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2f      	ldr	r2, [pc, #188]	; (8005a60 <TIM_Base_SetConfig+0x114>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01f      	beq.n	80059e6 <TIM_Base_SetConfig+0x9a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ac:	d01b      	beq.n	80059e6 <TIM_Base_SetConfig+0x9a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2c      	ldr	r2, [pc, #176]	; (8005a64 <TIM_Base_SetConfig+0x118>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d017      	beq.n	80059e6 <TIM_Base_SetConfig+0x9a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2b      	ldr	r2, [pc, #172]	; (8005a68 <TIM_Base_SetConfig+0x11c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <TIM_Base_SetConfig+0x9a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2a      	ldr	r2, [pc, #168]	; (8005a6c <TIM_Base_SetConfig+0x120>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00f      	beq.n	80059e6 <TIM_Base_SetConfig+0x9a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a29      	ldr	r2, [pc, #164]	; (8005a70 <TIM_Base_SetConfig+0x124>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00b      	beq.n	80059e6 <TIM_Base_SetConfig+0x9a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a28      	ldr	r2, [pc, #160]	; (8005a74 <TIM_Base_SetConfig+0x128>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d007      	beq.n	80059e6 <TIM_Base_SetConfig+0x9a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a27      	ldr	r2, [pc, #156]	; (8005a78 <TIM_Base_SetConfig+0x12c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_Base_SetConfig+0x9a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a26      	ldr	r2, [pc, #152]	; (8005a7c <TIM_Base_SetConfig+0x130>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d108      	bne.n	80059f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a10      	ldr	r2, [pc, #64]	; (8005a60 <TIM_Base_SetConfig+0x114>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00f      	beq.n	8005a44 <TIM_Base_SetConfig+0xf8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a12      	ldr	r2, [pc, #72]	; (8005a70 <TIM_Base_SetConfig+0x124>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00b      	beq.n	8005a44 <TIM_Base_SetConfig+0xf8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a11      	ldr	r2, [pc, #68]	; (8005a74 <TIM_Base_SetConfig+0x128>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d007      	beq.n	8005a44 <TIM_Base_SetConfig+0xf8>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a10      	ldr	r2, [pc, #64]	; (8005a78 <TIM_Base_SetConfig+0x12c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_Base_SetConfig+0xf8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a0f      	ldr	r2, [pc, #60]	; (8005a7c <TIM_Base_SetConfig+0x130>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d103      	bne.n	8005a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	615a      	str	r2, [r3, #20]
}
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40000c00 	.word	0x40000c00
 8005a70:	40013400 	.word	0x40013400
 8005a74:	40014000 	.word	0x40014000
 8005a78:	40014400 	.word	0x40014400
 8005a7c:	40014800 	.word	0x40014800

08005a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f023 0201 	bic.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f023 0302 	bic.w	r3, r3, #2
 8005acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a2c      	ldr	r2, [pc, #176]	; (8005b8c <TIM_OC1_SetConfig+0x10c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00f      	beq.n	8005b00 <TIM_OC1_SetConfig+0x80>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a2b      	ldr	r2, [pc, #172]	; (8005b90 <TIM_OC1_SetConfig+0x110>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00b      	beq.n	8005b00 <TIM_OC1_SetConfig+0x80>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a2a      	ldr	r2, [pc, #168]	; (8005b94 <TIM_OC1_SetConfig+0x114>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d007      	beq.n	8005b00 <TIM_OC1_SetConfig+0x80>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <TIM_OC1_SetConfig+0x118>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_OC1_SetConfig+0x80>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a28      	ldr	r2, [pc, #160]	; (8005b9c <TIM_OC1_SetConfig+0x11c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d10c      	bne.n	8005b1a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0308 	bic.w	r3, r3, #8
 8005b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 0304 	bic.w	r3, r3, #4
 8005b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <TIM_OC1_SetConfig+0x10c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00f      	beq.n	8005b42 <TIM_OC1_SetConfig+0xc2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a1a      	ldr	r2, [pc, #104]	; (8005b90 <TIM_OC1_SetConfig+0x110>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00b      	beq.n	8005b42 <TIM_OC1_SetConfig+0xc2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a19      	ldr	r2, [pc, #100]	; (8005b94 <TIM_OC1_SetConfig+0x114>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d007      	beq.n	8005b42 <TIM_OC1_SetConfig+0xc2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a18      	ldr	r2, [pc, #96]	; (8005b98 <TIM_OC1_SetConfig+0x118>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d003      	beq.n	8005b42 <TIM_OC1_SetConfig+0xc2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a17      	ldr	r2, [pc, #92]	; (8005b9c <TIM_OC1_SetConfig+0x11c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d111      	bne.n	8005b66 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40013400 	.word	0x40013400
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800

08005ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f023 0210 	bic.w	r2, r3, #16
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0320 	bic.w	r3, r3, #32
 8005bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a28      	ldr	r2, [pc, #160]	; (8005ca0 <TIM_OC2_SetConfig+0x100>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_OC2_SetConfig+0x6c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a27      	ldr	r2, [pc, #156]	; (8005ca4 <TIM_OC2_SetConfig+0x104>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d10d      	bne.n	8005c28 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ca0 <TIM_OC2_SetConfig+0x100>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00f      	beq.n	8005c50 <TIM_OC2_SetConfig+0xb0>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a1c      	ldr	r2, [pc, #112]	; (8005ca4 <TIM_OC2_SetConfig+0x104>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <TIM_OC2_SetConfig+0xb0>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <TIM_OC2_SetConfig+0x108>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d007      	beq.n	8005c50 <TIM_OC2_SetConfig+0xb0>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a1a      	ldr	r2, [pc, #104]	; (8005cac <TIM_OC2_SetConfig+0x10c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_OC2_SetConfig+0xb0>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a19      	ldr	r2, [pc, #100]	; (8005cb0 <TIM_OC2_SetConfig+0x110>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d113      	bne.n	8005c78 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	40013400 	.word	0x40013400
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40014400 	.word	0x40014400
 8005cb0:	40014800 	.word	0x40014800

08005cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a27      	ldr	r2, [pc, #156]	; (8005db0 <TIM_OC3_SetConfig+0xfc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d003      	beq.n	8005d1e <TIM_OC3_SetConfig+0x6a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a26      	ldr	r2, [pc, #152]	; (8005db4 <TIM_OC3_SetConfig+0x100>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d10d      	bne.n	8005d3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <TIM_OC3_SetConfig+0xfc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00f      	beq.n	8005d62 <TIM_OC3_SetConfig+0xae>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a1b      	ldr	r2, [pc, #108]	; (8005db4 <TIM_OC3_SetConfig+0x100>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00b      	beq.n	8005d62 <TIM_OC3_SetConfig+0xae>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a1a      	ldr	r2, [pc, #104]	; (8005db8 <TIM_OC3_SetConfig+0x104>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d007      	beq.n	8005d62 <TIM_OC3_SetConfig+0xae>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a19      	ldr	r2, [pc, #100]	; (8005dbc <TIM_OC3_SetConfig+0x108>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d003      	beq.n	8005d62 <TIM_OC3_SetConfig+0xae>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <TIM_OC3_SetConfig+0x10c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d113      	bne.n	8005d8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	621a      	str	r2, [r3, #32]
}
 8005da4:	bf00      	nop
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40013400 	.word	0x40013400
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40014400 	.word	0x40014400
 8005dc0:	40014800 	.word	0x40014800

08005dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	031b      	lsls	r3, r3, #12
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a18      	ldr	r2, [pc, #96]	; (8005e84 <TIM_OC4_SetConfig+0xc0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00f      	beq.n	8005e48 <TIM_OC4_SetConfig+0x84>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <TIM_OC4_SetConfig+0xc4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00b      	beq.n	8005e48 <TIM_OC4_SetConfig+0x84>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a16      	ldr	r2, [pc, #88]	; (8005e8c <TIM_OC4_SetConfig+0xc8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d007      	beq.n	8005e48 <TIM_OC4_SetConfig+0x84>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <TIM_OC4_SetConfig+0xcc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <TIM_OC4_SetConfig+0x84>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a14      	ldr	r2, [pc, #80]	; (8005e94 <TIM_OC4_SetConfig+0xd0>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d109      	bne.n	8005e5c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	019b      	lsls	r3, r3, #6
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40012c00 	.word	0x40012c00
 8005e88:	40013400 	.word	0x40013400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40014400 	.word	0x40014400
 8005e94:	40014800 	.word	0x40014800

08005e98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005edc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a17      	ldr	r2, [pc, #92]	; (8005f4c <TIM_OC5_SetConfig+0xb4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00f      	beq.n	8005f12 <TIM_OC5_SetConfig+0x7a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a16      	ldr	r2, [pc, #88]	; (8005f50 <TIM_OC5_SetConfig+0xb8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00b      	beq.n	8005f12 <TIM_OC5_SetConfig+0x7a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a15      	ldr	r2, [pc, #84]	; (8005f54 <TIM_OC5_SetConfig+0xbc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d007      	beq.n	8005f12 <TIM_OC5_SetConfig+0x7a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a14      	ldr	r2, [pc, #80]	; (8005f58 <TIM_OC5_SetConfig+0xc0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <TIM_OC5_SetConfig+0x7a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a13      	ldr	r2, [pc, #76]	; (8005f5c <TIM_OC5_SetConfig+0xc4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d109      	bne.n	8005f26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	621a      	str	r2, [r3, #32]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40013400 	.word	0x40013400
 8005f54:	40014000 	.word	0x40014000
 8005f58:	40014400 	.word	0x40014400
 8005f5c:	40014800 	.word	0x40014800

08005f60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	021b      	lsls	r3, r3, #8
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	051b      	lsls	r3, r3, #20
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a18      	ldr	r2, [pc, #96]	; (8006018 <TIM_OC6_SetConfig+0xb8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00f      	beq.n	8005fdc <TIM_OC6_SetConfig+0x7c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a17      	ldr	r2, [pc, #92]	; (800601c <TIM_OC6_SetConfig+0xbc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00b      	beq.n	8005fdc <TIM_OC6_SetConfig+0x7c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a16      	ldr	r2, [pc, #88]	; (8006020 <TIM_OC6_SetConfig+0xc0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_OC6_SetConfig+0x7c>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a15      	ldr	r2, [pc, #84]	; (8006024 <TIM_OC6_SetConfig+0xc4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_OC6_SetConfig+0x7c>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a14      	ldr	r2, [pc, #80]	; (8006028 <TIM_OC6_SetConfig+0xc8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d109      	bne.n	8005ff0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	029b      	lsls	r3, r3, #10
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40012c00 	.word	0x40012c00
 800601c:	40013400 	.word	0x40013400
 8006020:	40014000 	.word	0x40014000
 8006024:	40014400 	.word	0x40014400
 8006028:	40014800 	.word	0x40014800

0800602c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f023 0201 	bic.w	r2, r3, #1
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f023 030a 	bic.w	r3, r3, #10
 8006068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	621a      	str	r2, [r3, #32]
}
 800607e:	bf00      	nop
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800608a:	b480      	push	{r7}
 800608c:	b087      	sub	sp, #28
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f023 0210 	bic.w	r2, r3, #16
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	031b      	lsls	r3, r3, #12
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	621a      	str	r2, [r3, #32]
}
 80060de:	bf00      	nop
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	f043 0307 	orr.w	r3, r3, #7
 800610c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	609a      	str	r2, [r3, #8]
}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800613a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	021a      	lsls	r2, r3, #8
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	431a      	orrs	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4313      	orrs	r3, r2
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	609a      	str	r2, [r3, #8]
}
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2201      	movs	r2, #1
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6a1a      	ldr	r2, [r3, #32]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	43db      	mvns	r3, r3
 8006182:	401a      	ands	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a1a      	ldr	r2, [r3, #32]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	fa01 f303 	lsl.w	r3, r1, r3
 8006198:	431a      	orrs	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e068      	b.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a2e      	ldr	r2, [pc, #184]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d004      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a2d      	ldr	r2, [pc, #180]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d108      	bne.n	800620a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006210:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01d      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006236:	d018      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1b      	ldr	r2, [pc, #108]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d013      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1a      	ldr	r2, [pc, #104]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00e      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a18      	ldr	r2, [pc, #96]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d009      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a13      	ldr	r2, [pc, #76]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d004      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a14      	ldr	r2, [pc, #80]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d10c      	bne.n	8006284 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	4313      	orrs	r3, r2
 800627a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40012c00 	.word	0x40012c00
 80062a8:	40013400 	.word	0x40013400
 80062ac:	40000400 	.word	0x40000400
 80062b0:	40000800 	.word	0x40000800
 80062b4:	40000c00 	.word	0x40000c00
 80062b8:	40014000 	.word	0x40014000

080062bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e040      	b.n	800638c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fc f9ac 	bl	8002678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2224      	movs	r2, #36	; 0x24
 8006324:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0201 	bic.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f82c 	bl	8006394 <UART_SetConfig>
 800633c:	4603      	mov	r3, r0
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e022      	b.n	800638c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fad8 	bl	8006904 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0201 	orr.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fb5f 	bl	8006a48 <UART_CheckIdleState>
 800638a:	4603      	mov	r3, r0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006398:	b08a      	sub	sp, #40	; 0x28
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	431a      	orrs	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4ba4      	ldr	r3, [pc, #656]	; (8006654 <UART_SetConfig+0x2c0>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	6812      	ldr	r2, [r2, #0]
 80063ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063cc:	430b      	orrs	r3, r1
 80063ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a99      	ldr	r2, [pc, #612]	; (8006658 <UART_SetConfig+0x2c4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d004      	beq.n	8006400 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fc:	4313      	orrs	r3, r2
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006410:	430a      	orrs	r2, r1
 8006412:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a90      	ldr	r2, [pc, #576]	; (800665c <UART_SetConfig+0x2c8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d126      	bne.n	800646c <UART_SetConfig+0xd8>
 800641e:	4b90      	ldr	r3, [pc, #576]	; (8006660 <UART_SetConfig+0x2cc>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	2b03      	cmp	r3, #3
 800642a:	d81b      	bhi.n	8006464 <UART_SetConfig+0xd0>
 800642c:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <UART_SetConfig+0xa0>)
 800642e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006432:	bf00      	nop
 8006434:	08006445 	.word	0x08006445
 8006438:	08006455 	.word	0x08006455
 800643c:	0800644d 	.word	0x0800644d
 8006440:	0800645d 	.word	0x0800645d
 8006444:	2301      	movs	r3, #1
 8006446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644a:	e116      	b.n	800667a <UART_SetConfig+0x2e6>
 800644c:	2302      	movs	r3, #2
 800644e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006452:	e112      	b.n	800667a <UART_SetConfig+0x2e6>
 8006454:	2304      	movs	r3, #4
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645a:	e10e      	b.n	800667a <UART_SetConfig+0x2e6>
 800645c:	2308      	movs	r3, #8
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006462:	e10a      	b.n	800667a <UART_SetConfig+0x2e6>
 8006464:	2310      	movs	r3, #16
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800646a:	e106      	b.n	800667a <UART_SetConfig+0x2e6>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a7c      	ldr	r2, [pc, #496]	; (8006664 <UART_SetConfig+0x2d0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d138      	bne.n	80064e8 <UART_SetConfig+0x154>
 8006476:	4b7a      	ldr	r3, [pc, #488]	; (8006660 <UART_SetConfig+0x2cc>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647c:	f003 030c 	and.w	r3, r3, #12
 8006480:	2b0c      	cmp	r3, #12
 8006482:	d82d      	bhi.n	80064e0 <UART_SetConfig+0x14c>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <UART_SetConfig+0xf8>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064c1 	.word	0x080064c1
 8006490:	080064e1 	.word	0x080064e1
 8006494:	080064e1 	.word	0x080064e1
 8006498:	080064e1 	.word	0x080064e1
 800649c:	080064d1 	.word	0x080064d1
 80064a0:	080064e1 	.word	0x080064e1
 80064a4:	080064e1 	.word	0x080064e1
 80064a8:	080064e1 	.word	0x080064e1
 80064ac:	080064c9 	.word	0x080064c9
 80064b0:	080064e1 	.word	0x080064e1
 80064b4:	080064e1 	.word	0x080064e1
 80064b8:	080064e1 	.word	0x080064e1
 80064bc:	080064d9 	.word	0x080064d9
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064c6:	e0d8      	b.n	800667a <UART_SetConfig+0x2e6>
 80064c8:	2302      	movs	r3, #2
 80064ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ce:	e0d4      	b.n	800667a <UART_SetConfig+0x2e6>
 80064d0:	2304      	movs	r3, #4
 80064d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064d6:	e0d0      	b.n	800667a <UART_SetConfig+0x2e6>
 80064d8:	2308      	movs	r3, #8
 80064da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064de:	e0cc      	b.n	800667a <UART_SetConfig+0x2e6>
 80064e0:	2310      	movs	r3, #16
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064e6:	e0c8      	b.n	800667a <UART_SetConfig+0x2e6>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a5e      	ldr	r2, [pc, #376]	; (8006668 <UART_SetConfig+0x2d4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d125      	bne.n	800653e <UART_SetConfig+0x1aa>
 80064f2:	4b5b      	ldr	r3, [pc, #364]	; (8006660 <UART_SetConfig+0x2cc>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064fc:	2b30      	cmp	r3, #48	; 0x30
 80064fe:	d016      	beq.n	800652e <UART_SetConfig+0x19a>
 8006500:	2b30      	cmp	r3, #48	; 0x30
 8006502:	d818      	bhi.n	8006536 <UART_SetConfig+0x1a2>
 8006504:	2b20      	cmp	r3, #32
 8006506:	d00a      	beq.n	800651e <UART_SetConfig+0x18a>
 8006508:	2b20      	cmp	r3, #32
 800650a:	d814      	bhi.n	8006536 <UART_SetConfig+0x1a2>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <UART_SetConfig+0x182>
 8006510:	2b10      	cmp	r3, #16
 8006512:	d008      	beq.n	8006526 <UART_SetConfig+0x192>
 8006514:	e00f      	b.n	8006536 <UART_SetConfig+0x1a2>
 8006516:	2300      	movs	r3, #0
 8006518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651c:	e0ad      	b.n	800667a <UART_SetConfig+0x2e6>
 800651e:	2302      	movs	r3, #2
 8006520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006524:	e0a9      	b.n	800667a <UART_SetConfig+0x2e6>
 8006526:	2304      	movs	r3, #4
 8006528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652c:	e0a5      	b.n	800667a <UART_SetConfig+0x2e6>
 800652e:	2308      	movs	r3, #8
 8006530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006534:	e0a1      	b.n	800667a <UART_SetConfig+0x2e6>
 8006536:	2310      	movs	r3, #16
 8006538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800653c:	e09d      	b.n	800667a <UART_SetConfig+0x2e6>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a4a      	ldr	r2, [pc, #296]	; (800666c <UART_SetConfig+0x2d8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d125      	bne.n	8006594 <UART_SetConfig+0x200>
 8006548:	4b45      	ldr	r3, [pc, #276]	; (8006660 <UART_SetConfig+0x2cc>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006552:	2bc0      	cmp	r3, #192	; 0xc0
 8006554:	d016      	beq.n	8006584 <UART_SetConfig+0x1f0>
 8006556:	2bc0      	cmp	r3, #192	; 0xc0
 8006558:	d818      	bhi.n	800658c <UART_SetConfig+0x1f8>
 800655a:	2b80      	cmp	r3, #128	; 0x80
 800655c:	d00a      	beq.n	8006574 <UART_SetConfig+0x1e0>
 800655e:	2b80      	cmp	r3, #128	; 0x80
 8006560:	d814      	bhi.n	800658c <UART_SetConfig+0x1f8>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <UART_SetConfig+0x1d8>
 8006566:	2b40      	cmp	r3, #64	; 0x40
 8006568:	d008      	beq.n	800657c <UART_SetConfig+0x1e8>
 800656a:	e00f      	b.n	800658c <UART_SetConfig+0x1f8>
 800656c:	2300      	movs	r3, #0
 800656e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006572:	e082      	b.n	800667a <UART_SetConfig+0x2e6>
 8006574:	2302      	movs	r3, #2
 8006576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800657a:	e07e      	b.n	800667a <UART_SetConfig+0x2e6>
 800657c:	2304      	movs	r3, #4
 800657e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006582:	e07a      	b.n	800667a <UART_SetConfig+0x2e6>
 8006584:	2308      	movs	r3, #8
 8006586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800658a:	e076      	b.n	800667a <UART_SetConfig+0x2e6>
 800658c:	2310      	movs	r3, #16
 800658e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006592:	e072      	b.n	800667a <UART_SetConfig+0x2e6>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a35      	ldr	r2, [pc, #212]	; (8006670 <UART_SetConfig+0x2dc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d12a      	bne.n	80065f4 <UART_SetConfig+0x260>
 800659e:	4b30      	ldr	r3, [pc, #192]	; (8006660 <UART_SetConfig+0x2cc>)
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ac:	d01a      	beq.n	80065e4 <UART_SetConfig+0x250>
 80065ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065b2:	d81b      	bhi.n	80065ec <UART_SetConfig+0x258>
 80065b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b8:	d00c      	beq.n	80065d4 <UART_SetConfig+0x240>
 80065ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065be:	d815      	bhi.n	80065ec <UART_SetConfig+0x258>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <UART_SetConfig+0x238>
 80065c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c8:	d008      	beq.n	80065dc <UART_SetConfig+0x248>
 80065ca:	e00f      	b.n	80065ec <UART_SetConfig+0x258>
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065d2:	e052      	b.n	800667a <UART_SetConfig+0x2e6>
 80065d4:	2302      	movs	r3, #2
 80065d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065da:	e04e      	b.n	800667a <UART_SetConfig+0x2e6>
 80065dc:	2304      	movs	r3, #4
 80065de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065e2:	e04a      	b.n	800667a <UART_SetConfig+0x2e6>
 80065e4:	2308      	movs	r3, #8
 80065e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ea:	e046      	b.n	800667a <UART_SetConfig+0x2e6>
 80065ec:	2310      	movs	r3, #16
 80065ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f2:	e042      	b.n	800667a <UART_SetConfig+0x2e6>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a17      	ldr	r2, [pc, #92]	; (8006658 <UART_SetConfig+0x2c4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d13a      	bne.n	8006674 <UART_SetConfig+0x2e0>
 80065fe:	4b18      	ldr	r3, [pc, #96]	; (8006660 <UART_SetConfig+0x2cc>)
 8006600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006604:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800660c:	d01a      	beq.n	8006644 <UART_SetConfig+0x2b0>
 800660e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006612:	d81b      	bhi.n	800664c <UART_SetConfig+0x2b8>
 8006614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006618:	d00c      	beq.n	8006634 <UART_SetConfig+0x2a0>
 800661a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800661e:	d815      	bhi.n	800664c <UART_SetConfig+0x2b8>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <UART_SetConfig+0x298>
 8006624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006628:	d008      	beq.n	800663c <UART_SetConfig+0x2a8>
 800662a:	e00f      	b.n	800664c <UART_SetConfig+0x2b8>
 800662c:	2300      	movs	r3, #0
 800662e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006632:	e022      	b.n	800667a <UART_SetConfig+0x2e6>
 8006634:	2302      	movs	r3, #2
 8006636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800663a:	e01e      	b.n	800667a <UART_SetConfig+0x2e6>
 800663c:	2304      	movs	r3, #4
 800663e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006642:	e01a      	b.n	800667a <UART_SetConfig+0x2e6>
 8006644:	2308      	movs	r3, #8
 8006646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800664a:	e016      	b.n	800667a <UART_SetConfig+0x2e6>
 800664c:	2310      	movs	r3, #16
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006652:	e012      	b.n	800667a <UART_SetConfig+0x2e6>
 8006654:	efff69f3 	.word	0xefff69f3
 8006658:	40008000 	.word	0x40008000
 800665c:	40013800 	.word	0x40013800
 8006660:	40021000 	.word	0x40021000
 8006664:	40004400 	.word	0x40004400
 8006668:	40004800 	.word	0x40004800
 800666c:	40004c00 	.word	0x40004c00
 8006670:	40005000 	.word	0x40005000
 8006674:	2310      	movs	r3, #16
 8006676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a9f      	ldr	r2, [pc, #636]	; (80068fc <UART_SetConfig+0x568>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d17a      	bne.n	800677a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006688:	2b08      	cmp	r3, #8
 800668a:	d824      	bhi.n	80066d6 <UART_SetConfig+0x342>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <UART_SetConfig+0x300>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066d7 	.word	0x080066d7
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066d7 	.word	0x080066d7
 80066a4:	080066c7 	.word	0x080066c7
 80066a8:	080066d7 	.word	0x080066d7
 80066ac:	080066d7 	.word	0x080066d7
 80066b0:	080066d7 	.word	0x080066d7
 80066b4:	080066cf 	.word	0x080066cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b8:	f7fd fe82 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 80066bc:	61f8      	str	r0, [r7, #28]
        break;
 80066be:	e010      	b.n	80066e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c0:	4b8f      	ldr	r3, [pc, #572]	; (8006900 <UART_SetConfig+0x56c>)
 80066c2:	61fb      	str	r3, [r7, #28]
        break;
 80066c4:	e00d      	b.n	80066e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066c6:	f7fd fde3 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 80066ca:	61f8      	str	r0, [r7, #28]
        break;
 80066cc:	e009      	b.n	80066e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d2:	61fb      	str	r3, [r7, #28]
        break;
 80066d4:	e005      	b.n	80066e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 80fb 	beq.w	80068e0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	4613      	mov	r3, r2
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	4413      	add	r3, r2
 80066f4:	69fa      	ldr	r2, [r7, #28]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d305      	bcc.n	8006706 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	429a      	cmp	r2, r3
 8006704:	d903      	bls.n	800670e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800670c:	e0e8      	b.n	80068e0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	2200      	movs	r2, #0
 8006712:	461c      	mov	r4, r3
 8006714:	4615      	mov	r5, r2
 8006716:	f04f 0200 	mov.w	r2, #0
 800671a:	f04f 0300 	mov.w	r3, #0
 800671e:	022b      	lsls	r3, r5, #8
 8006720:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006724:	0222      	lsls	r2, r4, #8
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	6849      	ldr	r1, [r1, #4]
 800672a:	0849      	lsrs	r1, r1, #1
 800672c:	2000      	movs	r0, #0
 800672e:	4688      	mov	r8, r1
 8006730:	4681      	mov	r9, r0
 8006732:	eb12 0a08 	adds.w	sl, r2, r8
 8006736:	eb43 0b09 	adc.w	fp, r3, r9
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	603b      	str	r3, [r7, #0]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006748:	4650      	mov	r0, sl
 800674a:	4659      	mov	r1, fp
 800674c:	f7fa f97e 	bl	8000a4c <__aeabi_uldivmod>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	4613      	mov	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800675e:	d308      	bcc.n	8006772 <UART_SetConfig+0x3de>
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006766:	d204      	bcs.n	8006772 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	60da      	str	r2, [r3, #12]
 8006770:	e0b6      	b.n	80068e0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006778:	e0b2      	b.n	80068e0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006782:	d15e      	bne.n	8006842 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006788:	2b08      	cmp	r3, #8
 800678a:	d828      	bhi.n	80067de <UART_SetConfig+0x44a>
 800678c:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <UART_SetConfig+0x400>)
 800678e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006792:	bf00      	nop
 8006794:	080067b9 	.word	0x080067b9
 8006798:	080067c1 	.word	0x080067c1
 800679c:	080067c9 	.word	0x080067c9
 80067a0:	080067df 	.word	0x080067df
 80067a4:	080067cf 	.word	0x080067cf
 80067a8:	080067df 	.word	0x080067df
 80067ac:	080067df 	.word	0x080067df
 80067b0:	080067df 	.word	0x080067df
 80067b4:	080067d7 	.word	0x080067d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b8:	f7fd fe02 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 80067bc:	61f8      	str	r0, [r7, #28]
        break;
 80067be:	e014      	b.n	80067ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067c0:	f7fd fe14 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 80067c4:	61f8      	str	r0, [r7, #28]
        break;
 80067c6:	e010      	b.n	80067ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c8:	4b4d      	ldr	r3, [pc, #308]	; (8006900 <UART_SetConfig+0x56c>)
 80067ca:	61fb      	str	r3, [r7, #28]
        break;
 80067cc:	e00d      	b.n	80067ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ce:	f7fd fd5f 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 80067d2:	61f8      	str	r0, [r7, #28]
        break;
 80067d4:	e009      	b.n	80067ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067da:	61fb      	str	r3, [r7, #28]
        break;
 80067dc:	e005      	b.n	80067ea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d077      	beq.n	80068e0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	005a      	lsls	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	085b      	lsrs	r3, r3, #1
 80067fa:	441a      	add	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	fbb2 f3f3 	udiv	r3, r2, r3
 8006804:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b0f      	cmp	r3, #15
 800680a:	d916      	bls.n	800683a <UART_SetConfig+0x4a6>
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006812:	d212      	bcs.n	800683a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	b29b      	uxth	r3, r3
 8006818:	f023 030f 	bic.w	r3, r3, #15
 800681c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	085b      	lsrs	r3, r3, #1
 8006822:	b29b      	uxth	r3, r3
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	b29a      	uxth	r2, r3
 800682a:	8afb      	ldrh	r3, [r7, #22]
 800682c:	4313      	orrs	r3, r2
 800682e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	8afa      	ldrh	r2, [r7, #22]
 8006836:	60da      	str	r2, [r3, #12]
 8006838:	e052      	b.n	80068e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006840:	e04e      	b.n	80068e0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006846:	2b08      	cmp	r3, #8
 8006848:	d827      	bhi.n	800689a <UART_SetConfig+0x506>
 800684a:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <UART_SetConfig+0x4bc>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	08006875 	.word	0x08006875
 8006854:	0800687d 	.word	0x0800687d
 8006858:	08006885 	.word	0x08006885
 800685c:	0800689b 	.word	0x0800689b
 8006860:	0800688b 	.word	0x0800688b
 8006864:	0800689b 	.word	0x0800689b
 8006868:	0800689b 	.word	0x0800689b
 800686c:	0800689b 	.word	0x0800689b
 8006870:	08006893 	.word	0x08006893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006874:	f7fd fda4 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8006878:	61f8      	str	r0, [r7, #28]
        break;
 800687a:	e014      	b.n	80068a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800687c:	f7fd fdb6 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 8006880:	61f8      	str	r0, [r7, #28]
        break;
 8006882:	e010      	b.n	80068a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006884:	4b1e      	ldr	r3, [pc, #120]	; (8006900 <UART_SetConfig+0x56c>)
 8006886:	61fb      	str	r3, [r7, #28]
        break;
 8006888:	e00d      	b.n	80068a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688a:	f7fd fd01 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800688e:	61f8      	str	r0, [r7, #28]
        break;
 8006890:	e009      	b.n	80068a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006896:	61fb      	str	r3, [r7, #28]
        break;
 8006898:	e005      	b.n	80068a6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068a4:	bf00      	nop
    }

    if (pclk != 0U)
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d019      	beq.n	80068e0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	085a      	lsrs	r2, r3, #1
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	441a      	add	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80068be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b0f      	cmp	r3, #15
 80068c4:	d909      	bls.n	80068da <UART_SetConfig+0x546>
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068cc:	d205      	bcs.n	80068da <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60da      	str	r2, [r3, #12]
 80068d8:	e002      	b.n	80068e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80068ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3728      	adds	r7, #40	; 0x28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068fa:	bf00      	nop
 80068fc:	40008000 	.word	0x40008000
 8006900:	00f42400 	.word	0x00f42400

08006904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00a      	beq.n	8006972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	f003 0308 	and.w	r3, r3, #8
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00a      	beq.n	80069b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01a      	beq.n	8006a1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a02:	d10a      	bne.n	8006a1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	605a      	str	r2, [r3, #4]
  }
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a58:	f7fb ff8a 	bl	8002970 <HAL_GetTick>
 8006a5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0308 	and.w	r3, r3, #8
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d10e      	bne.n	8006a8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f82d 	bl	8006ada <UART_WaitOnFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e023      	b.n	8006ad2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d10e      	bne.n	8006ab6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f817 	bl	8006ada <UART_WaitOnFlagUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e00d      	b.n	8006ad2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b09c      	sub	sp, #112	; 0x70
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	603b      	str	r3, [r7, #0]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aea:	e0a5      	b.n	8006c38 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	f000 80a1 	beq.w	8006c38 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af6:	f7fb ff3b 	bl	8002970 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d302      	bcc.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x32>
 8006b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d13e      	bne.n	8006b8a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b20:	667b      	str	r3, [r7, #100]	; 0x64
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e6      	bne.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3308      	adds	r3, #8
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	f023 0301 	bic.w	r3, r3, #1
 8006b54:	663b      	str	r3, [r7, #96]	; 0x60
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e5      	bne.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2220      	movs	r2, #32
 8006b76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e067      	b.n	8006c5a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d04f      	beq.n	8006c38 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ba6:	d147      	bne.n	8006c38 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bb0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	e853 3f00 	ldrex	r3, [r3]
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e6      	bne.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3308      	adds	r3, #8
 8006bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f023 0301 	bic.w	r3, r3, #1
 8006bfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3308      	adds	r3, #8
 8006c02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c04:	623a      	str	r2, [r7, #32]
 8006c06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	69f9      	ldr	r1, [r7, #28]
 8006c0a:	6a3a      	ldr	r2, [r7, #32]
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e5      	bne.n	8006be4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2220      	movs	r2, #32
 8006c22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e010      	b.n	8006c5a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69da      	ldr	r2, [r3, #28]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4013      	ands	r3, r2
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	bf0c      	ite	eq
 8006c48:	2301      	moveq	r3, #1
 8006c4a:	2300      	movne	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	461a      	mov	r2, r3
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	f43f af4a 	beq.w	8006aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3770      	adds	r7, #112	; 0x70
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <siprintf>:
 8006c64:	b40e      	push	{r1, r2, r3}
 8006c66:	b500      	push	{lr}
 8006c68:	b09c      	sub	sp, #112	; 0x70
 8006c6a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c6c:	9002      	str	r0, [sp, #8]
 8006c6e:	9006      	str	r0, [sp, #24]
 8006c70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c74:	4809      	ldr	r0, [pc, #36]	; (8006c9c <siprintf+0x38>)
 8006c76:	9107      	str	r1, [sp, #28]
 8006c78:	9104      	str	r1, [sp, #16]
 8006c7a:	4909      	ldr	r1, [pc, #36]	; (8006ca0 <siprintf+0x3c>)
 8006c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c80:	9105      	str	r1, [sp, #20]
 8006c82:	6800      	ldr	r0, [r0, #0]
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	a902      	add	r1, sp, #8
 8006c88:	f000 f9ac 	bl	8006fe4 <_svfiprintf_r>
 8006c8c:	9b02      	ldr	r3, [sp, #8]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	b01c      	add	sp, #112	; 0x70
 8006c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c98:	b003      	add	sp, #12
 8006c9a:	4770      	bx	lr
 8006c9c:	20000094 	.word	0x20000094
 8006ca0:	ffff0208 	.word	0xffff0208

08006ca4 <memset>:
 8006ca4:	4402      	add	r2, r0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d100      	bne.n	8006cae <memset+0xa>
 8006cac:	4770      	bx	lr
 8006cae:	f803 1b01 	strb.w	r1, [r3], #1
 8006cb2:	e7f9      	b.n	8006ca8 <memset+0x4>

08006cb4 <strncmp>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	b16a      	cbz	r2, 8006cd4 <strncmp+0x20>
 8006cb8:	3901      	subs	r1, #1
 8006cba:	1884      	adds	r4, r0, r2
 8006cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cc0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d103      	bne.n	8006cd0 <strncmp+0x1c>
 8006cc8:	42a0      	cmp	r0, r4
 8006cca:	d001      	beq.n	8006cd0 <strncmp+0x1c>
 8006ccc:	2a00      	cmp	r2, #0
 8006cce:	d1f5      	bne.n	8006cbc <strncmp+0x8>
 8006cd0:	1ad0      	subs	r0, r2, r3
 8006cd2:	bd10      	pop	{r4, pc}
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	e7fc      	b.n	8006cd2 <strncmp+0x1e>

08006cd8 <__errno>:
 8006cd8:	4b01      	ldr	r3, [pc, #4]	; (8006ce0 <__errno+0x8>)
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	20000094 	.word	0x20000094

08006ce4 <__libc_init_array>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	4d0d      	ldr	r5, [pc, #52]	; (8006d1c <__libc_init_array+0x38>)
 8006ce8:	4c0d      	ldr	r4, [pc, #52]	; (8006d20 <__libc_init_array+0x3c>)
 8006cea:	1b64      	subs	r4, r4, r5
 8006cec:	10a4      	asrs	r4, r4, #2
 8006cee:	2600      	movs	r6, #0
 8006cf0:	42a6      	cmp	r6, r4
 8006cf2:	d109      	bne.n	8006d08 <__libc_init_array+0x24>
 8006cf4:	4d0b      	ldr	r5, [pc, #44]	; (8006d24 <__libc_init_array+0x40>)
 8006cf6:	4c0c      	ldr	r4, [pc, #48]	; (8006d28 <__libc_init_array+0x44>)
 8006cf8:	f000 fc72 	bl	80075e0 <_init>
 8006cfc:	1b64      	subs	r4, r4, r5
 8006cfe:	10a4      	asrs	r4, r4, #2
 8006d00:	2600      	movs	r6, #0
 8006d02:	42a6      	cmp	r6, r4
 8006d04:	d105      	bne.n	8006d12 <__libc_init_array+0x2e>
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
 8006d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d0c:	4798      	blx	r3
 8006d0e:	3601      	adds	r6, #1
 8006d10:	e7ee      	b.n	8006cf0 <__libc_init_array+0xc>
 8006d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d16:	4798      	blx	r3
 8006d18:	3601      	adds	r6, #1
 8006d1a:	e7f2      	b.n	8006d02 <__libc_init_array+0x1e>
 8006d1c:	08009b94 	.word	0x08009b94
 8006d20:	08009b94 	.word	0x08009b94
 8006d24:	08009b94 	.word	0x08009b94
 8006d28:	08009b98 	.word	0x08009b98

08006d2c <__retarget_lock_acquire_recursive>:
 8006d2c:	4770      	bx	lr

08006d2e <__retarget_lock_release_recursive>:
 8006d2e:	4770      	bx	lr

08006d30 <strcpy>:
 8006d30:	4603      	mov	r3, r0
 8006d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d36:	f803 2b01 	strb.w	r2, [r3], #1
 8006d3a:	2a00      	cmp	r2, #0
 8006d3c:	d1f9      	bne.n	8006d32 <strcpy+0x2>
 8006d3e:	4770      	bx	lr

08006d40 <_free_r>:
 8006d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d42:	2900      	cmp	r1, #0
 8006d44:	d044      	beq.n	8006dd0 <_free_r+0x90>
 8006d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4a:	9001      	str	r0, [sp, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d52:	bfb8      	it	lt
 8006d54:	18e4      	addlt	r4, r4, r3
 8006d56:	f000 f8df 	bl	8006f18 <__malloc_lock>
 8006d5a:	4a1e      	ldr	r2, [pc, #120]	; (8006dd4 <_free_r+0x94>)
 8006d5c:	9801      	ldr	r0, [sp, #4]
 8006d5e:	6813      	ldr	r3, [r2, #0]
 8006d60:	b933      	cbnz	r3, 8006d70 <_free_r+0x30>
 8006d62:	6063      	str	r3, [r4, #4]
 8006d64:	6014      	str	r4, [r2, #0]
 8006d66:	b003      	add	sp, #12
 8006d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d6c:	f000 b8da 	b.w	8006f24 <__malloc_unlock>
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	d908      	bls.n	8006d86 <_free_r+0x46>
 8006d74:	6825      	ldr	r5, [r4, #0]
 8006d76:	1961      	adds	r1, r4, r5
 8006d78:	428b      	cmp	r3, r1
 8006d7a:	bf01      	itttt	eq
 8006d7c:	6819      	ldreq	r1, [r3, #0]
 8006d7e:	685b      	ldreq	r3, [r3, #4]
 8006d80:	1949      	addeq	r1, r1, r5
 8006d82:	6021      	streq	r1, [r4, #0]
 8006d84:	e7ed      	b.n	8006d62 <_free_r+0x22>
 8006d86:	461a      	mov	r2, r3
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	b10b      	cbz	r3, 8006d90 <_free_r+0x50>
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	d9fa      	bls.n	8006d86 <_free_r+0x46>
 8006d90:	6811      	ldr	r1, [r2, #0]
 8006d92:	1855      	adds	r5, r2, r1
 8006d94:	42a5      	cmp	r5, r4
 8006d96:	d10b      	bne.n	8006db0 <_free_r+0x70>
 8006d98:	6824      	ldr	r4, [r4, #0]
 8006d9a:	4421      	add	r1, r4
 8006d9c:	1854      	adds	r4, r2, r1
 8006d9e:	42a3      	cmp	r3, r4
 8006da0:	6011      	str	r1, [r2, #0]
 8006da2:	d1e0      	bne.n	8006d66 <_free_r+0x26>
 8006da4:	681c      	ldr	r4, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	6053      	str	r3, [r2, #4]
 8006daa:	440c      	add	r4, r1
 8006dac:	6014      	str	r4, [r2, #0]
 8006dae:	e7da      	b.n	8006d66 <_free_r+0x26>
 8006db0:	d902      	bls.n	8006db8 <_free_r+0x78>
 8006db2:	230c      	movs	r3, #12
 8006db4:	6003      	str	r3, [r0, #0]
 8006db6:	e7d6      	b.n	8006d66 <_free_r+0x26>
 8006db8:	6825      	ldr	r5, [r4, #0]
 8006dba:	1961      	adds	r1, r4, r5
 8006dbc:	428b      	cmp	r3, r1
 8006dbe:	bf04      	itt	eq
 8006dc0:	6819      	ldreq	r1, [r3, #0]
 8006dc2:	685b      	ldreq	r3, [r3, #4]
 8006dc4:	6063      	str	r3, [r4, #4]
 8006dc6:	bf04      	itt	eq
 8006dc8:	1949      	addeq	r1, r1, r5
 8006dca:	6021      	streq	r1, [r4, #0]
 8006dcc:	6054      	str	r4, [r2, #4]
 8006dce:	e7ca      	b.n	8006d66 <_free_r+0x26>
 8006dd0:	b003      	add	sp, #12
 8006dd2:	bd30      	pop	{r4, r5, pc}
 8006dd4:	20000824 	.word	0x20000824

08006dd8 <sbrk_aligned>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	4e0e      	ldr	r6, [pc, #56]	; (8006e14 <sbrk_aligned+0x3c>)
 8006ddc:	460c      	mov	r4, r1
 8006dde:	6831      	ldr	r1, [r6, #0]
 8006de0:	4605      	mov	r5, r0
 8006de2:	b911      	cbnz	r1, 8006dea <sbrk_aligned+0x12>
 8006de4:	f000 fba6 	bl	8007534 <_sbrk_r>
 8006de8:	6030      	str	r0, [r6, #0]
 8006dea:	4621      	mov	r1, r4
 8006dec:	4628      	mov	r0, r5
 8006dee:	f000 fba1 	bl	8007534 <_sbrk_r>
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	d00a      	beq.n	8006e0c <sbrk_aligned+0x34>
 8006df6:	1cc4      	adds	r4, r0, #3
 8006df8:	f024 0403 	bic.w	r4, r4, #3
 8006dfc:	42a0      	cmp	r0, r4
 8006dfe:	d007      	beq.n	8006e10 <sbrk_aligned+0x38>
 8006e00:	1a21      	subs	r1, r4, r0
 8006e02:	4628      	mov	r0, r5
 8006e04:	f000 fb96 	bl	8007534 <_sbrk_r>
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d101      	bne.n	8006e10 <sbrk_aligned+0x38>
 8006e0c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e10:	4620      	mov	r0, r4
 8006e12:	bd70      	pop	{r4, r5, r6, pc}
 8006e14:	20000828 	.word	0x20000828

08006e18 <_malloc_r>:
 8006e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e1c:	1ccd      	adds	r5, r1, #3
 8006e1e:	f025 0503 	bic.w	r5, r5, #3
 8006e22:	3508      	adds	r5, #8
 8006e24:	2d0c      	cmp	r5, #12
 8006e26:	bf38      	it	cc
 8006e28:	250c      	movcc	r5, #12
 8006e2a:	2d00      	cmp	r5, #0
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	db01      	blt.n	8006e34 <_malloc_r+0x1c>
 8006e30:	42a9      	cmp	r1, r5
 8006e32:	d905      	bls.n	8006e40 <_malloc_r+0x28>
 8006e34:	230c      	movs	r3, #12
 8006e36:	603b      	str	r3, [r7, #0]
 8006e38:	2600      	movs	r6, #0
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f14 <_malloc_r+0xfc>
 8006e44:	f000 f868 	bl	8006f18 <__malloc_lock>
 8006e48:	f8d8 3000 	ldr.w	r3, [r8]
 8006e4c:	461c      	mov	r4, r3
 8006e4e:	bb5c      	cbnz	r4, 8006ea8 <_malloc_r+0x90>
 8006e50:	4629      	mov	r1, r5
 8006e52:	4638      	mov	r0, r7
 8006e54:	f7ff ffc0 	bl	8006dd8 <sbrk_aligned>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	d155      	bne.n	8006f0a <_malloc_r+0xf2>
 8006e5e:	f8d8 4000 	ldr.w	r4, [r8]
 8006e62:	4626      	mov	r6, r4
 8006e64:	2e00      	cmp	r6, #0
 8006e66:	d145      	bne.n	8006ef4 <_malloc_r+0xdc>
 8006e68:	2c00      	cmp	r4, #0
 8006e6a:	d048      	beq.n	8006efe <_malloc_r+0xe6>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4638      	mov	r0, r7
 8006e72:	eb04 0903 	add.w	r9, r4, r3
 8006e76:	f000 fb5d 	bl	8007534 <_sbrk_r>
 8006e7a:	4581      	cmp	r9, r0
 8006e7c:	d13f      	bne.n	8006efe <_malloc_r+0xe6>
 8006e7e:	6821      	ldr	r1, [r4, #0]
 8006e80:	1a6d      	subs	r5, r5, r1
 8006e82:	4629      	mov	r1, r5
 8006e84:	4638      	mov	r0, r7
 8006e86:	f7ff ffa7 	bl	8006dd8 <sbrk_aligned>
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	d037      	beq.n	8006efe <_malloc_r+0xe6>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	442b      	add	r3, r5
 8006e92:	6023      	str	r3, [r4, #0]
 8006e94:	f8d8 3000 	ldr.w	r3, [r8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d038      	beq.n	8006f0e <_malloc_r+0xf6>
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	42a2      	cmp	r2, r4
 8006ea0:	d12b      	bne.n	8006efa <_malloc_r+0xe2>
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	605a      	str	r2, [r3, #4]
 8006ea6:	e00f      	b.n	8006ec8 <_malloc_r+0xb0>
 8006ea8:	6822      	ldr	r2, [r4, #0]
 8006eaa:	1b52      	subs	r2, r2, r5
 8006eac:	d41f      	bmi.n	8006eee <_malloc_r+0xd6>
 8006eae:	2a0b      	cmp	r2, #11
 8006eb0:	d917      	bls.n	8006ee2 <_malloc_r+0xca>
 8006eb2:	1961      	adds	r1, r4, r5
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	6025      	str	r5, [r4, #0]
 8006eb8:	bf18      	it	ne
 8006eba:	6059      	strne	r1, [r3, #4]
 8006ebc:	6863      	ldr	r3, [r4, #4]
 8006ebe:	bf08      	it	eq
 8006ec0:	f8c8 1000 	streq.w	r1, [r8]
 8006ec4:	5162      	str	r2, [r4, r5]
 8006ec6:	604b      	str	r3, [r1, #4]
 8006ec8:	4638      	mov	r0, r7
 8006eca:	f104 060b 	add.w	r6, r4, #11
 8006ece:	f000 f829 	bl	8006f24 <__malloc_unlock>
 8006ed2:	f026 0607 	bic.w	r6, r6, #7
 8006ed6:	1d23      	adds	r3, r4, #4
 8006ed8:	1af2      	subs	r2, r6, r3
 8006eda:	d0ae      	beq.n	8006e3a <_malloc_r+0x22>
 8006edc:	1b9b      	subs	r3, r3, r6
 8006ede:	50a3      	str	r3, [r4, r2]
 8006ee0:	e7ab      	b.n	8006e3a <_malloc_r+0x22>
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	6862      	ldr	r2, [r4, #4]
 8006ee6:	d1dd      	bne.n	8006ea4 <_malloc_r+0x8c>
 8006ee8:	f8c8 2000 	str.w	r2, [r8]
 8006eec:	e7ec      	b.n	8006ec8 <_malloc_r+0xb0>
 8006eee:	4623      	mov	r3, r4
 8006ef0:	6864      	ldr	r4, [r4, #4]
 8006ef2:	e7ac      	b.n	8006e4e <_malloc_r+0x36>
 8006ef4:	4634      	mov	r4, r6
 8006ef6:	6876      	ldr	r6, [r6, #4]
 8006ef8:	e7b4      	b.n	8006e64 <_malloc_r+0x4c>
 8006efa:	4613      	mov	r3, r2
 8006efc:	e7cc      	b.n	8006e98 <_malloc_r+0x80>
 8006efe:	230c      	movs	r3, #12
 8006f00:	603b      	str	r3, [r7, #0]
 8006f02:	4638      	mov	r0, r7
 8006f04:	f000 f80e 	bl	8006f24 <__malloc_unlock>
 8006f08:	e797      	b.n	8006e3a <_malloc_r+0x22>
 8006f0a:	6025      	str	r5, [r4, #0]
 8006f0c:	e7dc      	b.n	8006ec8 <_malloc_r+0xb0>
 8006f0e:	605b      	str	r3, [r3, #4]
 8006f10:	deff      	udf	#255	; 0xff
 8006f12:	bf00      	nop
 8006f14:	20000824 	.word	0x20000824

08006f18 <__malloc_lock>:
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <__malloc_lock+0x8>)
 8006f1a:	f7ff bf07 	b.w	8006d2c <__retarget_lock_acquire_recursive>
 8006f1e:	bf00      	nop
 8006f20:	20000820 	.word	0x20000820

08006f24 <__malloc_unlock>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__malloc_unlock+0x8>)
 8006f26:	f7ff bf02 	b.w	8006d2e <__retarget_lock_release_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	20000820 	.word	0x20000820

08006f30 <__ssputs_r>:
 8006f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	688e      	ldr	r6, [r1, #8]
 8006f36:	461f      	mov	r7, r3
 8006f38:	42be      	cmp	r6, r7
 8006f3a:	680b      	ldr	r3, [r1, #0]
 8006f3c:	4682      	mov	sl, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	4690      	mov	r8, r2
 8006f42:	d82c      	bhi.n	8006f9e <__ssputs_r+0x6e>
 8006f44:	898a      	ldrh	r2, [r1, #12]
 8006f46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f4a:	d026      	beq.n	8006f9a <__ssputs_r+0x6a>
 8006f4c:	6965      	ldr	r5, [r4, #20]
 8006f4e:	6909      	ldr	r1, [r1, #16]
 8006f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f54:	eba3 0901 	sub.w	r9, r3, r1
 8006f58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f5c:	1c7b      	adds	r3, r7, #1
 8006f5e:	444b      	add	r3, r9
 8006f60:	106d      	asrs	r5, r5, #1
 8006f62:	429d      	cmp	r5, r3
 8006f64:	bf38      	it	cc
 8006f66:	461d      	movcc	r5, r3
 8006f68:	0553      	lsls	r3, r2, #21
 8006f6a:	d527      	bpl.n	8006fbc <__ssputs_r+0x8c>
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	f7ff ff53 	bl	8006e18 <_malloc_r>
 8006f72:	4606      	mov	r6, r0
 8006f74:	b360      	cbz	r0, 8006fd0 <__ssputs_r+0xa0>
 8006f76:	6921      	ldr	r1, [r4, #16]
 8006f78:	464a      	mov	r2, r9
 8006f7a:	f000 faeb 	bl	8007554 <memcpy>
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f88:	81a3      	strh	r3, [r4, #12]
 8006f8a:	6126      	str	r6, [r4, #16]
 8006f8c:	6165      	str	r5, [r4, #20]
 8006f8e:	444e      	add	r6, r9
 8006f90:	eba5 0509 	sub.w	r5, r5, r9
 8006f94:	6026      	str	r6, [r4, #0]
 8006f96:	60a5      	str	r5, [r4, #8]
 8006f98:	463e      	mov	r6, r7
 8006f9a:	42be      	cmp	r6, r7
 8006f9c:	d900      	bls.n	8006fa0 <__ssputs_r+0x70>
 8006f9e:	463e      	mov	r6, r7
 8006fa0:	6820      	ldr	r0, [r4, #0]
 8006fa2:	4632      	mov	r2, r6
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	f000 faab 	bl	8007500 <memmove>
 8006faa:	68a3      	ldr	r3, [r4, #8]
 8006fac:	1b9b      	subs	r3, r3, r6
 8006fae:	60a3      	str	r3, [r4, #8]
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	4433      	add	r3, r6
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fbc:	462a      	mov	r2, r5
 8006fbe:	f000 fad7 	bl	8007570 <_realloc_r>
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d1e0      	bne.n	8006f8a <__ssputs_r+0x5a>
 8006fc8:	6921      	ldr	r1, [r4, #16]
 8006fca:	4650      	mov	r0, sl
 8006fcc:	f7ff feb8 	bl	8006d40 <_free_r>
 8006fd0:	230c      	movs	r3, #12
 8006fd2:	f8ca 3000 	str.w	r3, [sl]
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fdc:	81a3      	strh	r3, [r4, #12]
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe2:	e7e9      	b.n	8006fb8 <__ssputs_r+0x88>

08006fe4 <_svfiprintf_r>:
 8006fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	4698      	mov	r8, r3
 8006fea:	898b      	ldrh	r3, [r1, #12]
 8006fec:	061b      	lsls	r3, r3, #24
 8006fee:	b09d      	sub	sp, #116	; 0x74
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	d50e      	bpl.n	8007016 <_svfiprintf_r+0x32>
 8006ff8:	690b      	ldr	r3, [r1, #16]
 8006ffa:	b963      	cbnz	r3, 8007016 <_svfiprintf_r+0x32>
 8006ffc:	2140      	movs	r1, #64	; 0x40
 8006ffe:	f7ff ff0b 	bl	8006e18 <_malloc_r>
 8007002:	6028      	str	r0, [r5, #0]
 8007004:	6128      	str	r0, [r5, #16]
 8007006:	b920      	cbnz	r0, 8007012 <_svfiprintf_r+0x2e>
 8007008:	230c      	movs	r3, #12
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	f04f 30ff 	mov.w	r0, #4294967295
 8007010:	e0d0      	b.n	80071b4 <_svfiprintf_r+0x1d0>
 8007012:	2340      	movs	r3, #64	; 0x40
 8007014:	616b      	str	r3, [r5, #20]
 8007016:	2300      	movs	r3, #0
 8007018:	9309      	str	r3, [sp, #36]	; 0x24
 800701a:	2320      	movs	r3, #32
 800701c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007020:	f8cd 800c 	str.w	r8, [sp, #12]
 8007024:	2330      	movs	r3, #48	; 0x30
 8007026:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071cc <_svfiprintf_r+0x1e8>
 800702a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800702e:	f04f 0901 	mov.w	r9, #1
 8007032:	4623      	mov	r3, r4
 8007034:	469a      	mov	sl, r3
 8007036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800703a:	b10a      	cbz	r2, 8007040 <_svfiprintf_r+0x5c>
 800703c:	2a25      	cmp	r2, #37	; 0x25
 800703e:	d1f9      	bne.n	8007034 <_svfiprintf_r+0x50>
 8007040:	ebba 0b04 	subs.w	fp, sl, r4
 8007044:	d00b      	beq.n	800705e <_svfiprintf_r+0x7a>
 8007046:	465b      	mov	r3, fp
 8007048:	4622      	mov	r2, r4
 800704a:	4629      	mov	r1, r5
 800704c:	4638      	mov	r0, r7
 800704e:	f7ff ff6f 	bl	8006f30 <__ssputs_r>
 8007052:	3001      	adds	r0, #1
 8007054:	f000 80a9 	beq.w	80071aa <_svfiprintf_r+0x1c6>
 8007058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800705a:	445a      	add	r2, fp
 800705c:	9209      	str	r2, [sp, #36]	; 0x24
 800705e:	f89a 3000 	ldrb.w	r3, [sl]
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 80a1 	beq.w	80071aa <_svfiprintf_r+0x1c6>
 8007068:	2300      	movs	r3, #0
 800706a:	f04f 32ff 	mov.w	r2, #4294967295
 800706e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007072:	f10a 0a01 	add.w	sl, sl, #1
 8007076:	9304      	str	r3, [sp, #16]
 8007078:	9307      	str	r3, [sp, #28]
 800707a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800707e:	931a      	str	r3, [sp, #104]	; 0x68
 8007080:	4654      	mov	r4, sl
 8007082:	2205      	movs	r2, #5
 8007084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007088:	4850      	ldr	r0, [pc, #320]	; (80071cc <_svfiprintf_r+0x1e8>)
 800708a:	f7f9 f8a1 	bl	80001d0 <memchr>
 800708e:	9a04      	ldr	r2, [sp, #16]
 8007090:	b9d8      	cbnz	r0, 80070ca <_svfiprintf_r+0xe6>
 8007092:	06d0      	lsls	r0, r2, #27
 8007094:	bf44      	itt	mi
 8007096:	2320      	movmi	r3, #32
 8007098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800709c:	0711      	lsls	r1, r2, #28
 800709e:	bf44      	itt	mi
 80070a0:	232b      	movmi	r3, #43	; 0x2b
 80070a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a6:	f89a 3000 	ldrb.w	r3, [sl]
 80070aa:	2b2a      	cmp	r3, #42	; 0x2a
 80070ac:	d015      	beq.n	80070da <_svfiprintf_r+0xf6>
 80070ae:	9a07      	ldr	r2, [sp, #28]
 80070b0:	4654      	mov	r4, sl
 80070b2:	2000      	movs	r0, #0
 80070b4:	f04f 0c0a 	mov.w	ip, #10
 80070b8:	4621      	mov	r1, r4
 80070ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070be:	3b30      	subs	r3, #48	; 0x30
 80070c0:	2b09      	cmp	r3, #9
 80070c2:	d94d      	bls.n	8007160 <_svfiprintf_r+0x17c>
 80070c4:	b1b0      	cbz	r0, 80070f4 <_svfiprintf_r+0x110>
 80070c6:	9207      	str	r2, [sp, #28]
 80070c8:	e014      	b.n	80070f4 <_svfiprintf_r+0x110>
 80070ca:	eba0 0308 	sub.w	r3, r0, r8
 80070ce:	fa09 f303 	lsl.w	r3, r9, r3
 80070d2:	4313      	orrs	r3, r2
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	46a2      	mov	sl, r4
 80070d8:	e7d2      	b.n	8007080 <_svfiprintf_r+0x9c>
 80070da:	9b03      	ldr	r3, [sp, #12]
 80070dc:	1d19      	adds	r1, r3, #4
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	9103      	str	r1, [sp, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	bfbb      	ittet	lt
 80070e6:	425b      	neglt	r3, r3
 80070e8:	f042 0202 	orrlt.w	r2, r2, #2
 80070ec:	9307      	strge	r3, [sp, #28]
 80070ee:	9307      	strlt	r3, [sp, #28]
 80070f0:	bfb8      	it	lt
 80070f2:	9204      	strlt	r2, [sp, #16]
 80070f4:	7823      	ldrb	r3, [r4, #0]
 80070f6:	2b2e      	cmp	r3, #46	; 0x2e
 80070f8:	d10c      	bne.n	8007114 <_svfiprintf_r+0x130>
 80070fa:	7863      	ldrb	r3, [r4, #1]
 80070fc:	2b2a      	cmp	r3, #42	; 0x2a
 80070fe:	d134      	bne.n	800716a <_svfiprintf_r+0x186>
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	1d1a      	adds	r2, r3, #4
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	9203      	str	r2, [sp, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	bfb8      	it	lt
 800710c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007110:	3402      	adds	r4, #2
 8007112:	9305      	str	r3, [sp, #20]
 8007114:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80071dc <_svfiprintf_r+0x1f8>
 8007118:	7821      	ldrb	r1, [r4, #0]
 800711a:	2203      	movs	r2, #3
 800711c:	4650      	mov	r0, sl
 800711e:	f7f9 f857 	bl	80001d0 <memchr>
 8007122:	b138      	cbz	r0, 8007134 <_svfiprintf_r+0x150>
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	eba0 000a 	sub.w	r0, r0, sl
 800712a:	2240      	movs	r2, #64	; 0x40
 800712c:	4082      	lsls	r2, r0
 800712e:	4313      	orrs	r3, r2
 8007130:	3401      	adds	r4, #1
 8007132:	9304      	str	r3, [sp, #16]
 8007134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007138:	4825      	ldr	r0, [pc, #148]	; (80071d0 <_svfiprintf_r+0x1ec>)
 800713a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800713e:	2206      	movs	r2, #6
 8007140:	f7f9 f846 	bl	80001d0 <memchr>
 8007144:	2800      	cmp	r0, #0
 8007146:	d038      	beq.n	80071ba <_svfiprintf_r+0x1d6>
 8007148:	4b22      	ldr	r3, [pc, #136]	; (80071d4 <_svfiprintf_r+0x1f0>)
 800714a:	bb1b      	cbnz	r3, 8007194 <_svfiprintf_r+0x1b0>
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	3307      	adds	r3, #7
 8007150:	f023 0307 	bic.w	r3, r3, #7
 8007154:	3308      	adds	r3, #8
 8007156:	9303      	str	r3, [sp, #12]
 8007158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715a:	4433      	add	r3, r6
 800715c:	9309      	str	r3, [sp, #36]	; 0x24
 800715e:	e768      	b.n	8007032 <_svfiprintf_r+0x4e>
 8007160:	fb0c 3202 	mla	r2, ip, r2, r3
 8007164:	460c      	mov	r4, r1
 8007166:	2001      	movs	r0, #1
 8007168:	e7a6      	b.n	80070b8 <_svfiprintf_r+0xd4>
 800716a:	2300      	movs	r3, #0
 800716c:	3401      	adds	r4, #1
 800716e:	9305      	str	r3, [sp, #20]
 8007170:	4619      	mov	r1, r3
 8007172:	f04f 0c0a 	mov.w	ip, #10
 8007176:	4620      	mov	r0, r4
 8007178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800717c:	3a30      	subs	r2, #48	; 0x30
 800717e:	2a09      	cmp	r2, #9
 8007180:	d903      	bls.n	800718a <_svfiprintf_r+0x1a6>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0c6      	beq.n	8007114 <_svfiprintf_r+0x130>
 8007186:	9105      	str	r1, [sp, #20]
 8007188:	e7c4      	b.n	8007114 <_svfiprintf_r+0x130>
 800718a:	fb0c 2101 	mla	r1, ip, r1, r2
 800718e:	4604      	mov	r4, r0
 8007190:	2301      	movs	r3, #1
 8007192:	e7f0      	b.n	8007176 <_svfiprintf_r+0x192>
 8007194:	ab03      	add	r3, sp, #12
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	462a      	mov	r2, r5
 800719a:	4b0f      	ldr	r3, [pc, #60]	; (80071d8 <_svfiprintf_r+0x1f4>)
 800719c:	a904      	add	r1, sp, #16
 800719e:	4638      	mov	r0, r7
 80071a0:	f3af 8000 	nop.w
 80071a4:	1c42      	adds	r2, r0, #1
 80071a6:	4606      	mov	r6, r0
 80071a8:	d1d6      	bne.n	8007158 <_svfiprintf_r+0x174>
 80071aa:	89ab      	ldrh	r3, [r5, #12]
 80071ac:	065b      	lsls	r3, r3, #25
 80071ae:	f53f af2d 	bmi.w	800700c <_svfiprintf_r+0x28>
 80071b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071b4:	b01d      	add	sp, #116	; 0x74
 80071b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ba:	ab03      	add	r3, sp, #12
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	462a      	mov	r2, r5
 80071c0:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <_svfiprintf_r+0x1f4>)
 80071c2:	a904      	add	r1, sp, #16
 80071c4:	4638      	mov	r0, r7
 80071c6:	f000 f879 	bl	80072bc <_printf_i>
 80071ca:	e7eb      	b.n	80071a4 <_svfiprintf_r+0x1c0>
 80071cc:	08009b58 	.word	0x08009b58
 80071d0:	08009b62 	.word	0x08009b62
 80071d4:	00000000 	.word	0x00000000
 80071d8:	08006f31 	.word	0x08006f31
 80071dc:	08009b5e 	.word	0x08009b5e

080071e0 <_printf_common>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	4616      	mov	r6, r2
 80071e6:	4699      	mov	r9, r3
 80071e8:	688a      	ldr	r2, [r1, #8]
 80071ea:	690b      	ldr	r3, [r1, #16]
 80071ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071f0:	4293      	cmp	r3, r2
 80071f2:	bfb8      	it	lt
 80071f4:	4613      	movlt	r3, r2
 80071f6:	6033      	str	r3, [r6, #0]
 80071f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071fc:	4607      	mov	r7, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	b10a      	cbz	r2, 8007206 <_printf_common+0x26>
 8007202:	3301      	adds	r3, #1
 8007204:	6033      	str	r3, [r6, #0]
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	0699      	lsls	r1, r3, #26
 800720a:	bf42      	ittt	mi
 800720c:	6833      	ldrmi	r3, [r6, #0]
 800720e:	3302      	addmi	r3, #2
 8007210:	6033      	strmi	r3, [r6, #0]
 8007212:	6825      	ldr	r5, [r4, #0]
 8007214:	f015 0506 	ands.w	r5, r5, #6
 8007218:	d106      	bne.n	8007228 <_printf_common+0x48>
 800721a:	f104 0a19 	add.w	sl, r4, #25
 800721e:	68e3      	ldr	r3, [r4, #12]
 8007220:	6832      	ldr	r2, [r6, #0]
 8007222:	1a9b      	subs	r3, r3, r2
 8007224:	42ab      	cmp	r3, r5
 8007226:	dc26      	bgt.n	8007276 <_printf_common+0x96>
 8007228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800722c:	1e13      	subs	r3, r2, #0
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	bf18      	it	ne
 8007232:	2301      	movne	r3, #1
 8007234:	0692      	lsls	r2, r2, #26
 8007236:	d42b      	bmi.n	8007290 <_printf_common+0xb0>
 8007238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800723c:	4649      	mov	r1, r9
 800723e:	4638      	mov	r0, r7
 8007240:	47c0      	blx	r8
 8007242:	3001      	adds	r0, #1
 8007244:	d01e      	beq.n	8007284 <_printf_common+0xa4>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	6922      	ldr	r2, [r4, #16]
 800724a:	f003 0306 	and.w	r3, r3, #6
 800724e:	2b04      	cmp	r3, #4
 8007250:	bf02      	ittt	eq
 8007252:	68e5      	ldreq	r5, [r4, #12]
 8007254:	6833      	ldreq	r3, [r6, #0]
 8007256:	1aed      	subeq	r5, r5, r3
 8007258:	68a3      	ldr	r3, [r4, #8]
 800725a:	bf0c      	ite	eq
 800725c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007260:	2500      	movne	r5, #0
 8007262:	4293      	cmp	r3, r2
 8007264:	bfc4      	itt	gt
 8007266:	1a9b      	subgt	r3, r3, r2
 8007268:	18ed      	addgt	r5, r5, r3
 800726a:	2600      	movs	r6, #0
 800726c:	341a      	adds	r4, #26
 800726e:	42b5      	cmp	r5, r6
 8007270:	d11a      	bne.n	80072a8 <_printf_common+0xc8>
 8007272:	2000      	movs	r0, #0
 8007274:	e008      	b.n	8007288 <_printf_common+0xa8>
 8007276:	2301      	movs	r3, #1
 8007278:	4652      	mov	r2, sl
 800727a:	4649      	mov	r1, r9
 800727c:	4638      	mov	r0, r7
 800727e:	47c0      	blx	r8
 8007280:	3001      	adds	r0, #1
 8007282:	d103      	bne.n	800728c <_printf_common+0xac>
 8007284:	f04f 30ff 	mov.w	r0, #4294967295
 8007288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728c:	3501      	adds	r5, #1
 800728e:	e7c6      	b.n	800721e <_printf_common+0x3e>
 8007290:	18e1      	adds	r1, r4, r3
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	2030      	movs	r0, #48	; 0x30
 8007296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800729a:	4422      	add	r2, r4
 800729c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072a4:	3302      	adds	r3, #2
 80072a6:	e7c7      	b.n	8007238 <_printf_common+0x58>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4622      	mov	r2, r4
 80072ac:	4649      	mov	r1, r9
 80072ae:	4638      	mov	r0, r7
 80072b0:	47c0      	blx	r8
 80072b2:	3001      	adds	r0, #1
 80072b4:	d0e6      	beq.n	8007284 <_printf_common+0xa4>
 80072b6:	3601      	adds	r6, #1
 80072b8:	e7d9      	b.n	800726e <_printf_common+0x8e>
	...

080072bc <_printf_i>:
 80072bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	7e0f      	ldrb	r7, [r1, #24]
 80072c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072c4:	2f78      	cmp	r7, #120	; 0x78
 80072c6:	4691      	mov	r9, r2
 80072c8:	4680      	mov	r8, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	469a      	mov	sl, r3
 80072ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072d2:	d807      	bhi.n	80072e4 <_printf_i+0x28>
 80072d4:	2f62      	cmp	r7, #98	; 0x62
 80072d6:	d80a      	bhi.n	80072ee <_printf_i+0x32>
 80072d8:	2f00      	cmp	r7, #0
 80072da:	f000 80d4 	beq.w	8007486 <_printf_i+0x1ca>
 80072de:	2f58      	cmp	r7, #88	; 0x58
 80072e0:	f000 80c0 	beq.w	8007464 <_printf_i+0x1a8>
 80072e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072ec:	e03a      	b.n	8007364 <_printf_i+0xa8>
 80072ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072f2:	2b15      	cmp	r3, #21
 80072f4:	d8f6      	bhi.n	80072e4 <_printf_i+0x28>
 80072f6:	a101      	add	r1, pc, #4	; (adr r1, 80072fc <_printf_i+0x40>)
 80072f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072fc:	08007355 	.word	0x08007355
 8007300:	08007369 	.word	0x08007369
 8007304:	080072e5 	.word	0x080072e5
 8007308:	080072e5 	.word	0x080072e5
 800730c:	080072e5 	.word	0x080072e5
 8007310:	080072e5 	.word	0x080072e5
 8007314:	08007369 	.word	0x08007369
 8007318:	080072e5 	.word	0x080072e5
 800731c:	080072e5 	.word	0x080072e5
 8007320:	080072e5 	.word	0x080072e5
 8007324:	080072e5 	.word	0x080072e5
 8007328:	0800746d 	.word	0x0800746d
 800732c:	08007395 	.word	0x08007395
 8007330:	08007427 	.word	0x08007427
 8007334:	080072e5 	.word	0x080072e5
 8007338:	080072e5 	.word	0x080072e5
 800733c:	0800748f 	.word	0x0800748f
 8007340:	080072e5 	.word	0x080072e5
 8007344:	08007395 	.word	0x08007395
 8007348:	080072e5 	.word	0x080072e5
 800734c:	080072e5 	.word	0x080072e5
 8007350:	0800742f 	.word	0x0800742f
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	1d1a      	adds	r2, r3, #4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	602a      	str	r2, [r5, #0]
 800735c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007364:	2301      	movs	r3, #1
 8007366:	e09f      	b.n	80074a8 <_printf_i+0x1ec>
 8007368:	6820      	ldr	r0, [r4, #0]
 800736a:	682b      	ldr	r3, [r5, #0]
 800736c:	0607      	lsls	r7, r0, #24
 800736e:	f103 0104 	add.w	r1, r3, #4
 8007372:	6029      	str	r1, [r5, #0]
 8007374:	d501      	bpl.n	800737a <_printf_i+0xbe>
 8007376:	681e      	ldr	r6, [r3, #0]
 8007378:	e003      	b.n	8007382 <_printf_i+0xc6>
 800737a:	0646      	lsls	r6, r0, #25
 800737c:	d5fb      	bpl.n	8007376 <_printf_i+0xba>
 800737e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007382:	2e00      	cmp	r6, #0
 8007384:	da03      	bge.n	800738e <_printf_i+0xd2>
 8007386:	232d      	movs	r3, #45	; 0x2d
 8007388:	4276      	negs	r6, r6
 800738a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800738e:	485a      	ldr	r0, [pc, #360]	; (80074f8 <_printf_i+0x23c>)
 8007390:	230a      	movs	r3, #10
 8007392:	e012      	b.n	80073ba <_printf_i+0xfe>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	6820      	ldr	r0, [r4, #0]
 8007398:	1d19      	adds	r1, r3, #4
 800739a:	6029      	str	r1, [r5, #0]
 800739c:	0605      	lsls	r5, r0, #24
 800739e:	d501      	bpl.n	80073a4 <_printf_i+0xe8>
 80073a0:	681e      	ldr	r6, [r3, #0]
 80073a2:	e002      	b.n	80073aa <_printf_i+0xee>
 80073a4:	0641      	lsls	r1, r0, #25
 80073a6:	d5fb      	bpl.n	80073a0 <_printf_i+0xe4>
 80073a8:	881e      	ldrh	r6, [r3, #0]
 80073aa:	4853      	ldr	r0, [pc, #332]	; (80074f8 <_printf_i+0x23c>)
 80073ac:	2f6f      	cmp	r7, #111	; 0x6f
 80073ae:	bf0c      	ite	eq
 80073b0:	2308      	moveq	r3, #8
 80073b2:	230a      	movne	r3, #10
 80073b4:	2100      	movs	r1, #0
 80073b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073ba:	6865      	ldr	r5, [r4, #4]
 80073bc:	60a5      	str	r5, [r4, #8]
 80073be:	2d00      	cmp	r5, #0
 80073c0:	bfa2      	ittt	ge
 80073c2:	6821      	ldrge	r1, [r4, #0]
 80073c4:	f021 0104 	bicge.w	r1, r1, #4
 80073c8:	6021      	strge	r1, [r4, #0]
 80073ca:	b90e      	cbnz	r6, 80073d0 <_printf_i+0x114>
 80073cc:	2d00      	cmp	r5, #0
 80073ce:	d04b      	beq.n	8007468 <_printf_i+0x1ac>
 80073d0:	4615      	mov	r5, r2
 80073d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80073d6:	fb03 6711 	mls	r7, r3, r1, r6
 80073da:	5dc7      	ldrb	r7, [r0, r7]
 80073dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073e0:	4637      	mov	r7, r6
 80073e2:	42bb      	cmp	r3, r7
 80073e4:	460e      	mov	r6, r1
 80073e6:	d9f4      	bls.n	80073d2 <_printf_i+0x116>
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d10b      	bne.n	8007404 <_printf_i+0x148>
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	07de      	lsls	r6, r3, #31
 80073f0:	d508      	bpl.n	8007404 <_printf_i+0x148>
 80073f2:	6923      	ldr	r3, [r4, #16]
 80073f4:	6861      	ldr	r1, [r4, #4]
 80073f6:	4299      	cmp	r1, r3
 80073f8:	bfde      	ittt	le
 80073fa:	2330      	movle	r3, #48	; 0x30
 80073fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007400:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007404:	1b52      	subs	r2, r2, r5
 8007406:	6122      	str	r2, [r4, #16]
 8007408:	f8cd a000 	str.w	sl, [sp]
 800740c:	464b      	mov	r3, r9
 800740e:	aa03      	add	r2, sp, #12
 8007410:	4621      	mov	r1, r4
 8007412:	4640      	mov	r0, r8
 8007414:	f7ff fee4 	bl	80071e0 <_printf_common>
 8007418:	3001      	adds	r0, #1
 800741a:	d14a      	bne.n	80074b2 <_printf_i+0x1f6>
 800741c:	f04f 30ff 	mov.w	r0, #4294967295
 8007420:	b004      	add	sp, #16
 8007422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	f043 0320 	orr.w	r3, r3, #32
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	4833      	ldr	r0, [pc, #204]	; (80074fc <_printf_i+0x240>)
 8007430:	2778      	movs	r7, #120	; 0x78
 8007432:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	6829      	ldr	r1, [r5, #0]
 800743a:	061f      	lsls	r7, r3, #24
 800743c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007440:	d402      	bmi.n	8007448 <_printf_i+0x18c>
 8007442:	065f      	lsls	r7, r3, #25
 8007444:	bf48      	it	mi
 8007446:	b2b6      	uxthmi	r6, r6
 8007448:	07df      	lsls	r7, r3, #31
 800744a:	bf48      	it	mi
 800744c:	f043 0320 	orrmi.w	r3, r3, #32
 8007450:	6029      	str	r1, [r5, #0]
 8007452:	bf48      	it	mi
 8007454:	6023      	strmi	r3, [r4, #0]
 8007456:	b91e      	cbnz	r6, 8007460 <_printf_i+0x1a4>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	f023 0320 	bic.w	r3, r3, #32
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	2310      	movs	r3, #16
 8007462:	e7a7      	b.n	80073b4 <_printf_i+0xf8>
 8007464:	4824      	ldr	r0, [pc, #144]	; (80074f8 <_printf_i+0x23c>)
 8007466:	e7e4      	b.n	8007432 <_printf_i+0x176>
 8007468:	4615      	mov	r5, r2
 800746a:	e7bd      	b.n	80073e8 <_printf_i+0x12c>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	6826      	ldr	r6, [r4, #0]
 8007470:	6961      	ldr	r1, [r4, #20]
 8007472:	1d18      	adds	r0, r3, #4
 8007474:	6028      	str	r0, [r5, #0]
 8007476:	0635      	lsls	r5, r6, #24
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	d501      	bpl.n	8007480 <_printf_i+0x1c4>
 800747c:	6019      	str	r1, [r3, #0]
 800747e:	e002      	b.n	8007486 <_printf_i+0x1ca>
 8007480:	0670      	lsls	r0, r6, #25
 8007482:	d5fb      	bpl.n	800747c <_printf_i+0x1c0>
 8007484:	8019      	strh	r1, [r3, #0]
 8007486:	2300      	movs	r3, #0
 8007488:	6123      	str	r3, [r4, #16]
 800748a:	4615      	mov	r5, r2
 800748c:	e7bc      	b.n	8007408 <_printf_i+0x14c>
 800748e:	682b      	ldr	r3, [r5, #0]
 8007490:	1d1a      	adds	r2, r3, #4
 8007492:	602a      	str	r2, [r5, #0]
 8007494:	681d      	ldr	r5, [r3, #0]
 8007496:	6862      	ldr	r2, [r4, #4]
 8007498:	2100      	movs	r1, #0
 800749a:	4628      	mov	r0, r5
 800749c:	f7f8 fe98 	bl	80001d0 <memchr>
 80074a0:	b108      	cbz	r0, 80074a6 <_printf_i+0x1ea>
 80074a2:	1b40      	subs	r0, r0, r5
 80074a4:	6060      	str	r0, [r4, #4]
 80074a6:	6863      	ldr	r3, [r4, #4]
 80074a8:	6123      	str	r3, [r4, #16]
 80074aa:	2300      	movs	r3, #0
 80074ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074b0:	e7aa      	b.n	8007408 <_printf_i+0x14c>
 80074b2:	6923      	ldr	r3, [r4, #16]
 80074b4:	462a      	mov	r2, r5
 80074b6:	4649      	mov	r1, r9
 80074b8:	4640      	mov	r0, r8
 80074ba:	47d0      	blx	sl
 80074bc:	3001      	adds	r0, #1
 80074be:	d0ad      	beq.n	800741c <_printf_i+0x160>
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	079b      	lsls	r3, r3, #30
 80074c4:	d413      	bmi.n	80074ee <_printf_i+0x232>
 80074c6:	68e0      	ldr	r0, [r4, #12]
 80074c8:	9b03      	ldr	r3, [sp, #12]
 80074ca:	4298      	cmp	r0, r3
 80074cc:	bfb8      	it	lt
 80074ce:	4618      	movlt	r0, r3
 80074d0:	e7a6      	b.n	8007420 <_printf_i+0x164>
 80074d2:	2301      	movs	r3, #1
 80074d4:	4632      	mov	r2, r6
 80074d6:	4649      	mov	r1, r9
 80074d8:	4640      	mov	r0, r8
 80074da:	47d0      	blx	sl
 80074dc:	3001      	adds	r0, #1
 80074de:	d09d      	beq.n	800741c <_printf_i+0x160>
 80074e0:	3501      	adds	r5, #1
 80074e2:	68e3      	ldr	r3, [r4, #12]
 80074e4:	9903      	ldr	r1, [sp, #12]
 80074e6:	1a5b      	subs	r3, r3, r1
 80074e8:	42ab      	cmp	r3, r5
 80074ea:	dcf2      	bgt.n	80074d2 <_printf_i+0x216>
 80074ec:	e7eb      	b.n	80074c6 <_printf_i+0x20a>
 80074ee:	2500      	movs	r5, #0
 80074f0:	f104 0619 	add.w	r6, r4, #25
 80074f4:	e7f5      	b.n	80074e2 <_printf_i+0x226>
 80074f6:	bf00      	nop
 80074f8:	08009b69 	.word	0x08009b69
 80074fc:	08009b7a 	.word	0x08009b7a

08007500 <memmove>:
 8007500:	4288      	cmp	r0, r1
 8007502:	b510      	push	{r4, lr}
 8007504:	eb01 0402 	add.w	r4, r1, r2
 8007508:	d902      	bls.n	8007510 <memmove+0x10>
 800750a:	4284      	cmp	r4, r0
 800750c:	4623      	mov	r3, r4
 800750e:	d807      	bhi.n	8007520 <memmove+0x20>
 8007510:	1e43      	subs	r3, r0, #1
 8007512:	42a1      	cmp	r1, r4
 8007514:	d008      	beq.n	8007528 <memmove+0x28>
 8007516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800751a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800751e:	e7f8      	b.n	8007512 <memmove+0x12>
 8007520:	4402      	add	r2, r0
 8007522:	4601      	mov	r1, r0
 8007524:	428a      	cmp	r2, r1
 8007526:	d100      	bne.n	800752a <memmove+0x2a>
 8007528:	bd10      	pop	{r4, pc}
 800752a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800752e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007532:	e7f7      	b.n	8007524 <memmove+0x24>

08007534 <_sbrk_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d06      	ldr	r5, [pc, #24]	; (8007550 <_sbrk_r+0x1c>)
 8007538:	2300      	movs	r3, #0
 800753a:	4604      	mov	r4, r0
 800753c:	4608      	mov	r0, r1
 800753e:	602b      	str	r3, [r5, #0]
 8007540:	f7fb f934 	bl	80027ac <_sbrk>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_sbrk_r+0x1a>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	b103      	cbz	r3, 800754e <_sbrk_r+0x1a>
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	2000081c 	.word	0x2000081c

08007554 <memcpy>:
 8007554:	440a      	add	r2, r1
 8007556:	4291      	cmp	r1, r2
 8007558:	f100 33ff 	add.w	r3, r0, #4294967295
 800755c:	d100      	bne.n	8007560 <memcpy+0xc>
 800755e:	4770      	bx	lr
 8007560:	b510      	push	{r4, lr}
 8007562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800756a:	4291      	cmp	r1, r2
 800756c:	d1f9      	bne.n	8007562 <memcpy+0xe>
 800756e:	bd10      	pop	{r4, pc}

08007570 <_realloc_r>:
 8007570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007574:	4680      	mov	r8, r0
 8007576:	4614      	mov	r4, r2
 8007578:	460e      	mov	r6, r1
 800757a:	b921      	cbnz	r1, 8007586 <_realloc_r+0x16>
 800757c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007580:	4611      	mov	r1, r2
 8007582:	f7ff bc49 	b.w	8006e18 <_malloc_r>
 8007586:	b92a      	cbnz	r2, 8007594 <_realloc_r+0x24>
 8007588:	f7ff fbda 	bl	8006d40 <_free_r>
 800758c:	4625      	mov	r5, r4
 800758e:	4628      	mov	r0, r5
 8007590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007594:	f000 f81b 	bl	80075ce <_malloc_usable_size_r>
 8007598:	4284      	cmp	r4, r0
 800759a:	4607      	mov	r7, r0
 800759c:	d802      	bhi.n	80075a4 <_realloc_r+0x34>
 800759e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075a2:	d812      	bhi.n	80075ca <_realloc_r+0x5a>
 80075a4:	4621      	mov	r1, r4
 80075a6:	4640      	mov	r0, r8
 80075a8:	f7ff fc36 	bl	8006e18 <_malloc_r>
 80075ac:	4605      	mov	r5, r0
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d0ed      	beq.n	800758e <_realloc_r+0x1e>
 80075b2:	42bc      	cmp	r4, r7
 80075b4:	4622      	mov	r2, r4
 80075b6:	4631      	mov	r1, r6
 80075b8:	bf28      	it	cs
 80075ba:	463a      	movcs	r2, r7
 80075bc:	f7ff ffca 	bl	8007554 <memcpy>
 80075c0:	4631      	mov	r1, r6
 80075c2:	4640      	mov	r0, r8
 80075c4:	f7ff fbbc 	bl	8006d40 <_free_r>
 80075c8:	e7e1      	b.n	800758e <_realloc_r+0x1e>
 80075ca:	4635      	mov	r5, r6
 80075cc:	e7df      	b.n	800758e <_realloc_r+0x1e>

080075ce <_malloc_usable_size_r>:
 80075ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d2:	1f18      	subs	r0, r3, #4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bfbc      	itt	lt
 80075d8:	580b      	ldrlt	r3, [r1, r0]
 80075da:	18c0      	addlt	r0, r0, r3
 80075dc:	4770      	bx	lr
	...

080075e0 <_init>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	bf00      	nop
 80075e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e6:	bc08      	pop	{r3}
 80075e8:	469e      	mov	lr, r3
 80075ea:	4770      	bx	lr

080075ec <_fini>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	bf00      	nop
 80075f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f2:	bc08      	pop	{r3}
 80075f4:	469e      	mov	lr, r3
 80075f6:	4770      	bx	lr
